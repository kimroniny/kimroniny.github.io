<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title><![CDATA[grpc]]></title>
    <url>%2F2019%2F12%2F05%2Fgrpc%2F</url>
    <content type="text"><![CDATA[关于google grpc的一些基础知识和操作流程 必要的 packages12pip install grpciopip install grpcio-tools 将 protobuf 生成为 python 代码12345python -m grpc_tools.protoc -I../../protos --python_out=. --grpc_python_out=. ../../protos/route_guide.proto// protoc.py [OPTION] PROTO_FILES// -IPATH: --proto_path=PATH, Specify the directory in which to search for imports.// --python_out: Generate Python source file// --grpc_python_out: Generate Python source file]]></content>
      <categories>
        <category>python</category>
        <category>grpc</category>
      </categories>
      <tags>
        <tag>grpc</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[python 系统级操作]]></title>
    <url>%2F2019%2F12%2F05%2Fpython-%E7%B3%BB%E7%BB%9F%E7%BA%A7%E6%93%8D%E4%BD%9C%2F</url>
    <content type="text"><![CDATA[关于python中对系统的一些操作，比如os模块等等 模块 os12345678910import osfilepath = os.path.abspath(__file__)os.path.exists(filepath)os.path.isfile(filepath)os.path.isdir(filepath)os.mkdir() # 单级目录os.makedirs() # 多级目录 模块 sys123import syssys.path.append() 模块 subprocess123456import subprocessres = subprocess.Popen(['cmd1', 'cmd2', ], shell=True, stdout=subprocess.PIPE, stderr=subprocess.PIPE)err = res.stderr.read().decode('gbk')out = res.stdout.read().decode('gbk')# read() 只能读取一次]]></content>
      <categories>
        <category>python</category>
        <category>系统操作</category>
      </categories>
      <tags>
        <tag>python</tag>
        <tag>系统操作</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[python 多线程]]></title>
    <url>%2F2019%2F12%2F04%2Fpython-%E5%A4%9A%E7%BA%BF%E7%A8%8B%2F</url>
    <content type="text"><![CDATA[关于python中多线程的实现以及一些知识点 threading实现方式 12345678910111213import threadingthreads = []for _ in range(thread_num): threads.append(threading.Thread(target=func, args=[arg0, arg1]))for i in range(thread_num): threads[i].start()for i in range(thread_num): threads[i].join() # join的含义就是阻塞在线程i，直到线程i停止，然后阻塞在下一个线程i+1，直到线程i+1停止# 线程锁# mutex = threading.RLock()# mutex.acquire()# mutex.release() threadpool1pip install threadpool 123456import threadpoolpool = threadpool.ThreadPool(thread_num) # 成立线程池params = [x*x for x in range(thread_num)] # 拼接 func 的参数thread_requests = threadpool.makeRequests(post, params) #[pool.putRequest(req) for req in thread_requests] # putRequest就已经启动了线程pool.wait() # 类似于join进行堵塞 伪并行因为GIL（全局解释锁）。 python中的线程在单个CPU上进行，使用GIL解决资源共享的一致性问题。 对于计算密集型多线程程序，也就是说单个线程不会有因本线程问题而阻塞的情况（比如网络延迟），那么该线程本来可以安然无恙、无需等待的去进行，但是其他线程要来争夺资源，所以需要进行线程间的切换，而多线程的交替执行涉及到上下文切换、锁机制处理（获取锁，释放锁等），所以需要耗费更多的时间。 对于网络密集型多线程程序，则无需考虑该问题，因为在等待网络请求的过程中，线程往往会处于阻塞状态，这是可以切换到其他线程进行其他操作，因此节省了时间。 thread.setDaemon(True)译名：守护线程 执行下面代码后 1thread[i].setDaemon(True) 主要体现在线程i与主线程之间的关系，主线程执行完毕后，会直接退出程序，杀死线程i，不会管线程i是否执行完毕 setDaemon的作用和join相反，join是阻塞主线程]]></content>
  </entry>
  <entry>
    <title><![CDATA[git基本操作]]></title>
    <url>%2F2019%2F12%2F01%2Fgit%E5%9F%BA%E6%9C%AC%E6%93%8D%E4%BD%9C%2F</url>
    <content type="text"><![CDATA[关于git的基本指令和操作，方便查询 add时忽略某些文件根目录添加12```bashtouch .gitignore 配置本地用户名和邮箱12git config --local user.name ""git config --local user.email ""]]></content>
      <categories>
        <category>git</category>
      </categories>
      <tags>
        <tag>git</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[hexo添加图片]]></title>
    <url>%2F2019%2F12%2F01%2Fhexo%E6%B7%BB%E5%8A%A0%E5%9B%BE%E7%89%87%2F</url>
    <content type="text"><![CDATA[如何为hexo网站添加图片呢？ _config.yml中的post_asset_folder设为true 每次执行指令hexo new &quot;new_post&quot;，都会在_post目录下生成对应名称的文件夹，把图片放里面 md文件中的图片只需要图片名+后缀名]]></content>
      <categories>
        <category>hexo</category>
      </categories>
  </entry>
  <entry>
    <title><![CDATA[hexo设置域名]]></title>
    <url>%2F2019%2F12%2F01%2Fhexo%E8%AE%BE%E7%BD%AE%E5%9F%9F%E5%90%8D%2F</url>
    <content type="text"><![CDATA[如何为hexo设置域名呢 购买域名 在blog/source/文件夹下创建CNAME文件（无后缀） CNAME中写你的新域名 username.github.io 项目中的setting中的github pages选项中，在Custom domain填写自己的域名]]></content>
  </entry>
  <entry>
    <title><![CDATA[windows 设置代理]]></title>
    <url>%2F2019%2F11%2F30%2Fwindows-%E8%AE%BE%E7%BD%AE%E4%BB%A3%E7%90%86%2F</url>
    <content type="text"><![CDATA[在Windows中设置本地代理 命令行 123set HTTP_PROXY=http://user:password@proxy.domain.com:portset HTTP_PROXY=http://127.0.0.1:12639set HTTPS_PROXY=http://127.0.0.1:12639 系统变量 创建两个系统变量 123HTTP_PROXYHTTPS_PROXY# 内容：http://127.0.0.1:12639]]></content>
      <tags>
        <tag>proxy</tag>
        <tag>windows</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[centos7 安装vmware-tools]]></title>
    <url>%2F2018%2F09%2F03%2Fcentos7-%E5%AE%89%E8%A3%85vmware-tools%2F</url>
    <content type="text"><![CDATA[在vmware12中，centos7安装vmware-tools的过程]]></content>
      <categories>
        <category>vmware</category>
      </categories>
      <tags>
        <tag>centos</tag>
        <tag>vmware</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[anaconda 的安装与使用]]></title>
    <url>%2F2018%2F09%2F02%2Fanaconda-%E7%9A%84%E5%AE%89%E8%A3%85%E4%B8%8E%E4%BD%BF%E7%94%A8%2F</url>
    <content type="text"><![CDATA[安装和使用anaconda以及miniconda过程中遇到的问题 安装问题1： centos7.5 64位安装miniconda遇到报错： command not found```1234**解决办法：** 安装bzip2： yum install -y bzip2 1234567 **问题2：** 加入系统path **解决办法（永久生效）：**- 修改/etc/profile文件 ```bashvim /etc/profile 将以下文本加入到该文件末尾 12PATH=$PATH:/root/Anaconda3/binexport PATH 输入以下命令激活PATH，否则是不起作用的（如果在安装cond的过程中已经选择了加入path，那么安装完之后如果不执行以下命令会发现conda依旧是not found```123```bashsource ~/.bashrc]]></content>
      <categories>
        <category>Anaconda</category>
        <category>python</category>
      </categories>
      <tags>
        <tag>Anaconda</tag>
        <tag>python</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[selenium 无头浏览器 配置]]></title>
    <url>%2F2018%2F09%2F02%2Fselenium%20%E6%97%A0%E5%A4%B4%E6%B5%8F%E8%A7%88%E5%99%A8%20%E9%85%8D%E7%BD%AE%2F</url>
    <content type="text"><![CDATA[python 中selenium设置无头浏览器配置options phantomjs 在新版本selenium中已经warning不支持了 12345from selenium import webdriver options = webdriver.FirefoxOptions()options.add_argument("--headless")webdriver.Firefox(options=options)]]></content>
      <categories>
        <category>selenum</category>
      </categories>
      <tags>
        <tag>selenium</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[pycharm 2018.02 激活码]]></title>
    <url>%2F2018%2F08%2F21%2Fpycharm-2018-02-%E6%BF%80%E6%B4%BB%E7%A0%81%2F</url>
    <content type="text"><![CDATA[pycharm 2018.02版本的激活码 修改host文件（即使不能修改，但是好像可以覆盖，因为我的机器可以修改，所以覆盖没有试验） 10.0.0.0 account.jetbrains.com 激活码 1EB101IWSWD-eyJsaWNlbnNlSWQiOiJFQjEwMUlXU1dEIiwibGljZW5zZWVOYW1lIjoibGFuIHl1IiwiYXNzaWduZWVOYW1lIjoiIiwiYXNzaWduZWVFbWFpbCI6IiIsImxpY2Vuc2VSZXN0cmljdGlvbiI6IkZvciBlZHVjYXRpb25hbCB1c2Ugb25seSIsImNoZWNrQ29uY3VycmVudFVzZSI6ZmFsc2UsInByb2R1Y3RzIjpbeyJjb2RlIjoiSUkiLCJwYWlkVXBUbyI6IjIwMTgtMTAtMTQifSx7ImNvZGUiOiJSUzAiLCJwYWlkVXBUbyI6IjIwMTgtMTAtMTQifSx7ImNvZGUiOiJXUyIsInBhaWRVcFRvIjoiMjAxOC0xMC0xNCJ9LHsiY29kZSI6IlJEIiwicGFpZFVwVG8iOiIyMDE4LTEwLTE0In0seyJjb2RlIjoiUkMiLCJwYWlkVXBUbyI6IjIwMTgtMTAtMTQifSx7ImNvZGUiOiJEQyIsInBhaWRVcFRvIjoiMjAxOC0xMC0xNCJ9LHsiY29kZSI6IkRCIiwicGFpZFVwVG8iOiIyMDE4LTEwLTE0In0seyJjb2RlIjoiUk0iLCJwYWlkVXBUbyI6IjIwMTgtMTAtMTQifSx7ImNvZGUiOiJETSIsInBhaWRVcFRvIjoiMjAxOC0xMC0xNCJ9LHsiY29kZSI6IkFDIiwicGFpZFVwVG8iOiIyMDE4LTEwLTE0In0seyJjb2RlIjoiRFBOIiwicGFpZFVwVG8iOiIyMDE4LTEwLTE0In0seyJjb2RlIjoiUFMiLCJwYWlkVXBUbyI6IjIwMTgtMTAtMTQifSx7ImNvZGUiOiJDTCIsInBhaWRVcFRvIjoiMjAxOC0xMC0xNCJ9LHsiY29kZSI6IlBDIiwicGFpZFVwVG8iOiIyMDE4LTEwLTE0In0seyJjb2RlIjoiUlNVIiwicGFpZFVwVG8iOiIyMDE4LTEwLTE0In1dLCJoYXNoIjoiNjk0NDAzMi8wIiwiZ3JhY2VQZXJpb2REYXlzIjowLCJhdXRvUHJvbG9uZ2F0ZWQiOmZhbHNlLCJpc0F1dG9Qcm9sb25nYXRlZCI6ZmFsc2V9-Gbb7jeR8JWOVxdUFaXfJzVU/O7c7xHQyaidCnhYLp7v32zdeXiHUU7vlrrm5y9ZX0lmQk3plCCsW+phrC9gGAPd6WDKhkal10qVNg0larCR2tQ3u8jfv1t2JAvWrMOJfFG9kKsJuw1P4TozZ/E7Qvj1cupf/rldhoOmaXMyABxNN1af1RV3bVhe4FFZe0p7xlIJF/ctZkFK62HYmh8V3AyhUNTzrvK2k+t/tlDJz2LnW7nYttBLHld8LabPlEEjpTHswhzlthzhVqALIgvF0uNbIJ5Uwpb7NqR4U/2ob0Z+FIcRpFUIAHEAw+RLGwkCge5DyZKfx+RoRJ/In4q/UpA==-MIIEPjCCAiagAwIBAgIBBTANBgkqhkiG9w0BAQsFADAYMRYwFAYDVQQDDA1KZXRQcm9maWxlIENBMB4XDTE1MTEwMjA4MjE0OFoXDTE4MTEwMTA4MjE0OFowETEPMA0GA1UEAwwGcHJvZDN5MIIBIjANBgkqhkiG9w0BAQEFAAOCAQ8AMIIBCgKCAQEAxcQkq+zdxlR2mmRYBPzGbUNdMN6OaXiXzxIWtMEkrJMO/5oUfQJbLLuMSMK0QHFmaI37WShyxZcfRCidwXjot4zmNBKnlyHodDij/78TmVqFl8nOeD5+07B8VEaIu7c3E1N+e1doC6wht4I4+IEmtsPAdoaj5WCQVQbrI8KeT8M9VcBIWX7fD0fhexfg3ZRt0xqwMcXGNp3DdJHiO0rCdU+Itv7EmtnSVq9jBG1usMSFvMowR25mju2JcPFp1+I4ZI+FqgR8gyG8oiNDyNEoAbsR3lOpI7grUYSvkB/xVy/VoklPCK2h0f0GJxFjnye8NT1PAywoyl7RmiAVRE/EKwIDAQABo4GZMIGWMAkGA1UdEwQCMAAwHQYDVR0OBBYEFGEpG9oZGcfLMGNBkY7SgHiMGgTcMEgGA1UdIwRBMD+AFKOetkhnQhI2Qb1t4Lm0oFKLl/GzoRykGjAYMRYwFAYDVQQDDA1KZXRQcm9maWxlIENBggkA0myxg7KDeeEwEwYDVR0lBAwwCgYIKwYBBQUHAwEwCwYDVR0PBAQDAgWgMA0GCSqGSIb3DQEBCwUAA4ICAQC9WZuYgQedSuOc5TOUSrRigMw4/+wuC5EtZBfvdl4HT/8vzMW/oUlIP4YCvA0XKyBaCJ2iX+ZCDKoPfiYXiaSiH+HxAPV6J79vvouxKrWg2XV6ShFtPLP+0gPdGq3x9R3+kJbmAm8w+FOdlWqAfJrLvpzMGNeDU14YGXiZ9bVzmIQbwrBA+c/F4tlK/DV07dsNExihqFoibnqDiVNTGombaU2dDup2gwKdL81ua8EIcGNExHe82kjF4zwfadHk3bQVvbfdAwxcDy4xBjs3L4raPLU3yenSzr/OEur1+jfOxnQSmEcMXKXgrAQ9U55gwjcOFKrgOxEdek/Sk1VfOjvS+nuM4eyEruFMfaZHzoQiuw4IqgGc45ohFH0UUyjYcuFxxDSU9lMCv8qdHKm+wnPRb0l9l5vXsCBDuhAGYD6ss+Ga+aDY6f/qXZuUCEUOH3QUNbbCUlviSz6+GiRnt1kA9N2Qachl+2yBfaqUqr8h7Z2gsx5LcIf5kYNsqJ0GavXTVyWh7PYiKX4bs354ZQLUwwa/cG++2+wNWP+HtBhVxMRNTdVhSm38AknZlD+PTAsWGu9GyLmhti2EnVwGybSD2Dxmhxk3IPCkhKAK+pl0eWYGZWG3tJ9mZ7SowcXLWDFAk0lRJnKGFMTggrWjV8GYpw5bq23VmIqqDLgkNzuoog== 原文地址: https://blog.csdn.net/qq_23077365/article/details/79391092]]></content>
      <categories>
        <category>pycharm</category>
      </categories>
      <tags>
        <tag>pycharm</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[vmware12 Pro 安装 windows系统]]></title>
    <url>%2F2018%2F08%2F01%2Fvmware12-Pro-%E5%AE%89%E8%A3%85-windows%E7%B3%BB%E7%BB%9F%2F</url>
    <content type="text"><![CDATA[使用VMware虚拟机安装操作系统的一点经历 之前使用VMware12 pro安装Windows系统毫无问题，但是昨天安装的时候却总是出现 operating system not found的情况。经过一番百度和Google，换了各种iso镜像文件，也删过网络适配器，调整过BIOS启动项，但是都以失败告终，最终在一篇博客上看到说，VMware不支持各种 ghost 镜像，只能用原生系统文件，试验成功。 原生系统：https://msdn.itellyou.cn/ 还有个小技巧： 进入VMware 的 BIOS，右击系统名称，电源，固件。这样就不用像以前那样和VMware拼速度了。 目前还没有解决的问题： VMware usb3.0 接口 暂时不知道怎么改，试了几种方法都有问题]]></content>
      <categories>
        <category>VMware</category>
      </categories>
      <tags>
        <tag>VMware</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[hexo+github_page 博客创建流程]]></title>
    <url>%2F2018%2F07%2F23%2F%E5%8D%9A%E5%AE%A2%E5%88%9B%E5%BB%BA%E6%B5%81%E7%A8%8B%2F</url>
    <content type="text"><![CDATA[前言 其实从时间上可以看出来，这些字儿是在我搭建博客有一段时间之后才写的，主要是之前对这个搭建流程不是很熟悉，现在呢整体有了一个把握，将就着写写，大家也就将就着看看（不经常写博客，语言功底比较差），不懂的地方可以comment或者自行google / baidu。 基本流程 安装nodejs，自带npmb包管理工具 安装git并设置 安装hexo并做本地配置 部署到github page 设置主题（设置到自己喜欢的主题还是很费劲的） 搭建步骤1. 创建自己的github账号以及github page注册或登录到github 登录成功后，创建专门放置博客的仓库，点击新建仓库 仓库名称必须是用户名.github.io，因为我已经有了这个仓库，所以提示The repository kimroniny.github.io already exists on this account，确定名称无误后直接create repository即可 记录下该仓库ssh链接 1. 安装nodejs下载链接 下载下来之后，直接一路到底到底安装即可，安装完成之后命令行输入以下命令检测是否安装成功，出现版本号即可 12node -vnpm -v 2. 安装git并设置安装git下载链接 同理，一路安装即可 安装完成之后，在桌面或者文件夹右击鼠标，出现如图选项可认为 或者命令行看是否可以检测到git版本 1git --version git基本设置开始菜单打开git bash，输入以下命令配置邮箱和用户名12git config --global user.name &quot;your name&quot;git config --global user.email &quot;your email&quot; Hint:当安装完 Git 应该做的第一件事就是设置你的用户名称与邮件地址。 这样做很重要，因为每一个 Git 的提交都会使用这些信息，并且它会写入到你的每一次提交中，不可更改。其实这个的用处我现在也不是很清楚，目前还没有涉及到很深入的地方 生成秘钥1ssh-keygen -t rsa -C &quot;1301862177@qq.com&quot; Hint:设置秘钥的目的是为了不用每次发布到github时都要输入一遍用户名和邮箱，功能类似于本地cookie windows用户直接打开文件夹C:\Users\Administrator.PC-201807221731\.ssh， 将id_rsa.pub文件中的内容copy到如图位置（前提得先创建自己的github账号，具体创建方法百度吧）： github ssh_key 设置界面 github ssh_key 填写界面 以上设置完成之后，打开git bash，输入以下命令检测是否操作成功 1ssh -T git@github.com 执行命令结果如下图，则成功 安装hexo使用nodejs自带的包管理工具npm进行安装1npm install -g hexo 检测hexo是否安装成功1hexo -v 在想要放置博客的文件夹下打开cmd命令行窗口 （这里的位置很重要） ，初始化hexo，时间比较久1hexo init 安装必须的组件1npm install 生成必要的文件1hexo g 开启服务器，体验hexo1hexo s 显示如图，即在本地配置成功，万里长征刚不到一半，不要着急 发布到github page在你的博客文件夹下，找到_config.yml文件，打开后做如下修改 1234567# Deployment## Docs: https://hexo.io/docs/deployment.htmldeploy: type: git # 这里是你自己的ssh地址 repository: git@github.com:kimroniny/kimroniny.github.io.git branch: master 部署之前需要先安装一个东西，如下（打开cmd窗口即可，位置无所谓）1npm install hexo-deployer-git --save 在放置博客的文件夹下打开cmd命令行窗口，输入如下命令 123hexo clean // 一般都先clean一下hexo g // 生成相关的文件，一般执行 hexo d 或者 hexo s 之前都要先 hexo g 一下hexo d // 部署到github，这句话是关键 部署成功后，浏览器地址栏输入 用户名.github.io 即可看到自己的博客 Hint:一般部署到github之后需要反应一段时间才能生效，时间不定，我使用的这段时间最多不超过五分钟，所以立马打开网址时可能不会看到效果，不要着急，稍等一会儿就可以了。 这篇文章是我在部署好并且使用了几天之后写的，之中可能会有些细节遗漏，如有疑问，欢迎评论或者将问题发送到我的邮箱1301862177@qq.com。 参考文档 廖雪峰的官方网站 - Git教程 Mac+Hexo+GitHub搭建博客教程 hexo的next主题个性化教程：打造炫酷网站 使用Hexo+Github一步步搭建属于自己的博客（基础）]]></content>
      <categories>
        <category>hexo 博客</category>
      </categories>
      <tags>
        <tag>hexo 博客</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[第一篇hexo博客]]></title>
    <url>%2F2018%2F07%2F14%2F%E7%AC%AC%E4%B8%80%E7%AF%87hexo%E5%8D%9A%E5%AE%A2%2F</url>
    <content type="text"><![CDATA[写下自己的一点想法 一点感想2018年7月14日22:42:49在这个时间我写下这点小随笔，算是记录一下忙活了一个下午的成果吧。 主要的时间花费在了博客的样式上，很多配置文件，很多配置项，让我明白了参数配置文件化的优势，之前很low，直接写死在文件里面，现在也算张了张见识。 因为第一次发布blog，自己也不知道该写些什么，做这个blog参考内容最多的文章就是这篇博客，在这里衷心的感谢这位朋友，没找到打赏的按钮，只能点个“赞”了。 其实呢，明天就要去参加某实验室的研究生夏令营了，今天胡乱写了点acm题目，当时还没有这个blog，心得就放在了fb上，也是因为这个，感觉fb很不正式，便打算配置个self-blog，折腾了半下午加一晚上吧，也算有了个基本样子。 因为刚刚有了另一个实验室的offer，所以对接下来的这个lab也不care了，再加上前两天刚被这个实验室的导师diss一番，有了很不好的印象，所以——呵呵，随缘咯。 对接下来的这个实验室抱着佛系心态，并不代表我要放弃其他的，比如清华深圳在九推的时候还是打算冲一波的。只是不知道我之前联系的老师还记不记得我（毕竟好久不搭理我了，惨兮兮）。 明天一早就要出发了，现在【2018年7月14日22:52:35】这个点，也该安心睡觉了，毕竟已经弄完了自己好久就想搞的一个小job，有了自己的博客，仿佛有了归宿…… 最后，welcome to my Home!!!]]></content>
      <categories>
        <category>hexo介绍</category>
      </categories>
      <tags>
        <tag>hexo介绍</tag>
      </tags>
  </entry>
</search>
