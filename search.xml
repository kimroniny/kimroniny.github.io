<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>wsl-代理问题</title>
      <link href="/2023/07/28/wsl-%E4%BB%A3%E7%90%86%E9%97%AE%E9%A2%98/"/>
      <url>/2023/07/28/wsl-%E4%BB%A3%E7%90%86%E9%97%AE%E9%A2%98/</url>
      
        <content type="html"><![CDATA[<p>wsl 设置代理时遇到的问题</p><span id="more"></span><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">export</span> HTTP_PROXY=http://<span class="variable">$&#123;cat /etc/resolv.conf | grep nameserver | awk &#x27;&#123; print $2 &#125;</span><span class="string">&#x27;&#125;:7890</span></span><br><span class="line"><span class="string">export HTTPS_PROXY=http://$&#123;cat /etc/resolv.conf | grep nameserver | awk &#x27;</span>&#123; <span class="built_in">print</span> <span class="variable">$2</span> &#125;<span class="string">&#x27;&#125;:7890</span></span><br></pre></td></tr></table></figure><p>如果无法访问宿主机ip, 可能是因为宿主机的防火墙没有打开</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">New-NetFirewallRule -DisplayName <span class="string">&quot;WSL&quot;</span> -Direction Inbound  -InterfaceAlias <span class="string">&quot;vEthernet (WSL)&quot;</span>  -Action Allow</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> wsl </category>
          
      </categories>
      
      
        <tags>
            
            <tag> wsl </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>rust教程-08</title>
      <link href="/2022/11/13/rust%E6%95%99%E7%A8%8B-08/"/>
      <url>/2022/11/13/rust%E6%95%99%E7%A8%8B-08/</url>
      
        <content type="html"><![CDATA[<p>rust 教程 07: vector, string, hashmap</p><span id="more"></span><h2 id="vector"><a class="markdownIt-Anchor" href="#vector"></a> Vector</h2><h3 id="vector-的基本使用"><a class="markdownIt-Anchor" href="#vector-的基本使用"></a> vector 的基本使用</h3><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">fn</span> <span class="title function_">main</span>() &#123;</span><br><span class="line">    <span class="comment">// 必须要指明类型，或者通过 push，能够让编译器知道 v 的类型</span></span><br><span class="line">    <span class="comment">// 离开作用域的时候，v 就被删除了</span></span><br><span class="line">    <span class="keyword">let</span> <span class="variable">v</span>: <span class="type">Vec</span>&lt;<span class="type">i32</span>&gt; = <span class="type">Vec</span>::<span class="title function_ invoke__">new</span>();</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 不用显示指明类型</span></span><br><span class="line">    <span class="keyword">let</span> <span class="variable">v2</span> = <span class="built_in">vec!</span>[<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>];</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 因为 push 了一个 i32 类型的数据，所以不需要显示地指明类型</span></span><br><span class="line">    <span class="keyword">let</span> <span class="keyword">mut </span><span class="variable">v3</span> = <span class="type">Vec</span>::<span class="title function_ invoke__">new</span>();</span><br><span class="line">    v3.<span class="title function_ invoke__">push</span>(<span class="number">1</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// -------</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// 两种读取 vector 元素的方法</span></span><br><span class="line">    <span class="comment">// 1. 通过索引</span></span><br><span class="line">    <span class="keyword">let</span> <span class="variable">x</span> = &amp;v2[<span class="number">1</span>];</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 2. 通过 get 方法</span></span><br><span class="line">    <span class="keyword">match</span> v2.<span class="title function_ invoke__">get</span>(<span class="number">1</span>) &#123;</span><br><span class="line">        <span class="title function_ invoke__">Some</span>(x) =&gt; &#123;</span><br><span class="line">            <span class="built_in">println!</span>(<span class="string">&quot;x is: &#123;&#125;&quot;</span>, x);</span><br><span class="line">        &#125;,</span><br><span class="line">        <span class="literal">None</span> =&gt; &#123;</span><br><span class="line">            <span class="built_in">println!</span>(<span class="string">&quot;x is None&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// -------</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// 不能在同一作用域内同时拥有可变和不可变引用</span></span><br><span class="line">    <span class="keyword">let</span> <span class="keyword">mut </span><span class="variable">v4</span> = <span class="type">Vec</span>::<span class="title function_ invoke__">new</span>();</span><br><span class="line">    <span class="keyword">let</span> <span class="variable">first</span> = &amp;v4[<span class="number">1</span>]; <span class="comment">// 不可变借用</span></span><br><span class="line">    v4.<span class="title function_ invoke__">push</span>(<span class="number">10</span>); <span class="comment">// 可变借用，和上面的不可变借用发生冲突，</span></span><br><span class="line">    <span class="built_in">println!</span>(<span class="string">&quot;first is &#123;&#125;&quot;</span>, first);</span><br><span class="line">    <span class="comment">// 因为 push 的过程如果 vector 内存不够，则导致 vector 重新分配内润地址，所以此时不可变借用就失效了，因此编译器不允许这种情况出现</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// -------</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// for 循环</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">let</span> <span class="keyword">mut </span><span class="variable">v5</span> = <span class="built_in">vec!</span>[<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>];</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> <span class="variable">i</span> <span class="keyword">in</span> &amp;<span class="keyword">mut</span> v5 &#123;</span><br><span class="line">        *i += <span class="number">10</span>; <span class="comment">// 修改 v5 的值</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> <span class="variable">i</span> <span class="keyword">in</span> &amp;v5 &#123; <span class="comment">// 循环打印</span></span><br><span class="line">        <span class="built_in">println!</span>(<span class="string">&quot;i is &#123;&#125;&quot;</span>, i);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">println!</span>(<span class="string">&quot;Hello, world!&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="vector-的例子"><a class="markdownIt-Anchor" href="#vector-的例子"></a> vector 的例子</h3><p>使用 enum 改变 vector 元素的类型</p><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">enum</span> <span class="title class_">SheetCell</span> &#123;</span><br><span class="line">    <span class="title function_ invoke__">Int</span>(<span class="type">i32</span>),</span><br><span class="line">    <span class="title function_ invoke__">Float</span>(<span class="type">f64</span>),</span><br><span class="line">    <span class="title function_ invoke__">Text</span>(<span class="type">String</span>),</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">fn</span> <span class="title function_">main</span>() &#123;</span><br><span class="line">    <span class="keyword">let</span> <span class="variable">row</span> = <span class="built_in">vec!</span>[</span><br><span class="line">        SheetCell::<span class="title function_ invoke__">Int</span>(<span class="number">1</span>),</span><br><span class="line">        SheetCell::<span class="title function_ invoke__">Float</span>(<span class="number">10.0</span>),</span><br><span class="line">        SheetCell::<span class="title function_ invoke__">Text</span>(<span class="type">String</span>::<span class="title function_ invoke__">from</span>(<span class="string">&quot;asdasd&quot;</span>)),</span><br><span class="line">    ];</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="string"><a class="markdownIt-Anchor" href="#string"></a> String</h2><p>rust 的核心语言层面，只有一个字符串类型，即字符串切片 str 或者 &amp;str，对存储在其他地方、UTF-8编码的字符串的引用</p><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">fn</span> <span class="title function_">main</span>() &#123;</span><br><span class="line">    <span class="comment">// -------</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// 创建字符串类型的几种方法</span></span><br><span class="line">    <span class="keyword">let</span> <span class="variable">s</span> = <span class="type">String</span>::<span class="title function_ invoke__">from</span>(<span class="string">&quot;asdasd&quot;</span>);</span><br><span class="line">    <span class="keyword">let</span> <span class="variable">s1</span> = <span class="string">&quot;adadad&quot;</span>.<span class="title function_ invoke__">to_string</span>();</span><br><span class="line">    <span class="keyword">let</span> <span class="variable">data</span> = <span class="string">&quot;dasdad&quot;</span>;</span><br><span class="line">    <span class="keyword">let</span> <span class="variable">s2</span> = data.<span class="title function_ invoke__">to_string</span>();</span><br><span class="line"></span><br><span class="line">    <span class="comment">// -------</span></span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 更新 string</span></span><br><span class="line">    <span class="keyword">let</span> <span class="keyword">mut </span><span class="variable">s3</span> = <span class="type">String</span>::<span class="title function_ invoke__">from</span>(<span class="string">&quot;asdada&quot;</span>);</span><br><span class="line">    s3.<span class="title function_ invoke__">push_str</span>(<span class="string">&quot;asdadasd&quot;</span>);</span><br><span class="line">    <span class="keyword">let</span> <span class="variable">s4</span> = <span class="type">String</span>::<span class="title function_ invoke__">from</span>(<span class="string">&quot;sdasd&quot;</span>);</span><br><span class="line">    s3.<span class="title function_ invoke__">push_str</span>(&amp;s4); <span class="comment">// 不会改变 s4 的所有权</span></span><br><span class="line">    s3.<span class="title function_ invoke__">push</span>(<span class="string">&#x27;1&#x27;</span>); <span class="comment">// 附加一个字符</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// 取得了 s3 的所有权，s3会失效</span></span><br><span class="line">    <span class="comment">// &amp;s4 被强制转换为字符串切片 &amp;str，解引用强制类型转换</span></span><br><span class="line">    <span class="keyword">let</span> <span class="variable">s5</span> = s3+&amp;s4; </span><br><span class="line"></span><br><span class="line">    <span class="comment">// 可以直接用 format 来构建新字符串，这样不会改变所有权</span></span><br><span class="line">    <span class="keyword">let</span> <span class="variable">s5</span> = <span class="built_in">format!</span>(<span class="string">&quot;&#123;&#125;-&#123;&#125;-&#123;&#125;&quot;</span>, s1, s2, s5);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// -------</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// 访问字符串元素</span></span><br><span class="line">    <span class="comment">// String 不支持索引形式访问元素</span></span><br><span class="line">    <span class="comment">// String 是对 vec&lt;u8&gt; 的包装</span></span><br><span class="line">    <span class="comment">// 由于 String 是一种 utF-8 编码，所以索引的位置指代的不一定就是字符的位置，有可能是某个字节</span></span><br><span class="line">    <span class="keyword">for</span> <span class="variable">w</span> <span class="keyword">in</span> s5.<span class="title function_ invoke__">chars</span>() &#123; <span class="comment">// 获得标量值</span></span><br><span class="line">        <span class="built_in">println!</span>(<span class="string">&quot;&#123;&#125;&quot;</span>, w);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span> <span class="variable">w</span> <span class="keyword">in</span> s5.<span class="title function_ invoke__">bytes</span>() &#123; <span class="comment">// 获得字节</span></span><br><span class="line">        <span class="built_in">println!</span>(<span class="string">&quot;&#123;&#125;&quot;</span>, w);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 字符串切片</span></span><br><span class="line">    <span class="keyword">let</span> <span class="variable">s6</span> = &amp;s5[<span class="number">0</span>..<span class="number">4</span>]; <span class="comment">// 必须沿着字符的边界进行切割（比如一个字符占两个字节)，否则就会 panic</span></span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="hashmapk-v"><a class="markdownIt-Anchor" href="#hashmapk-v"></a> HashMap&lt;K, V&gt;</h2><p>以键值对的形式存储数据，一个键对应一个值</p><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">use</span> std::collections::HashMap;</span><br><span class="line"></span><br><span class="line"><span class="keyword">fn</span> <span class="title function_">main</span>() &#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// -----------</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// hashmap 是同构的，即 k 必须是同一类型，v 必须是同一类型</span></span><br><span class="line">    <span class="keyword">let</span> <span class="keyword">mut </span><span class="variable">scores</span> = HashMap::<span class="title function_ invoke__">new</span>();</span><br><span class="line">    scores.<span class="title function_ invoke__">insert</span>(<span class="type">String</span>::<span class="title function_ invoke__">from</span>(<span class="string">&quot;asdads&quot;</span>), <span class="number">10</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 通过 collect 来创建 hashmap</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">let</span> <span class="variable">teams</span> = <span class="built_in">vec!</span>[</span><br><span class="line">        <span class="type">String</span>::<span class="title function_ invoke__">from</span>(<span class="string">&quot;asdad&quot;</span>),</span><br><span class="line">        <span class="type">String</span>::<span class="title function_ invoke__">from</span>(<span class="string">&quot;agdfgd&quot;</span>),</span><br><span class="line">    ];</span><br><span class="line">    <span class="keyword">let</span> <span class="variable">initial_scores</span> = <span class="built_in">vec!</span>[<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>];</span><br><span class="line">    <span class="keyword">let</span> <span class="variable">scores</span>: HashMap&lt;_,_&gt; = <span class="comment">// 用下划线是因为编译器可以根据 vector 中的元素推导出 k v 的类型</span></span><br><span class="line">        teams.<span class="title function_ invoke__">iter</span>().<span class="title function_ invoke__">zip</span>(initial_scores.<span class="title function_ invoke__">iter</span>()).<span class="title function_ invoke__">collect</span>();</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 所有权问题</span></span><br><span class="line">    <span class="keyword">let</span> <span class="variable">s1</span> = <span class="type">String</span>::<span class="title function_ invoke__">from</span>(<span class="string">&quot;asdasd&quot;</span>);</span><br><span class="line">    <span class="keyword">let</span> <span class="variable">s2</span> = <span class="type">String</span>::<span class="title function_ invoke__">from</span>(<span class="string">&quot;asdasd&quot;</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">let</span> <span class="keyword">mut </span><span class="variable">map</span> = HashMap::<span class="title function_ invoke__">new</span>();</span><br><span class="line">    map.<span class="title function_ invoke__">insert</span>(&amp;s1, &amp;s2); <span class="comment">// 传递引用不会改变所有权</span></span><br><span class="line">    <span class="comment">// map.insert(s1, s2); // 会改变 s1 和 s2 的所有权</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// 通过 get 取得 hashmap 的值</span></span><br><span class="line">    <span class="keyword">match</span> map.<span class="title function_ invoke__">get</span>(&amp;<span class="type">String</span>::<span class="title function_ invoke__">from</span>(<span class="string">&quot;asdas&quot;</span>)) &#123;</span><br><span class="line">        <span class="title function_ invoke__">Some</span>(x) =&gt; &#123;</span><br><span class="line">            <span class="built_in">println!</span>(<span class="string">&quot;&#123;&#125;&quot;</span>, x);</span><br><span class="line">        &#125;,</span><br><span class="line">        <span class="literal">None</span> =&gt; &#123;</span><br><span class="line">            <span class="built_in">println!</span>(<span class="string">&quot;None&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 通过 for 循环遍历 hashmap 的值</span></span><br><span class="line">    <span class="title function_ invoke__">for</span> (k,v) <span class="keyword">in</span> &amp;map &#123;</span><br><span class="line">        <span class="built_in">println!</span>(<span class="string">&quot;&#123;&#125;, &#123;&#125;&quot;</span>, k, v);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 更新 hashmap</span></span><br><span class="line">    <span class="comment">// 每个 k 同时只能对应一个 v</span></span><br><span class="line">    <span class="comment">// 更新 hashmap 中的数据</span></span><br><span class="line">    <span class="comment">// 1. k 已经存在，对应一个 v</span></span><br><span class="line">    <span class="comment">// - 替换现有的 v</span></span><br><span class="line">    <span class="comment">// - 保留现有的 v，忽略新的 v</span></span><br><span class="line">    <span class="comment">// - 合并现有的 v 和新的 v</span></span><br><span class="line">    <span class="comment">// 2. k 不存在</span></span><br><span class="line">    <span class="comment">// - 添加一对 (k, v)</span></span><br><span class="line">    <span class="keyword">let</span> <span class="keyword">mut </span><span class="variable">scores</span> = HashMap::<span class="title function_ invoke__">new</span>();</span><br><span class="line">    scores.<span class="title function_ invoke__">insert</span>(<span class="type">String</span>::<span class="title function_ invoke__">from</span>(<span class="string">&quot;asdsd&quot;</span>), <span class="number">10</span>);</span><br><span class="line">    scores.<span class="title function_ invoke__">insert</span>(<span class="type">String</span>::<span class="title function_ invoke__">from</span>(<span class="string">&quot;asdsd&quot;</span>), <span class="number">12</span>); <span class="comment">// asdsd 的值已经改为 12，无论值是否存在，都在被设置为 12 </span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// 对于 entry 而言</span></span><br><span class="line">    <span class="comment">// 如果 k 存在，则返回对应的 v 的一个可变引用</span></span><br><span class="line">    <span class="comment">// 如果 k 不存在，则将新的值插入进去，然后返回该值的可变引用</span></span><br><span class="line">    scores.<span class="title function_ invoke__">entry</span>(<span class="type">String</span>::<span class="title function_ invoke__">from</span>(<span class="string">&quot;asdsd&quot;</span>)).<span class="title function_ invoke__">or_insert</span>(<span class="number">49</span>); <span class="comment">// 如果不存在则插入并返回新值的引用，如果存在则返回已有的值的引用</span></span><br><span class="line">    <span class="keyword">let</span> <span class="variable">e</span> = scores.<span class="title function_ invoke__">entry</span>(<span class="type">String</span>::<span class="title function_ invoke__">from</span>(<span class="string">&quot;asdsd&quot;</span>));</span><br><span class="line">    e.<span class="title function_ invoke__">or_insert</span>(<span class="number">666</span>);</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 基于现有的值 v 来更新</span></span><br><span class="line">    <span class="keyword">let</span> <span class="variable">text</span> = <span class="string">&quot;asdasd adfs asdsd asda&quot;</span>;</span><br><span class="line">    <span class="keyword">let</span> <span class="keyword">mut </span><span class="variable">map</span> = HashMap::<span class="title function_ invoke__">new</span>();</span><br><span class="line">    <span class="keyword">for</span> <span class="variable">word</span> <span class="keyword">in</span> text.<span class="title function_ invoke__">split_whitespace</span>() &#123;</span><br><span class="line">        <span class="keyword">let</span> <span class="variable">count</span>: &amp;<span class="keyword">mut</span> <span class="type">i32</span> = map.<span class="title function_ invoke__">entry</span>(word).<span class="title function_ invoke__">or_insert</span>(<span class="number">0</span>);</span><br><span class="line">        *count += <span class="number">1</span>; <span class="comment">// 注意 count 是一个可变引用</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> rust </category>
          
      </categories>
      
      
        <tags>
            
            <tag> rust </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>rust教程-07</title>
      <link href="/2022/11/13/rust%E6%95%99%E7%A8%8B-07/"/>
      <url>/2022/11/13/rust%E6%95%99%E7%A8%8B-07/</url>
      
        <content type="html"><![CDATA[<p>rust 教程 07: 包</p><span id="more"></span><h2 id="package-和-crate"><a class="markdownIt-Anchor" href="#package-和-crate"></a> package 和 crate</h2><p>crate 的类型：</p><ul><li>binary</li><li>library</li></ul><p>crate root：</p><ul><li>源代码文件</li><li>rust 编译器从这里开始，组成 crate 的根 module</li></ul><p>package：</p><ul><li>包含 1 个 crate.toxl，他描述了如何构建这些 crates</li><li>只能包含 0-1 个 library crate</li><li>可以包含任意数量的 binary crate</li><li>但必须至少包含一个 crate（library 或者 binary）</li></ul><p>cargo 的惯例：</p><ul><li>src/main.rs：binary crate<ul><li>bianry crate 的 crate root</li><li>crate 名与 package 名相同</li></ul></li><li>src/lib.rs：library crate<ul><li>package 包含一个 library code</li><li>library crate 的 crate root</li><li>crate 名与 package 名相同</li></ul></li><li>crago 把 crate root 文件交给 rustc 来构建 library 或者 binary</li><li>一个 package 可以同时包含 src/main.rs 和 src/lib.rs</li><li>一个 package 可以有多个 binary crate</li></ul><h2 id="module"><a class="markdownIt-Anchor" href="#module"></a> Module</h2><p>Module：</p><ul><li>在一个 crate 内，将代码进行分组</li><li>增加可读性</li><li>控制项目的私有性：public、private</li></ul><p>建立 module：</p><ul><li>mod 关键字</li><li>可嵌套</li><li>可以包含其他项的定义</li></ul><h2 id="path-路径"><a class="markdownIt-Anchor" href="#path-路径"></a> path 路径</h2><p>为了在 rust 的模块中找到某个条目，需要使用路径，两种形式：</p><ul><li>绝对路径：从 crate root 开始，使用 crate 名或者字面值 crate</li><li>相对路径：从当前模块开始，使用 self、super 或者当前模块的标识符</li><li>路径至少由一个标识符组成，标识符之间使用 ::</li></ul><h2 id="私有性"><a class="markdownIt-Anchor" href="#私有性"></a> 私有性</h2><ul><li>模块不仅可以组织代码，还可以定义私有边界</li><li>如果想把函数或者 struct 等设为私有，可以将其放到某个模块中</li><li>rust 中所有的条目（函数、方法、struct、enum、模块、常量）等默认都是私有的</li><li>父级模块无法访问子模块中的私有条目</li><li>子模块可以使用所有祖先模块中的条目</li></ul><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">mod</span> front_of_house &#123;</span><br><span class="line">    <span class="comment">// 声明为公共的</span></span><br><span class="line">    <span class="keyword">pub</span> <span class="keyword">mod</span> hosting &#123;</span><br><span class="line">        <span class="keyword">fn</span> <span class="title function_">add_to_waitlist</span>() &#123;&#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">pub</span> <span class="keyword">fn</span> <span class="title function_">eat_at_restaurant</span>() &#123;</span><br><span class="line">    <span class="comment">// 绝对路径</span></span><br><span class="line">    crate::front_of_house::hosting::<span class="title function_ invoke__">add_to_waitlist</span>();</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 相对路径</span></span><br><span class="line">    front_of_house::hosting::<span class="title function_ invoke__">add_to_waitlist</span>();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="super-关键字"><a class="markdownIt-Anchor" href="#super-关键字"></a> super 关键字</h2><p>访问父级模块或者方法</p><h2 id="pub-struct"><a class="markdownIt-Anchor" href="#pub-struct"></a> pub struct</h2><ul><li>struct 是公共的</li><li>struct 的字段默认是私有的</li><li>想把哪个字段设置为公有的，就在其前面设置为 pub</li></ul><h2 id="pub-enum"><a class="markdownIt-Anchor" href="#pub-enum"></a> pub enum：</h2><ul><li>enum 是公共的</li><li>所有元素也是公共的，不需要单独设置为 pub</li></ul><h2 id="use-关键字"><a class="markdownIt-Anchor" href="#use-关键字"></a> use 关键字</h2><ul><li>对于函数，引入到父级，即上一级即可；</li><li>对于 struct、enum，引入到同一级；</li><li>也就是对于同名条目，引入到父级即可</li><li>使用 use 导入到作用域内后，该名称在该作用域内是私有的<ul><li>使用 pub use 重导出，外部代码就可以引入到他们的作用域</li></ul></li></ul><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">mod</span> front_of_house &#123;</span><br><span class="line">    <span class="keyword">pub</span> <span class="keyword">mod</span> hosting &#123;</span><br><span class="line">        <span class="keyword">pub</span> <span class="keyword">fn</span> <span class="title function_">add_to_waitlist</span>() &#123;&#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 使用绝对路径引入 hosting</span></span><br><span class="line"><span class="comment">// 使用 as 搞个别名</span></span><br><span class="line"><span class="keyword">use</span> crate::front_of_house::hosting <span class="keyword">as</span> hosting1;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 使用相对路径引入 hosting</span></span><br><span class="line"><span class="comment">// 针对函数，一般是引入到上一级，避免引入多个相同名字的函数</span></span><br><span class="line"><span class="keyword">use</span> front_of_house::hosting <span class="keyword">as</span> hosting2;</span><br><span class="line"></span><br><span class="line"><span class="keyword">pub</span> <span class="keyword">fn</span> <span class="title function_">eat_at_restaurant</span>() &#123;</span><br><span class="line">    <span class="comment">// 绝对路径</span></span><br><span class="line">    crate::front_of_house::hosting::<span class="title function_ invoke__">add_to_waitlist</span>();</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 相对路径</span></span><br><span class="line">    front_of_house::hosting::<span class="title function_ invoke__">add_to_waitlist</span>();</span><br><span class="line"></span><br><span class="line">    hosting::<span class="title function_ invoke__">add_to_waitlist</span>();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="使用外部包-package"><a class="markdownIt-Anchor" href="#使用外部包-package"></a> 使用外部包 package</h2><ul><li>cargo.toml 添加依赖的包 package</li><li>use 将特定条目引入到作用域</li><li>std 包不需要放入到 c</li></ul><p>cargo.toml 中</p><p>使用嵌套路径来引入相同 package 下的多个条目</p><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">use</span> std:: &#123;</span><br><span class="line">    cmd::Ordering,</span><br><span class="line">    io</span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">use</span> std::io&#123;</span><br><span class="line">    <span class="keyword">self</span>, <span class="comment">// 引入自己</span></span><br><span class="line">    write</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h2 id="将模块内容移动到其他文件"><a class="markdownIt-Anchor" href="#将模块内容移动到其他文件"></a> 将模块内容移动到其他文件</h2><p>模块定义时，如果模块后边是 “;”，而不是代码块：</p><ul><li>rust 会从与模块同名的文件中加载内容</li><li>模块树的结构不会变化</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">src/</span><br><span class="line">├── front_of_house</span><br><span class="line">│   └── hosting.rs</span><br><span class="line">├── front_of_house.rs</span><br><span class="line">├── lib.rs</span><br><span class="line">└── main.rs</span><br></pre></td></tr></table></figure><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// src/front_of_house.rs</span></span><br><span class="line"><span class="keyword">pub</span> <span class="keyword">mod</span> hosting; <span class="comment">// 依旧要声明为 pub，公有类型</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// src/front_of_house/hosting.rs</span></span><br><span class="line"><span class="keyword">pub</span> <span class="keyword">fn</span> <span class="title function_">add_to_waitlist</span>() &#123;&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> rust </category>
          
      </categories>
      
      
        <tags>
            
            <tag> rust </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>rust教程-06</title>
      <link href="/2022/11/01/rust%E6%95%99%E7%A8%8B-06/"/>
      <url>/2022/11/01/rust%E6%95%99%E7%A8%8B-06/</url>
      
        <content type="html"><![CDATA[<p>rust 教程 06: 枚举</p><span id="more"></span><h2 id="枚举"><a class="markdownIt-Anchor" href="#枚举"></a> 枚举</h2><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#[derive(Debug)]</span></span><br><span class="line"><span class="keyword">enum</span> <span class="title class_">Message</span> &#123;</span><br><span class="line">    Quit, <span class="comment">// 可以不指定类型</span></span><br><span class="line">    Move &#123; x: <span class="type">i32</span>, y: <span class="type">i32</span>&#125;, <span class="comment">// 可以是一个结构体</span></span><br><span class="line">    <span class="title function_ invoke__">Write</span> (<span class="type">String</span>), <span class="comment">// 可以是一个 String</span></span><br><span class="line">    <span class="title function_ invoke__">ChangeColor</span> (<span class="type">i32</span>, <span class="type">i32</span>, <span class="type">i32</span>), <span class="comment">// 可以是一个 tuple</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">impl</span> <span class="title class_">Message</span> &#123; <span class="comment">// 为枚举类型添加方法</span></span><br><span class="line">    <span class="keyword">fn</span> <span class="title function_">call</span>(&amp;<span class="keyword">self</span>) &#123;</span><br><span class="line">        <span class="built_in">println!</span>(<span class="string">&quot;&#123;:#?&#125;&quot;</span>, <span class="keyword">self</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">fn</span> <span class="title function_">main</span>() &#123;</span><br><span class="line">    <span class="keyword">let</span> <span class="variable">q</span> = Message::Quit;</span><br><span class="line">    <span class="keyword">let</span> <span class="variable">m</span> = Message::Move &#123; x: <span class="number">19</span>, y: <span class="number">29</span> &#125;;</span><br><span class="line">    <span class="keyword">let</span> <span class="variable">w</span> = Message::<span class="title function_ invoke__">Write</span>(<span class="type">String</span>::<span class="title function_ invoke__">from</span>(<span class="string">&quot;asdasd&quot;</span>));</span><br><span class="line">    <span class="keyword">let</span> <span class="variable">c</span> = Message::<span class="title function_ invoke__">ChangeColor</span>(<span class="number">12</span>, <span class="number">12</span>, <span class="number">12</span>);</span><br><span class="line">    q.<span class="title function_ invoke__">call</span>();</span><br><span class="line">    m.<span class="title function_ invoke__">call</span>();</span><br><span class="line">    w.<span class="title function_ invoke__">call</span>();</span><br><span class="line">    c.<span class="title function_ invoke__">call</span>();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="option-类型"><a class="markdownIt-Anchor" href="#option-类型"></a> Option 类型</h2><p>rust 中没有 null</p><p>在其他语言中，一个变量可以处于两种状态：空值（null）、非空</p><p>但是当你尝试使用非 null 值那样使用 null 值的时候，就会引起某种错误</p><p>rust 中类似 null 的枚举：Option<T>，定义为:</p><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">enum</span> <span class="title class_">Option</span>&lt;T&gt; &#123;</span><br><span class="line">    <span class="title function_ invoke__">Some</span>(T),</span><br><span class="line">    <span class="literal">None</span>,</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>基本的使用方法：</p><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">fn</span> <span class="title function_">main</span>() &#123;</span><br><span class="line">    <span class="keyword">let</span> <span class="variable">some_num</span> = <span class="title function_ invoke__">Some</span>(<span class="number">5</span>);</span><br><span class="line">    <span class="keyword">let</span> <span class="variable">some_str</span> = <span class="title function_ invoke__">Some</span>(<span class="string">&quot;asdasd&quot;</span>);</span><br><span class="line">    <span class="keyword">let</span> <span class="variable">some_none</span>:<span class="type">Option</span>&lt;<span class="type">i32</span>&gt; = <span class="literal">None</span>; <span class="comment">// 必须显示的指定类型</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在 rust 中，Option<T> 和 T 是不同的类型，不可以直接相操作</p><h2 id="match"><a class="markdownIt-Anchor" href="#match"></a> match</h2><p>模式匹配，类似于 switch</p><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#[derive(Debug)]</span></span><br><span class="line"><span class="keyword">enum</span> <span class="title class_">UsState</span> &#123;</span><br><span class="line">    Washington,</span><br><span class="line">    NewYork,</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">enum</span> <span class="title class_">Coin</span> &#123;</span><br><span class="line">    Penny,</span><br><span class="line">    Nickel,</span><br><span class="line">    Dime,</span><br><span class="line">    <span class="title function_ invoke__">Quarter</span>(UsState),</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">fn</span> <span class="title function_">match_coin</span>(coin: &amp;Coin) <span class="punctuation">-&gt;</span> <span class="type">i8</span>&#123;</span><br><span class="line">    <span class="keyword">match</span> coin &#123; <span class="comment">// 必须列出所有可能的值，如果不想列出，必须用 _ 代替</span></span><br><span class="line">        Coin::Penny =&gt; &#123; <span class="comment">// 使用 =&gt; </span></span><br><span class="line">            <span class="number">10</span></span><br><span class="line">        &#125;,</span><br><span class="line">        Coin::Nickel =&gt; &#123;</span><br><span class="line">            <span class="number">20</span></span><br><span class="line">        &#125;,</span><br><span class="line">        Coin::Dime =&gt; <span class="number">5</span>, <span class="comment">// 也可以不跟 &#123;&#125;</span></span><br><span class="line">        Coin::<span class="title function_ invoke__">Quarter</span>(state) =&gt; &#123; <span class="comment">// 匹配某种类型的枚举值</span></span><br><span class="line">            <span class="built_in">println!</span>(<span class="string">&quot;&#123;:#?&#125;&quot;</span>, state);</span><br><span class="line">            <span class="number">100</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">fn</span> <span class="title function_">main</span>() &#123;</span><br><span class="line">    <span class="keyword">let</span> <span class="variable">coin</span> = Coin::Penny;</span><br><span class="line">    <span class="keyword">let</span> <span class="variable">coin2</span> = Coin::<span class="title function_ invoke__">Quarter</span>(UsState::NewYork);</span><br><span class="line">    <span class="title function_ invoke__">match_coin</span>(&amp;coin);</span><br><span class="line">    <span class="title function_ invoke__">match_coin</span>(&amp;coin2);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>用于 Option<T> 的匹配时</p><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">fn</span> <span class="title function_">main</span>() &#123;</span><br><span class="line">    <span class="keyword">let</span> <span class="variable">five</span> = <span class="title function_ invoke__">Some</span>(<span class="number">5</span>);</span><br><span class="line">    <span class="keyword">let</span> <span class="variable">six</span> = <span class="literal">None</span>;</span><br><span class="line">    <span class="built_in">println!</span>(<span class="string">&quot;&#123;:#?&#125;&quot;</span>, <span class="title function_ invoke__">inc</span>(five));</span><br><span class="line">    <span class="built_in">println!</span>(<span class="string">&quot;&#123;:#?&#125;&quot;</span>, <span class="title function_ invoke__">inc</span>(six));</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">fn</span> <span class="title function_">inc</span>(value: <span class="type">Option</span>&lt;<span class="type">i32</span>&gt;) <span class="punctuation">-&gt;</span> <span class="type">Option</span>&lt;<span class="type">i32</span>&gt; &#123;</span><br><span class="line">    <span class="keyword">match</span> value &#123;</span><br><span class="line">        <span class="title function_ invoke__">Some</span>(i)=&gt; &#123;</span><br><span class="line">            <span class="title function_ invoke__">Some</span>(i+<span class="number">1</span>)</span><br><span class="line">        &#125;,</span><br><span class="line">        <span class="literal">None</span> =&gt; &#123; <span class="comment">// 必须要穷举所有的可能性</span></span><br><span class="line">            <span class="literal">None</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="if-let"><a class="markdownIt-Anchor" href="#if-let"></a> if let</h2><p><code>if let</code> 用于匹配一种情况</p><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">fn</span> <span class="title function_">main</span>() &#123;</span><br><span class="line">    <span class="keyword">let</span> <span class="variable">three</span> = <span class="title function_ invoke__">Some</span>(<span class="number">3</span>);</span><br><span class="line">    <span class="keyword">if</span> <span class="keyword">let</span> <span class="variable">Some</span>(<span class="number">3</span>) = three &#123; <span class="comment">// 注意这里用的是一个等号</span></span><br><span class="line">        <span class="built_in">println!</span>(<span class="string">&quot;&#123;&#125;&quot;</span>, <span class="number">3</span>);</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123; <span class="comment">// 也可以使用 else 来指定其他情况的处理逻辑</span></span><br><span class="line">        <span class="built_in">println!</span>(<span class="string">&quot;others&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> rust </category>
          
      </categories>
      
      
        <tags>
            
            <tag> rust </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>screen 基本用法</title>
      <link href="/2022/10/30/screen-%E5%9F%BA%E6%9C%AC%E7%94%A8%E6%B3%95/"/>
      <url>/2022/10/30/screen-%E5%9F%BA%E6%9C%AC%E7%94%A8%E6%B3%95/</url>
      
        <content type="html"><![CDATA[<p>screen 的基本用法</p><span id="more"></span><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">yum install screen</span><br><span class="line"></span><br><span class="line">screen -S name python test.py <span class="comment"># screen -S &lt;name&gt; &lt;cmd&gt;</span></span><br><span class="line"></span><br><span class="line">Ctrl a+d <span class="comment"># 从 screen 中退出，但是不中断 screen</span></span><br><span class="line"></span><br><span class="line">screen -r name <span class="comment"># 回到名称为 name 的 screen</span></span><br><span class="line"></span><br><span class="line">screen -d name <span class="comment"># 将名称为 name 的 screen 离线</span></span><br><span class="line"></span><br><span class="line">screen -<span class="built_in">ls</span> <span class="comment"># 查看所有的 screen </span></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> linux </category>
          
      </categories>
      
      
        <tags>
            
            <tag> linux </tag>
            
            <tag> screen </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>rust教程-05</title>
      <link href="/2022/10/25/rust%E6%95%99%E7%A8%8B-05/"/>
      <url>/2022/10/25/rust%E6%95%99%E7%A8%8B-05/</url>
      
        <content type="html"><![CDATA[<p>rust 教程 05: struct</p><span id="more"></span><h2 id="struct-基础内容"><a class="markdownIt-Anchor" href="#struct-基础内容"></a> struct 基础内容</h2><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">User</span> &#123;</span><br><span class="line">    username: <span class="type">String</span>,</span><br><span class="line">    email: <span class="type">String</span>,</span><br><span class="line">    active: <span class="type">bool</span>, <span class="comment">// 最后一个字段也要有逗号</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">fn</span> <span class="title function_">build_user</span>(username: <span class="type">String</span>, email: <span class="type">String</span>, active: <span class="type">bool</span>) <span class="punctuation">-&gt;</span> User &#123; <span class="comment">// 函数返回结构体</span></span><br><span class="line">    User &#123;</span><br><span class="line">        username, <span class="comment">// 可以使用简写的方式初始化，只要变量名和字段名相同即可</span></span><br><span class="line">        email,</span><br><span class="line">        active</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">fn</span> <span class="title function_">main</span>() &#123;</span><br><span class="line">    <span class="comment">// 声明了可变的user，此时 user 的所有变量都是可变的</span></span><br><span class="line">    <span class="keyword">let</span> <span class="keyword">mut </span><span class="variable">user</span> = User &#123;</span><br><span class="line">        active: <span class="literal">true</span>,</span><br><span class="line">        email: <span class="type">String</span>::<span class="title function_ invoke__">from</span>(<span class="string">&quot;kimroniny@gmail.com&quot;</span>),</span><br><span class="line">        username: <span class="type">String</span>::<span class="title function_ invoke__">from</span>(<span class="string">&quot;kimroniny&quot;</span>) <span class="comment">// 可以调整赋值顺序，但是不可以不给某个字段赋值</span></span><br><span class="line">    &#125;;</span><br><span class="line">    user.active = <span class="literal">false</span>; <span class="comment">// 修改字段的值；</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">let</span> <span class="keyword">mut </span><span class="variable">user2</span> = User &#123;</span><br><span class="line">        email: <span class="type">String</span>::<span class="title function_ invoke__">from</span>(<span class="string">&quot;cuncun@gmail.com&quot;</span>),</span><br><span class="line">        ..user</span><br><span class="line">    &#125;; <span class="comment">// 使用已有的 user 为新的 user2 赋值</span></span><br><span class="line">    <span class="built_in">println!</span>(<span class="string">&quot;Hello, world!&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="tuple-struct"><a class="markdownIt-Anchor" href="#tuple-struct"></a> tuple struct</h2><p>类似于 tuple 的 struct，整体有个名字，但是字段没有名字，只有类型</p><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">fn</span> <span class="title function_">main</span>() &#123;</span><br><span class="line">    <span class="keyword">struct</span> <span class="title class_">Color</span>(<span class="type">i32</span>,<span class="type">i32</span>,<span class="type">i32</span>);</span><br><span class="line">    <span class="keyword">struct</span> <span class="title class_">Point</span>(<span class="type">i32</span>,<span class="type">i32</span>,<span class="type">i32</span>);</span><br><span class="line">    <span class="keyword">let</span> <span class="variable">color</span> = <span class="title function_ invoke__">Color</span>(<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>); <span class="comment">// 初始化方式和 struct 不一样，用 ()</span></span><br><span class="line">    <span class="keyword">let</span> <span class="variable">origin</span> = <span class="title function_ invoke__">Point</span>(<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="struct-的一个例子"><a class="markdownIt-Anchor" href="#struct-的一个例子"></a> struct 的一个例子</h2><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#[derive(Debug)]</span></span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">Rectangle</span> &#123;</span><br><span class="line">    width: <span class="type">u32</span>,</span><br><span class="line">    length: <span class="type">u32</span>,</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">fn</span> <span class="title function_">main</span>() &#123;</span><br><span class="line">    <span class="keyword">let</span> <span class="variable">rect</span> = Rectangle &#123;</span><br><span class="line">        width: <span class="number">1</span>,</span><br><span class="line">        length: <span class="number">2</span>,</span><br><span class="line">    &#125;;</span><br><span class="line">    <span class="built_in">println!</span>(<span class="string">&quot;area: &#123;&#125;&quot;</span>, <span class="title function_ invoke__">area</span>(&amp;rect));</span><br><span class="line">    <span class="built_in">println!</span>(<span class="string">&quot;&#123;:?&#125;&quot;</span>, rect); </span><br><span class="line">    <span class="comment">/*</span></span><br><span class="line"><span class="comment">    Rectangle &#123; width: 1, length: 2 &#125;</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">    <span class="built_in">println!</span>(<span class="string">&quot;&#123;:#?&#125;&quot;</span>, rect);</span><br><span class="line">    <span class="comment">/* </span></span><br><span class="line"><span class="comment">    Rectangle &#123;</span></span><br><span class="line"><span class="comment">        width: 1,</span></span><br><span class="line"><span class="comment">        length: 2,</span></span><br><span class="line"><span class="comment">    &#125;</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">fn</span> <span class="title function_">area</span>(rect: &amp;Rectangle) <span class="punctuation">-&gt;</span> <span class="type">u32</span> &#123;</span><br><span class="line">    rect.width * rect.length</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="struct-的方法"><a class="markdownIt-Anchor" href="#struct-的方法"></a> struct 的方法</h2><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#[derive(Debug)]</span></span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">Rectangle</span> &#123;</span><br><span class="line">    width: <span class="type">u32</span>,</span><br><span class="line">    length: <span class="type">u32</span>,</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">impl</span> <span class="title class_">Rectangle</span> &#123; <span class="comment">// 使用 impl 实现 struct 的方法</span></span><br><span class="line">    <span class="keyword">fn</span> <span class="title function_">area</span>(&amp;<span class="keyword">self</span>) <span class="punctuation">-&gt;</span> <span class="type">u32</span> &#123; </span><br><span class="line">        <span class="keyword">self</span>.width * <span class="keyword">self</span>.length</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 关联函数，第一个参数不是 self</span></span><br><span class="line">    <span class="comment">// 多用于实例化</span></span><br><span class="line">    <span class="keyword">fn</span> <span class="title function_">square</span>(size: <span class="type">u32</span>) <span class="punctuation">-&gt;</span> Rectangle &#123;</span><br><span class="line">        Rectangle &#123; width: size, length: size &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">impl</span> <span class="title class_">Rectangle</span> &#123;</span><br><span class="line">    <span class="comment">// 可以放置多个 impl 块</span></span><br><span class="line">    <span class="comment">// 相当于综合在一起</span></span><br><span class="line">    <span class="keyword">fn</span> <span class="title function_">area2</span>(&amp;<span class="keyword">self</span>) <span class="punctuation">-&gt;</span> <span class="type">u32</span> &#123;  </span><br><span class="line">        <span class="keyword">self</span>.width * <span class="keyword">self</span>.length</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">fn</span> <span class="title function_">main</span>() &#123;</span><br><span class="line">    <span class="keyword">let</span> <span class="variable">rect</span> = Rectangle &#123;</span><br><span class="line">        width: <span class="number">1</span>,</span><br><span class="line">        length: <span class="number">2</span>,</span><br><span class="line">    &#125;;</span><br><span class="line">    <span class="built_in">println!</span>(<span class="string">&quot;area: &#123;&#125;&quot;</span>, rect.<span class="title function_ invoke__">area</span>()); <span class="comment">// 直接调用</span></span><br><span class="line">    <span class="keyword">let</span> <span class="variable">rect2</span> = Rectangle::<span class="title function_ invoke__">square</span>(<span class="number">10</span>);  <span class="comment">// 使用双冒号来调用关联函数</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr /><h2 id="参考"><a class="markdownIt-Anchor" href="#参考"></a> 参考</h2><ol><li><a href="https://www.youtube.com/watch?v=e3-2uxHhbzs&amp;list=PL3azK8C0kje1DUJbaOqce19j3R_-tIc4_&amp;index=1&amp;t=140s">https://www.youtube.com/watch?v=e3-2uxHhbzs&amp;list=PL3azK8C0kje1DUJbaOqce19j3R_-tIc4_&amp;index=1&amp;t=140s</a></li><li>《rust权威指南(The Rust Programming Language)》</li></ol>]]></content>
      
      
      <categories>
          
          <category> rust </category>
          
      </categories>
      
      
        <tags>
            
            <tag> rust </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>rust教程-04</title>
      <link href="/2022/10/24/rust%E6%95%99%E7%A8%8B-04/"/>
      <url>/2022/10/24/rust%E6%95%99%E7%A8%8B-04/</url>
      
        <content type="html"><![CDATA[<p>rust 教程 04: 所有权</p><span id="more"></span><h2 id="什么是所有权"><a class="markdownIt-Anchor" href="#什么是所有权"></a> 什么是所有权？</h2><p>rust 的核心特性就是<strong>所有权</strong></p><p>所有程序在运行时都必须管理它们使用计算机内存的方式</p><ul><li>垃圾收集机制，即程序运行时，会不断地寻找不再使用的内存</li><li>程序员必须显示地分配和释放内存</li></ul><p>rust 则采用<strong>所有权系统</strong>来管理内存，包含一组编译器在编译时检查的规则，因为是编译时检查，所以所有权特性不会影响运行时速度</p><h2 id="stack-vs-heap"><a class="markdownIt-Anchor" href="#stack-vs-heap"></a> stack VS heap</h2><p>rust 这样的系统级编程语言，受到 stack 和 heap 的影响非常大</p><p>stack 和 heap 都是代码运行时可用的内存，但是结构不同</p><h3 id="存储数据"><a class="markdownIt-Anchor" href="#存储数据"></a> 存储数据</h3><p>stack 执行 LIFO 原则，即先进后出</p><p>所有存储在 stack 上的数据必须拥有已知的固定的大小</p><p>而编译时大小未知的数据或运行时大小可能发生变化的数据必须存放在 heap 上</p><p>heap 的内存组织性较差</p><ul><li>当把数据放入 heap 时，会请求一定数量的空间</li><li>操作系统在 heap 里找到一块足够大的空间，并标记为在用，返回一个指针，即该空间的地址</li><li>该过程称作在 heap 上进行分配</li></ul><p>把值压在 stack 上不叫分配，但是可以把指针存放在 stack 上</p><p>把数据压到 stack 上要比在 heap 上分配快得多，因为操作系统不需要寻找用来存储新数据的空间，只要往 stack 的顶端压入数据即可</p><p>在 heap 上分配空间需要做更多的工作，需要找到足够大的空间，并且要做好记录</p><h3 id="访问数据"><a class="markdownIt-Anchor" href="#访问数据"></a> 访问数据</h3><p>访问 heap 上的数据要比访问 stack 上的数据慢，因为需要通过指针才能找到 heap 中的数据。</p><p>对于现代处理器而言，由于缓存的缘故，如果指令在内存中跳转的次数越少，那么速度就越快</p><p>如果数据存放的距离比较近，则处理器处理速度更快（stack），反之更慢</p><p>在 heap 上分配大量空间也会消耗事件</p><h3 id="函数调用"><a class="markdownIt-Anchor" href="#函数调用"></a> 函数调用</h3><p>当代码调用函数时，值被传入到函数（也包括指向 heap 的指针），函数本地的变量被压到 stack 上，函数结束时，这些值也会从 stack 上弹出</p><h2 id="所有权存在的原因"><a class="markdownIt-Anchor" href="#所有权存在的原因"></a> 所有权存在的原因</h2><p>所有权要解决的问题：</p><ul><li>跟踪代码的哪些部分正在使用 heap 的哪些数据</li><li>最小化 heap 上的重复数据量</li><li>清理 heap 上未使用的数据以避免空间不足</li></ul><p>管理 heap 数据是所有权存在的原因</p><h2 id="所有权规则"><a class="markdownIt-Anchor" href="#所有权规则"></a> 所有权规则</h2><p>每个值都有一个变量，这个变量是该值的所有者</p><p>每个值同时只能有一个所有者</p><p>当所有者超出作用域（scope）时，该值将被删除</p><h3 id="以-string-类型解释所有权规则"><a class="markdownIt-Anchor" href="#以-string-类型解释所有权规则"></a> 以 String 类型解释所有权规则</h3><p>String 类型的字符串内容是可变的，而字符串字面值是不可变的。因为 String 是在 heap 上分配内存，而字符串字面值是在 stack 上压入字符串</p><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">fn</span> <span class="title function_">main</span>() &#123;</span><br><span class="line">    <span class="comment">// 声明 string 类型的变量</span></span><br><span class="line">    <span class="keyword">let</span> <span class="keyword">mut </span><span class="variable">s</span> = <span class="type">String</span>::<span class="title function_ invoke__">from</span>(<span class="string">&quot;hello&quot;</span>);</span><br><span class="line">    s.<span class="title function_ invoke__">push_str</span>(<span class="string">&quot; world!&quot;</span>);</span><br><span class="line">    <span class="built_in">println!</span>(<span class="string">&quot;&#123;&#125;&quot;</span>, s);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>当用完 String 之后，需要使用某种方式将内存返还给操作系统</p><ul><li>在拥有 GC 的语言中，GC 会跟踪并清理不再使用的内存</li><li>没有 GC，就需要识别何时不再使用内存；</li><li><ul><li>如果忘了，就浪费内存</li></ul></li><li><ul><li>如果提前做了，变量就会非法</li></ul></li><li><ul><li>如果做了两次，也是 bug，一次分配对应一次释放，要求每次分配对应一次释放</li></ul></li></ul><p>当超出作用域时，系统会执行 <code>drop()</code> 函数，将变量 s 所指向的内存释放</p><h3 id="变量和数据交互的方式移动move"><a class="markdownIt-Anchor" href="#变量和数据交互的方式移动move"></a> 变量和数据交互的方式：移动(Move)</h3><p>在下面的这种情况下，x 和 y 所代表的两个 6 都被压入 stack 中</p><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> <span class="variable">x</span> = <span class="number">6</span>;</span><br><span class="line"><span class="keyword">let</span> <span class="variable">y</span> = x;</span><br></pre></td></tr></table></figure><p>而在下面的这种情况中，针对 String 类型的变量，执行 <code>s2 = s</code> 之后，s 便将字符串的所有权交给了 s2，而 s 不再拥有值</p><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> <span class="keyword">mut </span><span class="variable">s</span> = <span class="type">String</span>::<span class="title function_ invoke__">from</span>(<span class="string">&quot;hello world!&quot;</span>);</span><br><span class="line"><span class="keyword">let</span> <span class="keyword">mut </span><span class="variable">s2</span> = s;</span><br></pre></td></tr></table></figure><p>一个 String 由 3 部分组成：一个指向存放字符串内容的内存指针，一个长度，一个容量。这些内容存放在 stack 上，而字符串则存放在 heap 上</p><p>当执行 <code>s2 = s</code>，在 stack 会赋值一份 String 的数据（指针、长度、容量)，但是并不会赋值指针所指向的 heap 上的数据，也就是两个指针指向同一个 heap 内存中的位置</p><p>当变量离开作用域时，rust 会自动调用 <code>drop()</code> 函数，将变量使用的 heap 自动释放，当 s 和 s2 都离开作用域时，rust 会释放两者的内存，也就是释放相同的内存，从而造成“二次释放 bug”</p><p>为了保证内存安全：</p><ul><li>rust 没有复制被分配的内存</li><li>在执行 <code>s = s2</code> 之后，rust 是让 s 失效，所以当 s 离开作用域时，rust 不会释放任何东西</li></ul><p>rust 不会自动创建数据的深拷贝</p><p>如果想要深度拷贝 heap 上面的 String 数据，而不仅仅是拷贝 stack 上的数据，可以使用 clone 方法，这种方法比较消耗资源</p><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> <span class="keyword">mut </span><span class="variable">s</span> = <span class="type">String</span>::<span class="title function_ invoke__">from</span>(<span class="string">&quot;hello world!&quot;</span>);</span><br><span class="line"><span class="keyword">let</span> <span class="keyword">mut </span><span class="variable">s2</span> = s.<span class="title function_ invoke__">clone</span>();</span><br></pre></td></tr></table></figure><p>在 stack 上的数据复制叫 copy，比如整数类型的移动，就是在 stack 上进行复制。如果一个类型实现了 copy 这个特性（trait），那么旧的变量在赋值后仍然可用；但是，如果一个类型或者该类型的一部分实现了 drop 这个特性（trait），那么 rust 不允许让它再去实现 copy 了</p><p>一些拥有 copy trait 的类型：</p><ul><li>任何简单标量的组合类型都可以是 copy 的，如：u32, bool, char, f64, tuple(标量1,标量2…)</li><li>任何需要分配内存或者资源的都不是 copy 得到</li></ul><h2 id="所有权与函数"><a class="markdownIt-Anchor" href="#所有权与函数"></a> 所有权与函数</h2><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">fn</span> <span class="title function_">main</span>() &#123;</span><br><span class="line">    <span class="keyword">let</span> <span class="variable">s1</span> = <span class="title function_ invoke__">get_ownership</span>(); <span class="comment">// 获得 “some” 的所有权</span></span><br><span class="line">    <span class="title function_ invoke__">take_ownership</span>(s1); <span class="comment">// 所有权交给了 s，s1则失效</span></span><br><span class="line">    <span class="keyword">let</span> <span class="variable">s2</span> = <span class="type">String</span>::<span class="title function_ invoke__">from</span>(<span class="string">&quot;hello_world&quot;</span>);</span><br><span class="line">    <span class="keyword">let</span> <span class="variable">s3</span> = <span class="title function_ invoke__">take_and_give_back</span>(s2); <span class="comment">// s2 转移到了 s3 身上</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">fn</span> <span class="title function_">take_ownership</span>(s:Srting) &#123;</span><br><span class="line">    <span class="built_in">println!</span>(<span class="string">&quot;s:&#123;&#125;&quot;</span>, s);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">fn</span> <span class="title function_">get_ownership</span>() <span class="punctuation">-&gt;</span> <span class="type">String</span> &#123;</span><br><span class="line">    <span class="keyword">let</span> <span class="variable">some</span> = <span class="type">String</span>::<span class="title function_ invoke__">from</span>(<span class="string">&quot;some&quot;</span>);</span><br><span class="line">    some;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">fn</span> <span class="title function_">take_and_give_back</span>(a_string: <span class="type">String</span>) <span class="punctuation">-&gt;</span> <span class="type">String</span> &#123;</span><br><span class="line">    a_string; <span class="comment">// 返回值也会发生所有权的转移</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>一个变量的所有权总是遵循同样的模式：</p><ul><li>把一个值赋给其他变量时就会发生移动</li><li>当一个包含 heap 数据的变量离开作用域时，它的值就会被 drop 函数清理掉，除非数据的所有权移动到另一个变量上了</li></ul><h2 id="引用与借用"><a class="markdownIt-Anchor" href="#引用与借用"></a> 引用与借用</h2><p>引用本质上是一个指针，指向这个变量在 stack 中的位置</p><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">fn</span> <span class="title function_">main</span>() &#123;</span><br><span class="line">    <span class="keyword">let</span> <span class="variable">s</span> = <span class="type">String</span>::<span class="title function_ invoke__">from</span>(<span class="string">&quot;hello&quot;</span>);</span><br><span class="line">    <span class="keyword">let</span> <span class="variable">len</span> = <span class="title function_ invoke__">calc_length</span>(&amp;s); <span class="comment">// 引用到 s，但是并不用 s</span></span><br><span class="line">    <span class="built_in">println!</span>(<span class="string">&quot;the length of s(&#123;&#125;) is &#123;&#125;&quot;</span>, s, len);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 把引用作为函数参数这个行为叫做 “借用”</span></span><br><span class="line"><span class="keyword">fn</span> <span class="title function_">calc_length</span>(s: &amp;<span class="type">String</span>) <span class="punctuation">-&gt;</span> <span class="type">usize</span> &#123;</span><br><span class="line">    s.<span class="title function_ invoke__">len</span>()</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="可变引用-不可变引用"><a class="markdownIt-Anchor" href="#可变引用-不可变引用"></a> 可变引用、不可变引用</h3><p>不可以修改借用的东西，默认也是不可变的</p><p>如果需要可变，需要加上 <code>mut</code></p><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">fn</span> <span class="title function_">main</span>() &#123;</span><br><span class="line">    <span class="keyword">let</span> <span class="keyword">mut </span><span class="variable">s</span> = <span class="type">String</span>::<span class="title function_ invoke__">from</span>(<span class="string">&quot;hello&quot;</span>);</span><br><span class="line">    <span class="keyword">let</span> <span class="variable">len</span> = <span class="title function_ invoke__">calc_length</span>(&amp;<span class="keyword">mut</span> s); <span class="comment">// 引用到 s，但是并不用 s</span></span><br><span class="line">    <span class="built_in">println!</span>(<span class="string">&quot;the length of s(&#123;&#125;) is &#123;&#125;&quot;</span>, s, len);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 把引用作为函数参数这个行为叫做 “借用”</span></span><br><span class="line"><span class="keyword">fn</span> <span class="title function_">calc_length</span>(s: &amp;<span class="keyword">mut</span> <span class="type">String</span>) <span class="punctuation">-&gt;</span> <span class="type">usize</span> &#123;</span><br><span class="line">    s.<span class="title function_ invoke__">len</span>()</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>可变引用</strong>有一个重要的限制：在特定作用域内，对某一块数据，<strong>只能有一个可变的引用</strong>。好处是在编译时可以防止数据竞争</p><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> <span class="variable">s1</span> = &amp;<span class="keyword">mut</span> s;</span><br><span class="line"><span class="keyword">let</span> <span class="variable">s2</span> = &amp;<span class="keyword">mut</span> s; <span class="comment">// 会报错</span></span><br></pre></td></tr></table></figure><p>数据竞争的几种行为：</p><ul><li>两个或多个指针同时访问同一个数据；</li><li>至少有一个指针用于写入数据；</li><li>没有使用任何机制来同步对数据的访问；</li></ul><p>可以通过<strong>创建新的作用域</strong>，来允许非同时的创建多个可变引用</p><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    <span class="keyword">let</span> <span class="variable">s1</span> = &amp;<span class="keyword">mut</span> s;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">let</span> <span class="variable">s2</span> = &amp;<span class="keyword">mut</span> s; <span class="comment">// 不会报错</span></span><br></pre></td></tr></table></figure><p>另外一个限制：<strong>不可以同时拥有一个可变引用和一个不可变引用</strong>。因为可变应用修改了引用内容之后，不可变引用就失效了。但是多个不可变引用是可以同时存在的</p><h3 id="悬空引用"><a class="markdownIt-Anchor" href="#悬空引用"></a> 悬空引用</h3><p>Dangling References</p><p>即一个指针引用了内存中的某个地址，而这块内存可能已经释放并分配给其他人使用了</p><p>在 rust 里，编译器可以检查代码从而保证引用永远都不是悬空引用</p><h3 id="引用的规则"><a class="markdownIt-Anchor" href="#引用的规则"></a> 引用的规则</h3><p>在任何给定的时刻，只能满足下列条件之一：</p><ol><li>一个可变的引用</li><li>人以数量不可变的引用</li></ol><p>引用必须一直有效</p><h2 id="切片slice"><a class="markdownIt-Anchor" href="#切片slice"></a> 切片（slice）</h2><p>rust 中的另外一种不持有所有权的数据类型</p><p>指向字符串中一部分内容的引用</p><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">fn</span> <span class="title function_">main</span>() &#123;</span><br><span class="line">    <span class="keyword">let</span> <span class="variable">s</span> = <span class="type">String</span>::<span class="title function_ invoke__">from</span>(<span class="string">&quot;hello world&quot;</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">let</span> <span class="variable">hello</span> = &amp;s[<span class="number">0</span>..<span class="number">5</span>]; <span class="comment">// 不包括右边界</span></span><br><span class="line">    <span class="keyword">let</span> <span class="variable">hello2</span> = &amp;s[..<span class="number">5</span>]; <span class="comment">// 不包括右边界</span></span><br><span class="line">    <span class="keyword">let</span> <span class="variable">world</span> = &amp;s[<span class="number">5</span>..<span class="number">11</span>];</span><br><span class="line">    <span class="keyword">let</span> <span class="variable">world2</span> = &amp;s[<span class="number">5</span>..];</span><br><span class="line">    <span class="keyword">let</span> <span class="variable">whole</span> = &amp;s[..];</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img data-src="slice.png" alt="切片内存" /></p><p>字符串切片的类型 <code>&amp;str</code>，函数返回值就用这个</p><p>字符串字面值的就是个切片</p><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> <span class="variable">s</span>:&amp;<span class="type">str</span> = <span class="string">&quot;hello world&quot;</span>;</span><br></pre></td></tr></table></figure><p>将字符串切片作为参数传递，从而兼容字符串字面值和 String 类型的参数</p><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">fn</span> <span class="title function_">first_world</span>(s: &amp;<span class="type">String</span>) <span class="punctuation">-&gt;</span>&amp;<span class="type">str</span> &#123;&#125;</span><br><span class="line"><span class="keyword">fn</span> <span class="title function_">first_world</span>(s: &amp;<span class="type">str</span>) <span class="punctuation">-&gt;</span>&amp;<span class="type">str</span> &#123;&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> <span class="variable">s1</span> = <span class="type">String</span>:<span class="title function_ invoke__">from</span>(<span class="string">&quot;sss&quot;</span>);</span><br><span class="line"><span class="title function_ invoke__">first_world</span>(&amp;s[..]);</span><br></pre></td></tr></table></figure><p>定义函数时使用字符串切片来代替字符串引用会使我们的 API 更加通用，且不会损失任何功能</p><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">fn</span> <span class="title function_">main</span>() &#123;</span><br><span class="line">    <span class="keyword">let</span> <span class="variable">s</span> = <span class="type">String</span>::<span class="title function_ invoke__">from</span>(<span class="string">&quot;hello world&quot;</span>);</span><br><span class="line">    <span class="keyword">let</span> <span class="variable">s2</span> = <span class="string">&quot;hello world&quot;</span>;</span><br><span class="line">   </span><br><span class="line">    <span class="built_in">println!</span>(<span class="string">&quot;the first word of s is: &#123;&#125;&quot;</span>, <span class="title function_ invoke__">first_word</span>(&amp;s[..]));</span><br><span class="line">    <span class="built_in">println!</span>(<span class="string">&quot;the first word of s2 is: &#123;&#125;&quot;</span>, <span class="title function_ invoke__">first_word</span>(s2));</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">fn</span> <span class="title function_">first_word</span>(s: &amp;<span class="type">str</span>) <span class="punctuation">-&gt;</span> &amp;<span class="type">str</span> &#123;</span><br><span class="line">    <span class="keyword">let</span> <span class="variable">bytes</span> = s.<span class="title function_ invoke__">as_bytes</span>();</span><br><span class="line">    <span class="title function_ invoke__">for</span> (idx, &amp;item) <span class="keyword">in</span> bytes.<span class="title function_ invoke__">iter</span>().<span class="title function_ invoke__">enumerate</span>() &#123;</span><br><span class="line">        <span class="keyword">if</span> item == <span class="string">b&#x27; &#x27;</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> &amp;s[..idx];</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    &amp;s[..]</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>其他类型的切片</p><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> <span class="variable">a</span> = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>];</span><br><span class="line"><span class="keyword">let</span> <span class="variable">b</span>:&amp;[<span class="type">i32</span>] = &amp;a[<span class="number">1</span>..<span class="number">3</span>]; <span class="comment">// b 的类型是 &amp;[i32]</span></span><br></pre></td></tr></table></figure><hr /><h2 id="参考"><a class="markdownIt-Anchor" href="#参考"></a> 参考</h2><ol><li><a href="https://www.youtube.com/watch?v=e3-2uxHhbzs&amp;list=PL3azK8C0kje1DUJbaOqce19j3R_-tIc4_&amp;index=1&amp;t=140s">https://www.youtube.com/watch?v=e3-2uxHhbzs&amp;list=PL3azK8C0kje1DUJbaOqce19j3R_-tIc4_&amp;index=1&amp;t=140s</a></li><li>《rust权威指南(The Rust Programming Language)》</li></ol>]]></content>
      
      
      <categories>
          
          <category> rust </category>
          
      </categories>
      
      
        <tags>
            
            <tag> rust </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>serverless基础</title>
      <link href="/2022/10/21/serverless%E5%9F%BA%E7%A1%80/"/>
      <url>/2022/10/21/serverless%E5%9F%BA%E7%A1%80/</url>
      
        <content type="html"><![CDATA[<p>serverless 的基础内容</p><span id="more"></span><h2 id="概念"><a class="markdownIt-Anchor" href="#概念"></a> 概念</h2><p>Serverless computing 无服务器运算，又称为函数即服务（Function as a service，即 FaaS）</p><p>我们不再需要关心服务（如 mysql、redis等）的申请机器、资源部署、资源碎片、弹性扩缩容问题，不再需要日夜值守关心各个依赖组件各项指标出现的问题，我们只需要聚焦在自己的上层业务逻辑上进行实现和优化，并且再也不会有闲置资源或者碎片资源问题 (按需使用)，这个就是 Serverless 想要构建的架构体系。</p><h2 id="架构演进"><a class="markdownIt-Anchor" href="#架构演进"></a> 架构演进</h2><p>从整个演进过程来看，一直都在朝着资源切分粒度越来越细（<strong>物理机 -&gt; 操作系统 -&gt; 进程 -&gt; function</strong>），资源利用率越来越高，运维工作越来越少，开发更聚焦业务方向。</p><p>物理机时代</p><p>虚拟化时代（重量级 VM），将物理机切分成一个个 VM 实例</p><p>云时代，云服务提供商，还是采用重量级 VM</p><p>虚拟化时代（轻量级容器 docker），devOps 开始火热，强制运维转开发，但是开发还是要关心运维</p><p>Serverless，去运维，开发人员只关注业务逻辑开发</p><h2 id="如何影响微服务"><a class="markdownIt-Anchor" href="#如何影响微服务"></a> 如何影响微服务</h2><p>serverless 是技术架构，微服务是业务架构，经济基础决定上层建筑，底层技术架构形式影响上层业务</p><p>以前的微服务以应用形式来组织，很多服务可能用到相同的功能，但是这些功能并没有达到可以分解为一个微服务的程度，此时，各个服务都会开发这一功能，从而导致代码重复。虽然可以使用共享库来解决，但是多语言环境下不一定行得通</p><p>而 serverless 架构中以 function 为最小粒度组织，业务分隔粒度可以无限小，任何一个模块功能甚至方法都可以独立存在，不需要通过共享库或者共享组件来复用。所以，在 Serverless 架构中，微服务组件的相互隔离和模块松耦合可以做的更好，应用甚至可以以独立函数的形式存在</p><h2 id="和云原生的关系"><a class="markdownIt-Anchor" href="#和云原生的关系"></a> 和云原生的关系</h2><p>serverless 就是为云而生的东西，天生具有云的基因(免运维弹性伸缩按量计费)</p><p>只需要聚焦业务逻辑不需要去关心和管理资源问题，是对容器技术的封装，代表了云原生的高级阶段</p><h2 id="serverless-要解决的问题"><a class="markdownIt-Anchor" href="#serverless-要解决的问题"></a> serverless 要解决的问题</h2><ol><li>机器资源分布不均</li></ol><p>一个大型系统包括多种业务，通过拆分集群来进行业务隔离，不同集群由于不同的特性，会出现差距较大的资源利用率</p><ol start="2"><li>错峰问题</li></ol><p>如果就为了一天 1 个小时的高峰流量来准备全天的机器，那剩下来的那 23 小时也是一种资源的浪费</p><ol start="3"><li>碎片化问题</li></ol><p>微服务之间的数据交互主要是 RPC 和 MQ，常见的 RPC 框架本身就有比较完善的探活和负载均衡机制能够保证流量在不同机器的的均衡性，而 MQ 受限于顺序消费、失败重发、消息分区等特性没有办法很好的保证消费端负载均衡，比如我们常用的 RocketMQ 默认使用了一种分页的算法，即在客户端将消费者和分区分别按照字典序排好，再按照平均分配的原则每个消费者分 “一页” 的分区，所以这里就会引申出碎片的问题，当一个集群中消费的 Metaq 消息都是小分区的消息，所有的消息都会被流入集群中的前几个机器中，造成集群整体流量不均，带来集群资源碎片。</p><ol start="4"><li>资源问题</li></ol><p>对于新接入的用户和业务，我们常见的做法是评估峰值业务量然后为其开启新集群预先分配一批机器，这里就有两个问题，一个是对于资源的预先评估是否能够准确而不造成浪费，另一个是成本结算方式，如果使用机器数来给用户或者业务方结算成本，对于有明显波峰波谷的使用者来说也是一种很大的成本资源浪费。</p><ol start="5"><li>运维问题</li></ol><p>在每次大促或者压测之前都需要提前扩缩容准备资源、修改集群配置，随着各种大促小促和压测次数越来越密集，这种运维开销成本也变得越来越大。</p><hr /><h2 id="参考"><a class="markdownIt-Anchor" href="#参考"></a> 参考</h2><ol><li><a href="https://my.oschina.net/u/5783135/blog/5584238">Serverless 架构演进与实践</a></li></ol>]]></content>
      
      
      <categories>
          
          <category> serverless </category>
          
      </categories>
      
      
        <tags>
            
            <tag> serverless </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>rust教程-03</title>
      <link href="/2022/10/20/rust%E6%95%99%E7%A8%8B-03/"/>
      <url>/2022/10/20/rust%E6%95%99%E7%A8%8B-03/</url>
      
        <content type="html"><![CDATA[<p>rust 教程 03: 基本内容</p><span id="more"></span><h2 id="变量-常量-隐藏"><a class="markdownIt-Anchor" href="#变量-常量-隐藏"></a> 变量、常量、隐藏</h2><h3 id="变量"><a class="markdownIt-Anchor" href="#变量"></a> 变量</h3><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> <span class="variable">x</span> = <span class="number">5</span>; <span class="comment">// 不可变变量</span></span><br><span class="line"><span class="keyword">let</span> <span class="variable">mul</span> x = <span class="number">3</span>; <span class="comment">// 可变变量，通过 mut 修饰符</span></span><br></pre></td></tr></table></figure><h3 id="常量"><a class="markdownIt-Anchor" href="#常量"></a> 常量</h3><p>常量 constant，绑定值以后也是不可变的，但是与不可变变量有很多区别</p><ol><li>不可以使用 mut 修饰符，常量永远不可变</li><li>声明常量使用 const，且必须标注类型</li><li>可以在任何作用域内声明，包括全局作用域</li><li>只可以绑定到常量表达式，无法绑定到函数的调用结果或者运行时才能计算出的值<br />命名规范：使用全大写字母，用下划线分开单词</li></ol><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> MAX_POINTS: <span class="type">u32</span> = <span class="number">100</span>;</span><br></pre></td></tr></table></figure><h3 id="隐藏"><a class="markdownIt-Anchor" href="#隐藏"></a> 隐藏</h3><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> <span class="variable">y</span> = <span class="number">1</span>;</span><br><span class="line"><span class="comment">// y = y + 1; // error: 不可变变量</span></span><br><span class="line"><span class="keyword">let</span> <span class="variable">y</span> = y + <span class="number">1</span>; <span class="comment">// ok: 隐藏了上一个 y</span></span><br><span class="line"><span class="keyword">let</span> <span class="variable">y</span> = <span class="string">&quot;hello&quot;</span>; <span class="comment">// ok: 可以改变 y 的类型</span></span><br></pre></td></tr></table></figure><h2 id="强类型语言"><a class="markdownIt-Anchor" href="#强类型语言"></a> 强类型语言</h2><p>rust 是静态编译语言，在编译时必须直到所有变量的类型，即：</p><ul><li>基于使用的值，编译器可以推断出它的具体类型</li><li>如果类型比较多，必须添加类型标注，否则编译报错</li></ul><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 变量 x 必须指明类型 u32，因为 parse() 的结果产生的类型可能有很多，比如 i32，i64，u64 等等</span></span><br><span class="line"><span class="keyword">let</span> <span class="variable">x</span>: <span class="type">u32</span> = <span class="string">&quot;43&quot;</span>.<span class="title function_ invoke__">parse</span>().<span class="title function_ invoke__">expect</span>(<span class="string">&quot;pls input a number&quot;</span>); </span><br></pre></td></tr></table></figure><h2 id="标量类型"><a class="markdownIt-Anchor" href="#标量类型"></a> 标量类型</h2><p>一个标量类型代表一个单个的值</p><p>四个标量类型：整数、浮点、布尔、字符</p><h3 id="整数类型"><a class="markdownIt-Anchor" href="#整数类型"></a> 整数类型</h3><ul><li>十进制：97_88 可以加下划线</li><li>十六进制：0xff 可以加下划线</li><li>八进制：0o99 可以加下划线</li><li>二进制：0b01_0101 可以加下划线</li><li>字节（u8）：b’A’</li></ul><p>整数溢出：</p><ul><li>debug模式下，会 panic</li><li>release 模式下，会发生“环绕”操作，不会 panic</li></ul><h3 id="浮点类型"><a class="markdownIt-Anchor" href="#浮点类型"></a> 浮点类型</h3><ul><li>f32，32位，单精度</li><li>f64，64位，双精度，默认类型，精度更高，和 f32 的速度在现代 CPU 上差不多</li></ul><h3 id="布尔类型"><a class="markdownIt-Anchor" href="#布尔类型"></a> 布尔类型</h3><p>bool</p><ul><li>true</li><li>false</li></ul><h3 id="字符类型"><a class="markdownIt-Anchor" href="#字符类型"></a> 字符类型</h3><p>char</p><p>单引号</p><p>占用 4 个字节</p><p>Unicode 标量值，可以表示比 ASCII 多得多的字符内容</p><ul><li>U+0000 到 U+D7FF</li><li>U+E000 到 U+10FFFF</li></ul><h2 id="复合类型"><a class="markdownIt-Anchor" href="#复合类型"></a> 复合类型</h2><p>复合类型：可以将多个值放在一个类型里</p><p>两种基础的复合类型：元组（Tuple）、数组</p><h3 id="tuple"><a class="markdownIt-Anchor" href="#tuple"></a> Tuple</h3><p>可以将多个类型的值放在一个类型里，每个位置对应一个类型</p><p>长度固定，一旦声明无法改变</p><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> <span class="variable">tup</span>:(<span class="type">i32</span>, <span class="type">f64</span>, <span class="type">u8</span>) = (<span class="number">400</span>, <span class="number">4.6</span>, <span class="number">1</span>); </span><br><span class="line"><span class="keyword">let</span> (x, y, z) = tup;</span><br><span class="line"><span class="built_in">println!</span>(<span class="string">&quot;&#123;&#125;, &#123;&#125;, &#123;&#125;&quot;</span>, tup.<span class="number">0</span>, tup.<span class="number">1</span>, tup.<span class="number">2</span>); <span class="comment">// 通过 .index 的方式来取值</span></span><br></pre></td></tr></table></figure><h3 id="数组"><a class="markdownIt-Anchor" href="#数组"></a> 数组</h3><p>如果想要保存数据在栈而不是堆上，或者保证有固定数量的元素，就可以使用数组</p><p>数组没有 vector 灵活，vector 由标准库提供</p><p>优先使用 vector</p><p>访问越界的话，在编译期间不会报错，但是在运行时会 panic，rust 不允许访问越界地址的内存</p><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> <span class="variable">a</span> = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>];</span><br><span class="line"><span class="keyword">let</span> <span class="variable">a</span>: [<span class="type">i32</span>: <span class="number">5</span>] = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>]; <span class="comment">// [类型：长度]</span></span><br><span class="line"><span class="keyword">let</span> <span class="variable">a</span> = [<span class="number">3</span>; <span class="number">5</span>]; <span class="comment">// 等同于 let a = [3,3,3,3,3]，即 a = [初始值；长度]</span></span><br></pre></td></tr></table></figure><h2 id="函数"><a class="markdownIt-Anchor" href="#函数"></a> 函数</h2><p>针对函数和变量名，使用 snake case 命名规范，所有字母小写</p><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">fn</span> <span class="title function_">main</span>() &#123;</span><br><span class="line">    <span class="title function_ invoke__">add</span>(<span class="number">34</span>,<span class="number">5</span>); <span class="comment">// argument</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// parameter, 必须声明每个参数的类型</span></span><br><span class="line"><span class="keyword">fn</span> <span class="title function_">add</span>(x: <span class="type">i32</span>, y: <span class="type">i32</span>) <span class="punctuation">-&gt;</span> <span class="type">i32</span>&#123;  <span class="comment">// 只有返回值的类型，不可以为返回值命名</span></span><br><span class="line">    x + y <span class="comment">// 最后一个表达式即为返回值，也可以使用 return 提前返回</span></span><br><span class="line">    <span class="comment">// x + y; // 不可以加分号，如果加了分号，就是语句，语句的返回值是空的 tuple，即 () </span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="控制流-条件表达式"><a class="markdownIt-Anchor" href="#控制流-条件表达式"></a> 控制流: 条件表达式</h2><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">fn</span> <span class="title function_">main</span>() &#123;</span><br><span class="line">    <span class="keyword">let</span> <span class="variable">x</span> = <span class="number">3</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> x % <span class="number">10</span> == <span class="number">0</span> &#123;</span><br><span class="line"></span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> x % <span class="number">3</span> == <span class="number">0</span> &#123;</span><br><span class="line"></span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> x % <span class="number">7</span> == <span class="number">0</span> &#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">let</span> <span class="variable">y</span> = <span class="keyword">if</span> x % <span class="number">10</span> == <span class="number">0</span> &#123; <span class="number">5</span> &#125; <span class="keyword">else</span> &#123; <span class="number">6</span> &#125;; <span class="comment">// 返回值类型必须是统一的，即编译期间能够确定类型</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="控制流-循环"><a class="markdownIt-Anchor" href="#控制流-循环"></a> 控制流: 循环</h2><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">fn</span> <span class="title function_">main</span>() &#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// loop 循环</span></span><br><span class="line">    <span class="keyword">loop</span> &#123;</span><br><span class="line">        <span class="built_in">println!</span>(<span class="string">&quot;loop...&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// loop 循环返回一个结果</span></span><br><span class="line">    <span class="keyword">let</span> <span class="keyword">mut </span><span class="variable">counter</span> = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">let</span> <span class="variable">result</span> = <span class="keyword">loop</span> &#123;</span><br><span class="line">        counter += <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">if</span> counter == <span class="number">10</span> &#123;</span><br><span class="line">            <span class="keyword">break</span> counter; <span class="comment">// 通过 break 返回当前 loop 的值</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// while 循环</span></span><br><span class="line">    <span class="keyword">while</span> counter != <span class="number">100</span> &#123;</span><br><span class="line">        counter += <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// for 循环</span></span><br><span class="line">    <span class="keyword">let</span> <span class="variable">a</span> = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>];</span><br><span class="line">    <span class="keyword">for</span> <span class="variable">element</span> <span class="keyword">in</span> a.<span class="title function_ invoke__">iter</span>() &#123;</span><br><span class="line">        <span class="built_in">println!</span>(<span class="string">&quot;element is &#123;&#125;&quot;</span>, element);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// for range</span></span><br><span class="line">    <span class="keyword">for</span> <span class="variable">element</span> <span class="keyword">in</span> (<span class="number">1</span>..<span class="number">4</span>).<span class="title function_ invoke__">rev</span>() &#123; <span class="comment">// (1..4) 只有 1,2,3 不包括 4，rev 就是反转一下</span></span><br><span class="line">        <span class="built_in">println!</span>(<span class="string">&quot;element is &#123;&#125;&quot;</span>, element);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr /><h2 id="参考"><a class="markdownIt-Anchor" href="#参考"></a> 参考</h2><ol><li><a href="https://www.youtube.com/watch?v=e3-2uxHhbzs&amp;list=PL3azK8C0kje1DUJbaOqce19j3R_-tIc4_&amp;index=1&amp;t=140s">https://www.youtube.com/watch?v=e3-2uxHhbzs&amp;list=PL3azK8C0kje1DUJbaOqce19j3R_-tIc4_&amp;index=1&amp;t=140s</a></li><li>《rust权威指南(The Rust Programming Language)》</li></ol>]]></content>
      
      
      <categories>
          
          <category> rust </category>
          
      </categories>
      
      
        <tags>
            
            <tag> rust </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>rust教程-02</title>
      <link href="/2022/10/18/rust%E6%95%99%E7%A8%8B-02/"/>
      <url>/2022/10/18/rust%E6%95%99%E7%A8%8B-02/</url>
      
        <content type="html"><![CDATA[<p>rust 教程 02: 例子</p><span id="more"></span><p>一个简单的猜数小游戏。</p><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 导入包的方式</span></span><br><span class="line"><span class="keyword">use</span> rand::Rng; <span class="comment">// 为什么导入 rng，但是下面没有用 rng，而是直接用 rand::thread_rng().gen_range();</span></span><br><span class="line"><span class="keyword">use</span> std::&#123;cmp::Ordering, io&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">fn</span> <span class="title function_">main</span>() &#123;</span><br><span class="line">    <span class="comment">// let x = String::new(); 不加 mut 修饰词，则默认为 immut</span></span><br><span class="line">    <span class="keyword">let</span> <span class="variable">secret_number</span> = rand::<span class="title function_ invoke__">thread_rng</span>().<span class="title function_ invoke__">gen_range</span>(<span class="number">1</span>, <span class="number">101</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">loop</span> &#123;</span><br><span class="line">        <span class="built_in">println!</span>(<span class="string">&quot;please input a number:&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">let</span> <span class="keyword">mut </span><span class="variable">guess</span> = <span class="type">String</span>::<span class="title function_ invoke__">new</span>();</span><br><span class="line">        io::<span class="title function_ invoke__">stdin</span>().<span class="title function_ invoke__">read_line</span>(&amp;<span class="keyword">mut</span> guess).<span class="title function_ invoke__">expect</span>(<span class="string">&quot;input error!&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// let guess: u32 = guess.trim().parse().expect(&quot;pls input an interger...&quot;);</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">let</span> <span class="variable">guess</span>: <span class="type">u32</span> = <span class="keyword">match</span> guess.<span class="title function_ invoke__">trim</span>().<span class="title function_ invoke__">parse</span>() &#123;</span><br><span class="line">            <span class="title function_ invoke__">Ok</span>(num) =&gt; num,</span><br><span class="line">            <span class="title function_ invoke__">Err</span>(_) =&gt; <span class="keyword">continue</span>,</span><br><span class="line">        &#125;;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">match</span> guess.<span class="title function_ invoke__">cmp</span>(&amp;secret_number) &#123;</span><br><span class="line">            Ordering::Equal =&gt; &#123;</span><br><span class="line">                <span class="built_in">println!</span>(<span class="string">&quot;win!!!&quot;</span>);</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            Ordering::Less =&gt; &#123;</span><br><span class="line">                <span class="built_in">println!</span>(<span class="string">&quot;less~&quot;</span>);</span><br><span class="line">            &#125;</span><br><span class="line">            Ordering::Greater =&gt; &#123;</span><br><span class="line">                <span class="built_in">println!</span>(<span class="string">&quot;greater~&quot;</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><hr /><h2 id="参考"><a class="markdownIt-Anchor" href="#参考"></a> 参考</h2><ol><li><a href="https://www.youtube.com/watch?v=e3-2uxHhbzs&amp;list=PL3azK8C0kje1DUJbaOqce19j3R_-tIc4_&amp;index=1&amp;t=140s">https://www.youtube.com/watch?v=e3-2uxHhbzs&amp;list=PL3azK8C0kje1DUJbaOqce19j3R_-tIc4_&amp;index=1&amp;t=140s</a></li><li>《rust权威指南(The Rust Programming Language)》</li></ol>]]></content>
      
      
      <categories>
          
          <category> rust </category>
          
      </categories>
      
      
        <tags>
            
            <tag> rust </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>wsl 数据迁移</title>
      <link href="/2022/10/18/wsl-%E6%95%B0%E6%8D%AE%E8%BF%81%E7%A7%BB/"/>
      <url>/2022/10/18/wsl-%E6%95%B0%E6%8D%AE%E8%BF%81%E7%A7%BB/</url>
      
        <content type="html"><![CDATA[<p>wsl 数据迁移到其他硬盘</p><span id="more"></span><p>wsl 的默认目录 <code>C:\Users\kimroniny\AppData\Local\Packages\CanonicalGroupLimited.Ubuntu18.04onWindows_79rhkp1fndgsc</code></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 查看所有的 wsl</span></span><br><span class="line">wsl -l -v </span><br><span class="line"><span class="comment"># 导出想要迁移的 wsl 到 tar</span></span><br><span class="line">wsl --<span class="built_in">export</span> Ubuntu-18.04 D:\wsl\Ubuntu.tar</span><br><span class="line"><span class="comment"># 注销想要迁移的 wsl, 此时原目录下的数据 ./LocalState 就消失了</span></span><br><span class="line">wsl --unregister Ubuntu-18.04</span><br><span class="line"><span class="comment"># 导入到指定目录</span></span><br><span class="line">wsl --import Ubuntu-18.04 D:\wsl\wsl2 D:\wsl\Ubuntu.tar --version 2</span><br><span class="line"><span class="comment"># 设置默认登录用户为指定用户</span></span><br><span class="line">ubuntu1804 config --default-user kimroniny</span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> wsl </category>
          
      </categories>
      
      
        <tags>
            
            <tag> wsl </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>ssh 登录到 wsl</title>
      <link href="/2022/10/18/ssh-%E7%99%BB%E5%BD%95%E5%88%B0-wsl/"/>
      <url>/2022/10/18/ssh-%E7%99%BB%E5%BD%95%E5%88%B0-wsl/</url>
      
        <content type="html"><![CDATA[<p>局域网内主机登录到其他主机的 wsl</p><span id="more"></span><h2 id="wsl-到-windows-的端口映射"><a class="markdownIt-Anchor" href="#wsl-到-windows-的端口映射"></a> wsl 到 windows 的端口映射</h2><p>在 wsl 中通过 ifconfig 查看 ip，一定要使用该 ip，不要使用 windows 网络设置中 vEthernet switch 或者 vEthernet wsl 的 ip 地址。</p><p>假设该 ip 为 192.168.186.222</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># listenport: 对外开放的端口</span></span><br><span class="line"><span class="comment"># connectaddress: wsl 的内部 ip</span></span><br><span class="line"><span class="comment"># connectport: wsl 的 ssh 端口</span></span><br><span class="line">netsh interface portproxy add v4tov4 listenport=50022 connectaddress=192.168.186.222 connectport=22 listenaddress=* protocol=tcp </span><br><span class="line"></span><br><span class="line"><span class="comment"># 删除端口转发</span></span><br><span class="line">netsh interface portproxy delete v4tov4 listenport=80 protocol=tcp</span><br></pre></td></tr></table></figure><p>在 windows 的防火墙高级设置中，在入规则中开放 50022 端口。</p><h2 id="配置-ssh"><a class="markdownIt-Anchor" href="#配置-ssh"></a> 配置 ssh</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 重新安装 ssh</span></span><br><span class="line">apt uninstall openssh-server</span><br><span class="line">apt update <span class="comment"># 有的 ubuntu 内核已经很旧了，会导致 install 时出现 url 失效的问题</span></span><br><span class="line">apt install openssh-server</span><br><span class="line"></span><br><span class="line"><span class="comment"># ssh 的配置文件</span></span><br><span class="line">/etc/ssh/sshd_config</span><br><span class="line"><span class="comment"># 本地用户的 ssh 目录</span></span><br><span class="line"><span class="built_in">chmod</span> 700 -R ~/.ssh </span><br><span class="line"><span class="built_in">chmod</span> 600 ~/.ssh/authorized_keys</span><br><span class="line"><span class="built_in">chown</span> user:user -R ~/.ssh</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> wsl </category>
          
      </categories>
      
      
        <tags>
            
            <tag> wsl </tag>
            
            <tag> ssh </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>rust教程-01</title>
      <link href="/2022/10/17/rust%E6%95%99%E7%A8%8B-01/"/>
      <url>/2022/10/17/rust%E6%95%99%E7%A8%8B-01/</url>
      
        <content type="html"><![CDATA[<p>rust 教程 01: 环境部署</p><span id="more"></span><h2 id="基础知识"><a class="markdownIt-Anchor" href="#基础知识"></a> 基础知识</h2><p>rust 擅长的领域：</p><ul><li>高性能 web service</li><li>WebAssembly</li><li>命令行工具</li><li>网络编程</li><li>嵌入式设备</li><li>系统编程</li></ul><p>rust 的优点：</p><ul><li>性能（媲美 c/c++）</li><li>安全性（内存）</li><li>无所畏惧的并发</li></ul><h2 id="安装"><a class="markdownIt-Anchor" href="#安装"></a> 安装</h2><p>官网：<a href="https://www.rust-lang.org/">https://www.rust-lang.org/</a></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">rustup update <span class="comment"># 更新</span></span><br><span class="line">rustup self uninstall <span class="comment"># 卸载</span></span><br><span class="line">rustc --version <span class="comment"># 版本</span></span><br></pre></td></tr></table></figure><p>安装的时候可能会出现 openssl 的问题, 此时需要设置</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">export</span> RUSTUP_DIST_SERVER=https://mirrors.ustc.edu.cn/rust-static</span><br><span class="line"><span class="built_in">export</span> RUSTUP_UPDATE_ROOT=https://mirrors.ustc.edu.cn/rust-static/rustup</span><br></pre></td></tr></table></figure><p>开发工具：<code>vscode</code></p><p>插件：<code>rust</code></p><h2 id="基本程序"><a class="markdownIt-Anchor" href="#基本程序"></a> 基本程序</h2><p>后缀名：<code>.rs</code></p><p>文件命名规范：<code>hello_world.rs</code></p><p>编译：<code>rustc main.rs</code>，产生可执行文件</p><p>编译需要服务器安装 <code>gcc</code></p><p>rust 是 ahead-of-time 编译的语言，可以先编译，然后把可执行文件交给别人运行（无需安装 rust）。</p><h2 id="cargo"><a class="markdownIt-Anchor" href="#cargo"></a> cargo</h2><p>cargo 是 rust 的构建系统和包管理工具，即：构建代码、下载依赖的库、构建这些库…</p><p>安装 rust 的时候会安装 cargo。<code>cargo --version</code></p><p>包 packages 在 cargo 中叫做 <code>crate</code></p><p>cargo 生成的 <a href="http://main.rs">main.rs</a> 放在 src/ 目录下, cargo.toml 在项目顶层下，源代码都在 src/ 目录下，顶层目录可以放 readme、许可信息、配置文件、说明文档等与程序源码无关的文件</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line">cargo --version</span><br><span class="line"></span><br><span class="line"><span class="comment"># 创建项目 hello_cargo</span></span><br><span class="line"><span class="comment"># 包括文件:</span></span><br><span class="line"><span class="comment"># # cargo.toml 配置文件</span></span><br><span class="line"><span class="comment"># # src/ 源代码</span></span><br><span class="line"><span class="comment"># # .gitignore </span></span><br><span class="line">cargo new hello_cargo</span><br><span class="line"></span><br><span class="line"><span class="comment"># 编译，创建可执行文件</span></span><br><span class="line"><span class="comment"># target/build/hello_cargo.exe</span></span><br><span class="line"><span class="comment"># cargo.lock文件，负责追踪项目依赖的精确版本</span></span><br><span class="line">cargo build</span><br><span class="line"></span><br><span class="line"><span class="comment"># 编译 + 执行</span></span><br><span class="line"><span class="comment"># 如果已经编译过且代码未修改，则直接执行</span></span><br><span class="line">cargo run</span><br><span class="line"></span><br><span class="line"><span class="comment"># 检查代码是否可以通过编译，不产生可执行文件</span></span><br><span class="line"><span class="comment"># 可以连续反复使用</span></span><br><span class="line">cargo check</span><br><span class="line"></span><br><span class="line"><span class="comment"># 为发布构建</span></span><br><span class="line"><span class="comment"># 编译时会进行优化，代码运行的更快，但是编译时间会更长</span></span><br><span class="line"><span class="comment"># target/release</span></span><br><span class="line">cargo build --release</span><br></pre></td></tr></table></figure><blockquote><p>第一次执行的时候, 可能出现缺少 <code>cc</code> 的问题.<br />可以通过 <code>apt install build-essential</code> 解决</p></blockquote><p>cargo 更换国内源，在 <code>~/.cargo/config</code> 文件中填写下面内容，网络上提供了很多国内源，但是好像只有中科大的能用。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">[source.crates-io]</span><br><span class="line">registry = &quot;https://github.com/rust-lang/crates.io-index&quot;</span><br><span class="line"># 指定镜像</span><br><span class="line">replace-with = &#x27;ustc&#x27;</span><br><span class="line"></span><br><span class="line"># 中国科学技术大学</span><br><span class="line">[source.ustc]</span><br><span class="line">registry = &quot;git://mirrors.ustc.edu.cn/crates.io-index&quot;</span><br></pre></td></tr></table></figure><hr /><h2 id="参考"><a class="markdownIt-Anchor" href="#参考"></a> 参考</h2><ol><li><a href="https://www.youtube.com/watch?v=e3-2uxHhbzs&amp;list=PL3azK8C0kje1DUJbaOqce19j3R_-tIc4_&amp;index=1&amp;t=140s">https://www.youtube.com/watch?v=e3-2uxHhbzs&amp;list=PL3azK8C0kje1DUJbaOqce19j3R_-tIc4_&amp;index=1&amp;t=140s</a></li><li>《rust权威指南(The Rust Programming Language)》</li></ol>]]></content>
      
      
      <categories>
          
          <category> rust </category>
          
      </categories>
      
      
        <tags>
            
            <tag> rust </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>软件架构模式演进</title>
      <link href="/2022/10/17/%E8%BD%AF%E4%BB%B6%E6%9E%B6%E6%9E%84%E6%A8%A1%E5%BC%8F%E6%BC%94%E8%BF%9B/"/>
      <url>/2022/10/17/%E8%BD%AF%E4%BB%B6%E6%9E%B6%E6%9E%84%E6%A8%A1%E5%BC%8F%E6%BC%94%E8%BF%9B/</url>
      
        <content type="html"><![CDATA[<p>软件架构模式基本演进过程。</p><span id="more"></span><p><strong>软件的架构模式总的说经历了三个阶段的演进：从单机、集中式到分布式微服务架构。</strong></p><h2 id="单机架构"><a class="markdownIt-Anchor" href="#单机架构"></a> 单机架构</h2><p>通常采用面向过程的设计方法。采用 C/S 架构。</p><h2 id="集中式架构"><a class="markdownIt-Anchor" href="#集中式架构"></a> 集中式架构</h2><p>通常采用面向对象的设计方法。采用三层架构 MVC，系统包括业务接入层、业务逻辑层和数据库层。</p><h2 id="分布式微服务架构"><a class="markdownIt-Anchor" href="#分布式微服务架构"></a> 分布式微服务架构</h2><p>可以实现业务和应用之间的解耦，解决单体应用扩展性差、弹性伸缩能力不足的问题，适合在云环境下部署运营。</p><p><strong>三种设计模式的演进：页面驱动设计，数据驱动设计，领域驱动设计。</strong></p><h2 id="页面驱动设计"><a class="markdownIt-Anchor" href="#页面驱动设计"></a> 页面驱动设计</h2><p>主要集中在客户端开发过程。</p><p>以设计稿为标准进行开发的，每位客户端开发的同学要开展工作都离不开 UI 设计师的设计稿。</p><h2 id="数据驱动设计"><a class="markdownIt-Anchor" href="#数据驱动设计"></a> 数据驱动设计</h2><p>主要集中在服务端开发过程。</p><p>设计数据库表结构是最重要的环节：对业务的理解程度，对可扩展性的考虑程度都直接影响到了我们会“如何设计数据库表结构”；数据库表结构设计是否合理，也直接影响了我们后续开发业务逻辑是否顺利</p><h2 id="领域驱动设计-ddddomain-driven-design"><a class="markdownIt-Anchor" href="#领域驱动设计-ddddomain-driven-design"></a> 领域驱动设计 DDD(Domain Driven Design)</h2><p>核心思想是避免<strong>业务逻辑的复杂性</strong>和<strong>技术实现的复杂性</strong>耦合在一起。</p><p>最大的价值在于梳理业务需求，抽象出一个个“领域”，并形成各个领域之间的交互接口。</p><p>“模型”是 DDD 中的重要概念：模型是对领域的抽象和模拟。</p><p>“建模”是 DDD 中重要的手段：建模时针对特定问题建立该领域的合理模型。</p><p>观点：不以用户为中心。DDD 认为：以用户为中心是表层需求，真正的需求是基于领域的，领域之所以有意义，一定是和人有关系。</p><p><strong>转变编程语言到 golang 的制胜法宝：三刷官方文档</strong></p><ul><li>一刷：从头看到尾，扫清知识盲点和概念；</li><li>二刷：手敲，注释和总结；</li><li>三刷：写注释，不看文档实现功能，遇到问题再和文档比较，加深理解。</li></ul><hr /><p>参考：</p><ol><li><a href="https://xie.infoq.cn/article/70fc253b683d5a7eaac833617">给想转 Go 或者 Go 进阶同学的一些建议</a></li></ol>]]></content>
      
      
      <categories>
          
          <category> architect </category>
          
          <category> software design </category>
          
      </categories>
      
      
        <tags>
            
            <tag> architect </tag>
            
            <tag> software design </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>软件开发模式</title>
      <link href="/2022/10/15/%E8%BD%AF%E4%BB%B6%E5%BC%80%E5%8F%91%E6%A8%A1%E5%BC%8F/"/>
      <url>/2022/10/15/%E8%BD%AF%E4%BB%B6%E5%BC%80%E5%8F%91%E6%A8%A1%E5%BC%8F/</url>
      
        <content type="html"><![CDATA[<p>四种软件开发模式。</p><span id="more"></span><h2 id="瀑布开发模式"><a class="markdownIt-Anchor" href="#瀑布开发模式"></a> 瀑布开发模式</h2><p>一种传统的软件开发模式。</p><p>包括五个顺序阶段：需求，设计，实现，测试，维护。</p><p>如果软件项目对稳定要求比较高，则可以选择瀑布开发模式。但是该模式开发事件久，成本高。</p><h2 id="快速应用开发模式"><a class="markdownIt-Anchor" href="#快速应用开发模式"></a> 快速应用开发模式</h2><p>比较精简的软件开发流程，可以低成本生产高质量的软件。需要开发人员快速适应不断变化的市场需求。</p><p>包括四个阶段：需求设计，用户设计，构建，切换。重复用户设计和施工阶段，直到满足用户所有要求。</p><p>适合中小型软件开发项目，需要开发人员具有丰富的开发经验，非常了解用户的核心需求。</p><h2 id="敏捷开发模式"><a class="markdownIt-Anchor" href="#敏捷开发模式"></a> 敏捷开发模式</h2><p>拥有多种不同的形式，包括：Scrum，Crystal，XP 和 FDD 等。</p><p>通过迭代开发，互动沟通等方法来降低软件开发过程中的风险，通过早期发现和修复缺陷来提高开发的效率，比较依赖用户的信息反馈。</p><p>适用于小规模的软件开发公司。</p><h2 id="devops部署模式"><a class="markdownIt-Anchor" href="#devops部署模式"></a> DevOps部署模式</h2><p>增强了软件开发部门之间的协作（开发、测试、运营等）。着重于改进软件的上市时间，降低新版本的故障率，缩短 BUG 修复时间，优先考虑最小的中断以及最大的可靠性等。</p><p>对提高客户满意度，提高产品质量，提高员工的生产力和效率得益等方面非常有用。</p><p><strong>参考:</strong><br />1.<a href="https://blog.csdn.net/qq_19970313/article/details/124783524">https://blog.csdn.net/qq_19970313/article/details/124783524</a></p>]]></content>
      
      
      <categories>
          
          <category> architect </category>
          
          <category> software design </category>
          
      </categories>
      
      
        <tags>
            
            <tag> architect </tag>
            
            <tag> software design </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>自我安慰 - 吧</title>
      <link href="/2022/10/13/%E8%87%AA%E6%88%91%E5%AE%89%E6%85%B0-%E5%90%A7/"/>
      <url>/2022/10/13/%E8%87%AA%E6%88%91%E5%AE%89%E6%85%B0-%E5%90%A7/</url>
      
        <content type="html"><![CDATA[<p>去 TMD 条条框框吧，洒脱一点！</p><span id="more"></span><p>要学会控制自己的关注点，在研究讨论的过程中，只考虑别人的文字，不考虑别人的情绪，不考虑情绪的目的是为了不被情绪所影响，也就是不要被别人的挤眉弄眼或者反问的语气所影响，可以把别人带有情绪的语言用自己的陈述句复述一遍，去思考其中的道理，多问自己几遍内容。</p><p>如果要解决“无法给老师讲清楚 idea ”的问题，就要多和老师讨论。这个问题的关键不在于我们讲的多么清楚、细致，而在于是否讲到了老师所关注的方向和粒度上。因此，必须要经常和老师交流，才能更加清晰的明白他们的关注点的维度，不能只靠自己闭门造车，要对全局范围内的各个对象有清楚的把握。</p>]]></content>
      
      
      
        <tags>
            
            <tag> fuck life </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>NAT简介</title>
      <link href="/2022/10/12/NAT%E7%AE%80%E4%BB%8B/"/>
      <url>/2022/10/12/NAT%E7%AE%80%E4%BB%8B/</url>
      
        <content type="html"><![CDATA[<p>NAT 的相关知识</p><span id="more"></span><p>NAT（Network Address Translator，网络地址转换）是用于在本地网络中使用私有地址，在连接互联网时转而使用全局 IP 地址的技术。NAT实际上是为解决IPv4地址短缺而开发的技术。</p><p>即私有地址转换为公有地址（加端口）。</p><p>NAT 的特点：</p><ul><li>NAT 存在于私网到公网的路由出口位置，双向流量都必须经过 NAT 网关。</li><li>网络访问只能由私网向公网发起，公网无法访问私网。</li><li>NAT 需要维护一张关联表，保存会话信息，从而实现翻译功能。</li></ul><p>NAT 的类型：</p><ul><li>静态 NAT。一对一绑定转换。</li><li>动态 NAT。从空闲的地址池中选择一个进行转换。</li><li>端口复用 NATP。当私网内主机数量太多时，面临端口数量不足从而无法翻译的问题，此时，需要根据传输层或者其他上层协议去区分不同的会话，比如 TCP、UDP 端口号，从而实现公网 ip 的复用和解复用，</li></ul><p>NAT 的缺点：</p><ul><li>一旦 NAT 路由器重启，所有的 TCP 连接都会被重置断开。</li><li>关联表的生成和转换操作会产生一定的开销。</li><li>无法从 NAT 外部向内部服务器建立连接。</li></ul><p>参考：</p><ul><li><a href="https://blog.csdn.net/yingshuanglu2564/article/details/111830114">详解什么是NAT？</a></li></ul>]]></content>
      
      
      <categories>
          
          <category> network </category>
          
          <category> nat </category>
          
      </categories>
      
      
        <tags>
            
            <tag> network </tag>
            
            <tag> nat </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>局域网间消息传递</title>
      <link href="/2022/10/12/%E5%B1%80%E5%9F%9F%E7%BD%91%E9%97%B4%E6%B6%88%E6%81%AF%E4%BC%A0%E9%80%92/"/>
      <url>/2022/10/12/%E5%B1%80%E5%9F%9F%E7%BD%91%E9%97%B4%E6%B6%88%E6%81%AF%E4%BC%A0%E9%80%92/</url>
      
        <content type="html"><![CDATA[<p>局域网 IP 之间如何传递消息？</p><span id="more"></span><p>假设：</p><ul><li>腾讯服务器IP为118.89.97.19（当然实际会用域名，但经过DNS解析后还是IP，并且会又很多集群和部署在不同城市的机房）</li><li>家里的路由器拨号后有公网IP，不像校园网，分配的还是内网IP；</li><li>两个路由器公网IP分别为101.45.251.154、218.80.220.124；</li><li>登录时成功时，小明在自己电脑查看建立的TCP连接：<br />192.168.1.101:2099 118.89.97.19:80 establish</li><li>这只是一个假象，在腾讯服务器端查看到的连接是（端上IP和端口从192.168.1.101:2099变换成了路由器公网IP101.45.251.154和10000）：<br />118.89.97.19:80 101.45.251.154:10000 establish</li><li>同理小明女朋友登录后也是同样的情况。<br />源IP 192.168.1.101|源端口2099|收件人、消息内容|目标IP 118.89.97.19|目标端口80</li></ul><p>数据包到达家里路由器，源IP地址会被NAT（了解更多请自己百度）更换成101.45.251.154，端口会被换成10000，然后经过层层转发到腾讯服务器，会得到“收件人、消息内容”的数据，然后入库并根据收件人将图片的数据，服务器检测到女朋友的账号又新消息到达时，从数据库读取消息，写入小明女朋友手机跟腾讯服务器之间的长连接通道，这时数据报文格式为：</p><p>源IP 118.89.97.19|源端口80|图片消息内容|目标IP 218.80.220.124|目标端口31214（女朋友手机聊天软件跟服务器通信时创建的端口）</p><p>消息同样经过层层转发到达女朋友家里的路由器，路由器根据端口31214，查到这个是需要发到女朋友手机上的，于是NAT把目标IP换成192.168.1.101，端口换成8888，于是手机收到消息并分发给聊天软件。</p><p>参考：</p><ul><li><a href="https://www.zhihu.com/question/64560386/answer/225743007">联网的软件是如何实现将消息从公网发送到内网的？</a></li></ul>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>软件设计流程</title>
      <link href="/2022/10/12/%E8%BD%AF%E4%BB%B6%E8%AE%BE%E8%AE%A1%E6%B5%81%E7%A8%8B/"/>
      <url>/2022/10/12/%E8%BD%AF%E4%BB%B6%E8%AE%BE%E8%AE%A1%E6%B5%81%E7%A8%8B/</url>
      
        <content type="html"><![CDATA[<p>软件开发的五个阶段。</p><span id="more"></span><p>分析阶段， 设计阶段， 开发阶段， 测试阶段， 维护阶段。</p><h2 id="1-分析阶段"><a class="markdownIt-Anchor" href="#1-分析阶段"></a> 1. 分析阶段</h2><p>进行需求调研，提炼用户需求，建立完整的分析模式。</p><h2 id="2-设计阶段"><a class="markdownIt-Anchor" href="#2-设计阶段"></a> 2. 设计阶段</h2><p>主要分为：概要设计，详细设计。</p><h3 id="概要设计"><a class="markdownIt-Anchor" href="#概要设计"></a> 概要设计</h3><p>依照结构化设计方法进行设计。按照问题域，将软件逐级细化，分解为<strong>不必再分解的模块</strong>，每个模块完成一定的功能。模块，和子程序或者函数是对应的。</p><p>设计者会大致考虑模块的内部实现，但不用太纠结，聚焦在：确定功能，划分模块，定义调用关系。</p><p>调用关系（接口和参数）非常重要，必须在该阶段确定下来。</p><p>一般不会一次性到位，需要反复迭代调整。</p><p>需要完成的设计内容：</p><ul><li>数据字典。</li><li>数据流图。</li><li>结构图。</li><li>文字说明。</li></ul><h3 id="详细设计"><a class="markdownIt-Anchor" href="#详细设计"></a> 详细设计</h3><p>概要设计结束之后，针对各个模块，其详细设计可以并行执行。</p><p>根据概要设计的模块分解，设计每个模块内的算法、流程，描述模块内的具体功能。</p><p>如果详细设计的过程中有结构调整的必要，必须返还到概要设计阶段进行调整。</p><p>详细设计应该足够细致，能够根据该设计进行编码。</p><p>需要完成的设计内容：</p><ul><li>伪代码。</li><li>流程图。</li><li>PAD图。</li></ul><h2 id="3-开发阶段"><a class="markdownIt-Anchor" href="#3-开发阶段"></a> 3. 开发阶段</h2><p>各个模块根据详细设计进行编码。</p><p>开发过程中，先实现核心代码 demo，确定可以运行后，在模块中进行实现。</p><p>多打日志，能清晰看到各个子过程的中间输出。</p><p>做好注释，秉持着先注释后代码的原则，可以不写代码，但是注释必须要有，不只是诠释当前代码的作用，还要有 TODO BUG 等辅助信息。</p><p>每个功能函数在开发的过程中要为方便单元测试而进行设计。</p><p>善于运用 git 进行代码审核，每周都要进行代码审核，互相了解各模块间的开发进度和开发方式，及时调整不协调的环节。</p><h2 id="4-测试阶段"><a class="markdownIt-Anchor" href="#4-测试阶段"></a> 4. 测试阶段</h2><p>需要对程序进行单元、组装、系统三阶段的测试。</p><h2 id="5-维护阶段"><a class="markdownIt-Anchor" href="#5-维护阶段"></a> 5. 维护阶段</h2><p>软件研发完成并交付使用后，需要做好软件维护工作。</p><hr /><h2 id="参考"><a class="markdownIt-Anchor" href="#参考"></a> 参考:</h2><ol><li><a href="https://36kr.com/p/1508223783276551">软件开发流程五个阶段</a></li></ol>]]></content>
      
      
      <categories>
          
          <category> architect </category>
          
          <category> software design </category>
          
      </categories>
      
      
        <tags>
            
            <tag> architect </tag>
            
            <tag> software design </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>了解云原生</title>
      <link href="/2022/10/09/%E4%BA%86%E8%A7%A3%E4%BA%91%E5%8E%9F%E7%94%9F/"/>
      <url>/2022/10/09/%E4%BA%86%E8%A7%A3%E4%BA%91%E5%8E%9F%E7%94%9F/</url>
      
        <content type="html"><![CDATA[<p>什么是云原生？要解决什么关键问题？</p><span id="more"></span><p>技术的变革，一定是思想先行。</p><p>Pivotal公司的Matt Stine于2013年首次提出云原生（CloudNative）的概念。</p><p>云原生是一种构建和运行应用程序的方法，是一套技术体系和方法论。</p><p>云原生（CloudNative）是一个组合词，Cloud+Native。<br />Cloud表示应用程序位于云中，而不是传统的数据中心；<br />Native表示应用程序从设计之初即考虑到云的环境，原生为云而设计，在云上以最佳姿势运行，<strong>充分利用和发挥云平台的弹性+分布式优势</strong>。</p><p>符合云原生架构的应用程序应该是：</p><ul><li>采用开源堆栈（K8S+Docker）进行容器化，</li><li>基于微服务架构提高灵活性和可维护性，</li><li>借助敏捷方法、DevOps支持持续迭代和运维自动化，</li><li>利用云平台设施实现弹性伸缩、动态调度、优化资源利用率</li></ul><p>云原生的四个要素：</p><ul><li><strong>微服务</strong>。几乎每个云原生的定义都包含微服务，跟微服务相对的是单体应用，微服务有理论基础，那就是康威定律。</li><li><strong>容器化</strong>。Docker 和 K8S(容器编排系统)。</li><li><strong>DevOps</strong>。Dev+Ops，就是开发和运维合体。</li><li><strong>持续交付</strong>。不误时开发，不停机更新，小步快跑，反传统瀑布式开发模型</li></ul><p>云计算是云原生的基础。</p><p>随着<strong>虚拟化技术的成熟和分布式框架的普及</strong>，在容器技术、可持续交付、编排系统等开源社区的推动下，以及微服务等开发理念的带动下，应用上云已经是不可逆转的趋势。</p><p>云计算三层：基础设施即服务(IaaS)、平台即服务(PaaS)、软件即服务(SaaS)。</p><p>真正的云化不仅仅是基础设施和平台的变化，应用也需要做出改变，摈弃传统的土方法，在<strong>架构设计、开发方式、部署维护等各个阶段和方面</strong>都基于云的特点，重新设计，从而建设全新的云化的应用，即云原生应用。</p><p>云的特点：</p><ul><li>编程语言。由传统的 c/c++、java 转换为<strong>以网络为中心</strong>的 go、nodejs 语言。</li><li>不停机更新。传统应用可能需要停机更新，但是<strong>云支持频繁变更</strong>，持续交付，蓝绿部署。</li><li>弹性资源。传统应用需要冗余资源以抵抗流量高峰，而云原生应用<strong>利用云的弹性自动伸缩</strong>，通过共享降本增效。</li><li>网络资源。传统应用对网络资源，比如ip、端口等有依赖，甚至是硬编码，而云原生应用对网络和存储都没有这种限制</li><li>运维。传统应用通常人肉部署手工运维，而云原生应用这一切都是<strong>自动化</strong>的。</li><li>系统环境。传统应用通常依赖系统环境，而云原生应用不会硬连接到任何系统环境，而是<strong>依赖抽象的基础架构</strong>，从而获得良好移植性</li><li>微服务。基于微服务架构的云原生应用，纵向划分服务，模块化更合理。</li></ul><p>软件设计有两个关键目标：<strong>高内聚、低耦合</strong>。</p><p>纵观近二十年的科技互联网发展历程，<strong>大的趋势是技术下沉</strong>，<br />特别是近些年，随着云计算的发展和普及，基础设施越来越厚实，<strong>业务开发变得越来越容易，也越来越没有技术含量</strong>，<br />而之前困扰小团队的性能、负载、安全性、扩展性问题都不复存在。</p><p>虽然不可否认技术的重要性在降低，但也还不至于那么悲观。<br />遥想PC时代，当VB、Delphi、MFC出现的时候，也有类似论调，所见即所得，点点鼠标，就可以开发PC桌面程序，是不是很高端？<br />那时候码农的担心相比现在恐怕是只多不少吧，<br />但后来随着互联网兴起，出现了后端开发这个工种，<br />码农很快找到了新的战场，网络、分布式、数据库、海量服务、容灾防错，<br />于是又玩出一堆新花样。</p><p>如果说PC时代的基础设施是控件库，互联网时代的基础实施是云，那AI时代基础设施是什么？又会有什么高端玩法？</p><p><a href="https://juejin.cn/post/6844904197859590151">原文链接</a></p>]]></content>
      
      
      <categories>
          
          <category> 云计算 </category>
          
          <category> 云原生 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 云原生 </tag>
            
            <tag> 云计算 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>如何成为一名架构师</title>
      <link href="/2022/10/08/%E5%A6%82%E4%BD%95%E6%88%90%E4%B8%BA%E4%B8%80%E5%90%8D%E6%9E%B6%E6%9E%84%E5%B8%88/"/>
      <url>/2022/10/08/%E5%A6%82%E4%BD%95%E6%88%90%E4%B8%BA%E4%B8%80%E5%90%8D%E6%9E%B6%E6%9E%84%E5%B8%88/</url>
      
        <content type="html"><![CDATA[<p>在成为一名架构师的道路上，所见所学所得。</p><span id="more"></span><p>对于一名架构师而言，写代码是最不重要的事情，摆在第一位的应该是设计。<br />但是“设计”并不是单纯的天马行空地去描绘一个系统，<br />需要对主流的设计模式有深入的理解，需要了解主流技术的优缺点以及所适应的场景，更重要的是，能够满足用户的需求。</p><p>设计模式，主流技术的特性，这些都是内功，<br />外功则是设计图的展现能力，能够将想法通过很好的形式展现给用户并使之感受到自己的需求被很好的满足的能力。<br />这就要求会使用主流的设计软件和设计图的绘制方式，如时序图、流程图等等。</p>]]></content>
      
      
      <categories>
          
          <category> dao </category>
          
          <category> architect </category>
          
      </categories>
      
      
        <tags>
            
            <tag> architect </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>xshell破解版</title>
      <link href="/2020/10/02/xshell%E7%A0%B4%E8%A7%A3%E7%89%88/"/>
      <url>/2020/10/02/xshell%E7%A0%B4%E8%A7%A3%E7%89%88/</url>
      
        <content type="html"><![CDATA[<p>xshell 破解版的一些东西（文件，缺失ddl等）</p><span id="more"></span><h2 id="破解版"><a class="markdownIt-Anchor" href="#破解版"></a> 破解版</h2><p>在百度云里，<code>软件/xshell6</code></p><h2 id="缺失ddl"><a class="markdownIt-Anchor" href="#缺失ddl"></a> 缺失ddl</h2><p>下载地址: <a href="!https://www.microsoft.com/zh-CN/download/details.aspx?id=30679">https://www.microsoft.com/zh-CN/download/details.aspx?id=30679</a></p><p>对于64位的机器，一定要下载把32位和64位的安装包都下载下来安装</p>]]></content>
      
      
      <categories>
          
          <category> xshell </category>
          
      </categories>
      
      
        <tags>
            
            <tag> xshell </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>ubuntu更新下载源</title>
      <link href="/2020/10/02/ubuntu%E6%9B%B4%E6%96%B0%E4%B8%8B%E8%BD%BD%E6%BA%90/"/>
      <url>/2020/10/02/ubuntu%E6%9B%B4%E6%96%B0%E4%B8%8B%E8%BD%BD%E6%BA%90/</url>
      
        <content type="html"><![CDATA[<p>更新ubuntu的apt下载源</p><span id="more"></span><p>在文件 <code>/etc/apt/sources.list</code> 开头添加源（见末尾）。</p><p>然后执行以下操作：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">sudo apt update</span><br><span class="line">sudo apt upgrade</span><br><span class="line">sudo apt-get install build-essential</span><br></pre></td></tr></table></figure><h2 id="aliyun下载源"><a class="markdownIt-Anchor" href="#aliyun下载源"></a> aliyun下载源</h2><p>不同的ubuntu版本，下载源也不相同，不能用一套。</p><h3 id="ubuntu-1404"><a class="markdownIt-Anchor" href="#ubuntu-1404"></a> ubuntu 14.04</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">deb https://mirrors.aliyun.com/ubuntu/ trusty main restricted universe multiverse</span><br><span class="line">deb-src https://mirrors.aliyun.com/ubuntu/ trusty main restricted universe multiverse</span><br><span class="line">deb https://mirrors.aliyun.com/ubuntu/ trusty-security main restricted universe multiverse</span><br><span class="line">deb-src https://mirrors.aliyun.com/ubuntu/ trusty-security main restricted universe multiverse</span><br><span class="line"></span><br><span class="line">deb https://mirrors.aliyun.com/ubuntu/ trusty-updates main restricted universe multiverse</span><br><span class="line">deb-src https://mirrors.aliyun.com/ubuntu/ trusty-updates main restricted universe multiverse</span><br><span class="line"></span><br><span class="line">deb https://mirrors.aliyun.com/ubuntu/ trusty-backports main restricted universe multiverse</span><br><span class="line">deb-src https://mirrors.aliyun.com/ubuntu/ trusty-backports main restricted universe multiverse</span><br></pre></td></tr></table></figure><h3 id="ubuntu-1604"><a class="markdownIt-Anchor" href="#ubuntu-1604"></a> ubuntu 16.04</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">deb http://mirrors.aliyun.com/ubuntu/ xenial main</span><br><span class="line">deb-src http://mirrors.aliyun.com/ubuntu/ xenial main</span><br><span class="line"></span><br><span class="line">deb http://mirrors.aliyun.com/ubuntu/ xenial-updates main</span><br><span class="line">deb-src http://mirrors.aliyun.com/ubuntu/ xenial-updates main</span><br><span class="line"></span><br><span class="line">deb http://mirrors.aliyun.com/ubuntu/ xenial universe</span><br><span class="line">deb-src http://mirrors.aliyun.com/ubuntu/ xenial universe</span><br><span class="line">deb http://mirrors.aliyun.com/ubuntu/ xenial-updates universe</span><br><span class="line">deb-src http://mirrors.aliyun.com/ubuntu/ xenial-updates universe</span><br><span class="line"></span><br><span class="line">deb http://mirrors.aliyun.com/ubuntu/ xenial-security main</span><br><span class="line">deb-src http://mirrors.aliyun.com/ubuntu/ xenial-security main</span><br><span class="line">deb http://mirrors.aliyun.com/ubuntu/ xenial-security universe</span><br><span class="line">deb-src http://mirrors.aliyun.com/ubuntu/ xenial-security universe</span><br></pre></td></tr></table></figure><h3 id="ubuntu-1804"><a class="markdownIt-Anchor" href="#ubuntu-1804"></a> ubuntu 18.04</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">deb http://mirrors.aliyun.com/ubuntu/ bionic main restricted universe multiverse</span><br><span class="line">deb-src http://mirrors.aliyun.com/ubuntu/ bionic main restricted universe multiverse</span><br><span class="line"></span><br><span class="line">deb http://mirrors.aliyun.com/ubuntu/ bionic-security main restricted universe multiverse</span><br><span class="line">deb-src http://mirrors.aliyun.com/ubuntu/ bionic-security main restricted universe multiverse</span><br><span class="line"></span><br><span class="line">deb http://mirrors.aliyun.com/ubuntu/ bionic-updates main restricted universe multiverse</span><br><span class="line">deb-src http://mirrors.aliyun.com/ubuntu/ bionic-updates main restricted universe multiverse</span><br><span class="line"></span><br><span class="line">deb http://mirrors.aliyun.com/ubuntu/ bionic-proposed main restricted universe multiverse</span><br><span class="line">deb-src http://mirrors.aliyun.com/ubuntu/ bionic-proposed main restricted universe multiverse</span><br><span class="line"></span><br><span class="line">deb http://mirrors.aliyun.com/ubuntu/ bionic-backports main restricted universe multiverse</span><br><span class="line">deb-src http://mirrors.aliyun.com/ubuntu/ bionic-backports main restricted universe multiverse</span><br></pre></td></tr></table></figure><h3 id="ubuntu-2004"><a class="markdownIt-Anchor" href="#ubuntu-2004"></a> ubuntu 20.04</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">deb http://mirrors.aliyun.com/ubuntu/ focal main restricted universe multiverse</span><br><span class="line">deb-src http://mirrors.aliyun.com/ubuntu/ focal main restricted universe multiverse</span><br><span class="line"></span><br><span class="line">deb http://mirrors.aliyun.com/ubuntu/ focal-security main restricted universe multiverse</span><br><span class="line">deb-src http://mirrors.aliyun.com/ubuntu/ focal-security main restricted universe multiverse</span><br><span class="line"></span><br><span class="line">deb http://mirrors.aliyun.com/ubuntu/ focal-updates main restricted universe multiverse</span><br><span class="line">deb-src http://mirrors.aliyun.com/ubuntu/ focal-updates main restricted universe multiverse</span><br><span class="line"></span><br><span class="line">deb http://mirrors.aliyun.com/ubuntu/ focal-proposed main restricted universe multiverse</span><br><span class="line">deb-src http://mirrors.aliyun.com/ubuntu/ focal-proposed main restricted universe multiverse</span><br><span class="line"></span><br><span class="line">deb http://mirrors.aliyun.com/ubuntu/ focal-backports main restricted universe multiverse</span><br><span class="line">deb-src http://mirrors.aliyun.com/ubuntu/ focal-backports main restricted universe multiverse</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> linux </category>
          
      </categories>
      
      
        <tags>
            
            <tag> linux </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>linux查看系统配置</title>
      <link href="/2020/08/17/linux%E6%9F%A5%E7%9C%8B%E7%B3%BB%E7%BB%9F%E9%85%8D%E7%BD%AE/"/>
      <url>/2020/08/17/linux%E6%9F%A5%E7%9C%8B%E7%B3%BB%E7%BB%9F%E9%85%8D%E7%BD%AE/</url>
      
        <content type="html"><![CDATA[<p>从命令行查看系统配置</p><span id="more"></span><h2 id="ubuntu"><a class="markdownIt-Anchor" href="#ubuntu"></a> Ubuntu</h2><p>命令： lshw</p><p>linux查看设备命令</p><p>系统</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">uname -a               # 查看内核/操作系统/CPU信息</span><br><span class="line">head -n 1 /etc/issue   # 查看操作系统版本 </span><br><span class="line">cat /proc/cpuinfo      # 查看CPU信息</span><br><span class="line">hostname               # 查看计算机名 </span><br><span class="line">lspci -tv              # 列出所有PCI设备</span><br><span class="line">lsusb -tv              # 列出所有USB设备 </span><br><span class="line">lsmod                  # 列出加载的内核模块</span><br><span class="line">env                    # 查看环境变量</span><br></pre></td></tr></table></figure><p>资源</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">free -m                # 查看内存使用量和交换区使用量 </span><br><span class="line">df -h                  # 查看各分区使用情况 </span><br><span class="line">du -sh &lt;目录名&gt;        # 查看指定目录的大小 </span><br><span class="line">grep MemTotal /proc/meminfo   # 查看内存总量</span><br><span class="line">grep MemFree /proc/meminfo    # 查看空闲内存量</span><br><span class="line">uptime                 # 查看系统运行时间、用户数、负载 </span><br><span class="line">cat /proc/loadavg      # 查看系统负载</span><br></pre></td></tr></table></figure><p>磁盘和分区</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">mount | column -t      # 查看挂接的分区状态 </span><br><span class="line">fdisk -l               # 查看所有分区 </span><br><span class="line">swapon -s              # 查看所有交换分区</span><br><span class="line">hdparm -i /dev/hda     # 查看磁盘参数(仅适用于IDE设备) </span><br><span class="line">dmesg | grep IDE       # 查看启动时IDE设备检测状况</span><br></pre></td></tr></table></figure><p>网络</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">ifconfig               # 查看所有网络接口的属性</span><br><span class="line">iptables -L            # 查看防火墙设置 </span><br><span class="line">route -n               # 查看路由表 </span><br><span class="line">netstat -lntp          # 查看所有监听端口 </span><br><span class="line">netstat -antp          # 查看所有已经建立的连接</span><br><span class="line">netstat -s             # 查看网络统计信息</span><br></pre></td></tr></table></figure><p>进程</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">ps -ef                 # 查看所有进程 </span><br><span class="line">ps -ux                 # 查看当前用户进程</span><br><span class="line">top                    # 实时显示进程状态</span><br></pre></td></tr></table></figure><p>用户</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">w                      # 查看活动用户 </span><br><span class="line">id &lt;用户名&gt;            # 查看指定用户信息 </span><br><span class="line">last                   # 查看用户登录日志 </span><br><span class="line">cut -d: -f1 /etc/passwd   # 查看系统所有用户 </span><br><span class="line">cut -d: -f1 /etc/group    # 查看系统所有组 </span><br><span class="line">crontab -l             # 查看当前用户的计划任务</span><br></pre></td></tr></table></figure><p>服务</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">首先安装chkconfig</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">apt-get install sysv-rc-conf</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash"><span class="built_in">cp</span> /usr/sbin/sysv-rc-conf /usr/sbin/chkconfig</span></span><br><span class="line">chkconfig --list       # 列出所有系统服务 </span><br><span class="line">chkconfig --list | grep on    # 列出所有启动的系统服务</span><br></pre></td></tr></table></figure><p>程序</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">rpm -qa                # 查看所有安装的软件包</span><br></pre></td></tr></table></figure><p>常用命令整理如下：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">dmidecode | grep -i ’serial number’ # 查看主板的序列号</span><br><span class="line">service kudzu start ( or restart) # 用硬件检测程序kuduz探测新硬件</span><br><span class="line">cat /proc/cpuinfo, dmesg | grep -i &#x27;cpu&#x27;, dmidecode -t processor # 查看CPU信息</span><br><span class="line">cat /proc/meminfo, free -m, vmstat # 查看内存信息</span><br><span class="line">cat /proc/pci # 查看板卡信息</span><br><span class="line">lspci |grep -i &#x27;VGA&#x27;, dmesg | grep -i &#x27;VGA&#x27; # 查看显卡/声卡信息</span><br><span class="line">dmesg | grep -i &#x27;eth&#x27;, cat /etc/sysconfig/hwconf | grep -i eth, lspci | grep -i &#x27;eth&#x27; # 查看网卡信息</span><br><span class="line">lspci (相比cat /proc/pci更直观）# 查看PCI信息</span><br><span class="line">cat /proc/bus/usb/devices  # 查看USB设备</span><br><span class="line">cat /proc/bus/input/devices # 查看键盘和鼠标</span><br><span class="line">fdisk &amp; disk – l &amp; df # 查看系统硬盘信息和使用情况</span><br><span class="line">cat /proc/interrupts # 查看各设备的中断请求(IRQ)</span><br><span class="line">uname -a # 查看系统体系结构</span><br><span class="line">isalist –v, isainfo –v, isainfo –b # 查看及启动系统的32位或64位内核模式</span><br></pre></td></tr></table></figure><p>测定当前的显示器刷新频率：/usr/sbin/ffbconfig –rev ?</p><p>查看系统配置：/usr/platform/sun4u/sbin/prtdiag –v</p><p>查看当前系统中已经应用的补丁：showrev –p</p><p>显示当前的运行级别：who –rH</p><p>查看当前的bind版本信息：nslookup –class=chaos –q=txt version.bind</p><p>dmesg | more 查看硬件信息<br />lspci 显示外设信息, 如usb，网卡等信息<br />lsnod 查看已加载的驱动<br />lshw<br />psrinfo -v 查看当前处理器的类型和速度（主频）<br />prtconf -v 打印当前的OBP版本号<br />iostat –E 查看硬盘物理信息(vendor, RPM, Capacity)<br />prtvtoc /dev/rdsk/c0t0d0s 查看磁盘的几何参数和分区信息<br />df –F ufs –o i 显示已经使用和未使用的i-node数目<br />isalist –v</p><p>对于“/proc”中文件可使用文件查看命令浏览其内容，文件中包含系统特定信息：<br />Cpuinfo 主机CPU信息<br />Dma 主机DMA通道信息<br />Filesystems 文件系统信息<br />Interrupts 主机中断信息<br />Ioprots 主机I/O端口号信息<br />Meninfo 主机内存信息<br />Version Linux内存版本信息</p><p>备注： proc – process information pseudo-filesystem 进程信息伪装文件系统</p><p>RPM</p><pre><code>在Linux 操作系统中，有一个系统软件包，它的功能类似于Windows里面的“添加/删除程序”，但是功能又比“添加/删除程序”强很多，它就是 Red Hat Package Manager(简称RPM)。此工具包最先是由Red Hat公司推出的，后来被其他Linux开发商所借用。由于它为Linux使用者省去了很多时间，所以被广泛应用于在Linux下安装、删除软件。下面就 给大家介绍一下它的具体使用方法。</code></pre><p>1.我们得到一个新软件，在安装之前，一般都要先查看一下这个软件包里有什么内容，假设这个文件是：Linux-1.4-6.i368.rpm，我们可以用这条命令查看：</p><p>rpm -qpi Linux-1.4-6.i368.rpm</p><p>系统将会列出这个软件包的详细资料，包括含有多少个文件、各文件名称、文件大小、创建时间、编译日期等信息。</p><p>2.上面列出的所有文件在安装时不一定全部安装，就像Windows下程序的安装方式分为典型、完全、自定义一样，Linux也会让你选择安装方式，此时我们可以用下面这条命令查看软件包将会在系统里安装哪些部分，以方便我们的选择：</p><p>rpm -qpl Linux-1.4-6.i368.rpm</p><ol><li>选择安装方式后，开始安装。我们可以用rpm-ivh Linux-1.4-6.i368.rpm命令安装此软件。在安装过程中，若系统提示此软件已安装过或因其他原因无法继续安装，但若我们确实想执行安装命 令，可以在 -ivh后加一参数“-replacepkgs”：</li></ol><p>rpm -ivh -replacepkgs Linux-1.4-6.i368.rpm</p><p>4.有时我们卸载某个安装过的软件，只需执行rpm-e &lt;文件名&gt;;命令即可。</p><p>5.对低版本软件进行升级是提高其功能的好办法，这样可以省去我们卸载后再安装新软件的麻烦，要升级某个软件，只须执行如下命令：rpm -uvh &lt;文件名&gt;;，注意：此时的文件名必须是要升级软件的升级补丁</p><ol start="6"><li>另外一个安装软件的方法可谓是Linux的独到之处，同时也是RMP强大功能的一个表现：通过FTP站点直接在线安装软件。当找到含有你所需软件的站点并 与此网站连接后，执行下面的命令即可实现在线安装，譬如在线安装Linux-1.4-6.i368.rpm，可以用命令： <a href="http://www.it165.net">www.it165.net</a></li></ol><p>rpm -i <a href="ftp://ftp.pht.com/pub/linux/redhat/">ftp://ftp.pht.com/pub/linux/redhat/</a>…-1.4-6.i368.rpm</p><ol start="7"><li>在我们使用电脑过程中，难免会有误操作，若我们误删了几个文件而影响了系统的性能时，怎样查找到底少了哪些文件呢?RPM软件包提供了一个查找损坏文件的 功能，执行此命令：rpm -Va即可，Linux将为你列出所有损坏的文件。你可以通过Linux的安装光盘进行修复。</li></ol><p>8.Linux系统中文件繁多，在使用过程中，难免会碰到我们不认识的文件，在Windows下我们可以用“开始/查找”菜单快速判断某个文件属于哪个文件夹，在Linux中，下面这条命令行可以帮助我们快速判定某个文件属于哪个软件包：</p><p>rpm -qf &lt;文件名&gt;;</p><p>9.当每个软件包安装在Linux系统后，安装文件都会到RPM数据库中“报到”，所以，我们要查询某个已安装软件的属性时，只需到此数据库中查找即可。注意：此时的查询命令不同于1和8介绍的查询，这种方法只适用于已安装过的软件包！命令格式：</p><p>rpm -参数　&lt;文件名&gt;;</p><p>APT-GET</p><p>apt-get update——在修改/etc/apt/sources.list或者/etc/apt/preferences之后运行该命令。此外您需要定期运行这一命令以确保您的软件包列表是最新的。<br />apt-get install packagename——安装一个新软件包（参见下文的aptitude）<br />apt-get remove packagename——卸载一个已安装的软件包（保留配置文件）<br />apt-get --purge remove packagename——卸载一个已安装的软件包（删除配置文件）<br />dpkg --force-all --purge packagename 有些软件很难卸载，而且还阻止了别的软件的应用，就可以用这个，不过有点冒险。<br />apt-get autoclean apt会把已装或已卸的软件都备份在硬盘上，所以如果需要空间的话，可以让这个命令来删除你已经删掉的软件<br />apt-get clean 这个命令会把安装的软件的备份也删除，不过这样不会影响软件的使用的。<br />apt-get upgrade——更新所有已安装的软件包<br />apt-get dist-upgrade——将系统升级到新版本<br />apt-cache search string——在软件包列表中搜索字符串<br />dpkg -l package-name-pattern——列出所有与模式相匹配的软件包。如果您不知道软件包的全名，您可以使用“<em>package-name-pattern</em>”。<br />aptitude——详细查看已安装或可用的软件包。与apt-get类似，aptitude可以通过命令行方式调用，但仅限于某些命令——最常见的有安装和卸载命令。由于aptitude比apt-get了解更多信息，可以说它更适合用来进行安装和卸载。<br />apt-cache showpkg pkgs——显示软件包信息。<br />apt-cache dumpavail——打印可用软件包列表。<br />apt-cache show pkgs——显示软件包记录，类似于dpkg –print-avail。<br />apt-cache pkgnames——打印软件包列表中所有软件包的名称。<br />dpkg -S file——这个文件属于哪个已安装软件包。<br />dpkg -L package——列出软件包中的所有文件。<br />apt-file search filename——查找包含特定文件的软件包（不一定是已安装的），这些文件的文件名中含有指定的字符串。apt-file是一个独立的软件包。您必须 先使用apt-get install来安装它，然后运行apt-file update。如果apt-file search filename输出的内容太多，您可以尝试使用apt-file search filename | grep -w filename（只显示指定字符串作为完整的单词出现在其中的那些文件名）或者类似方法，例如：apt-file search filename | grep /bin/（只显示位于诸如/bin或/usr/bin这些文件夹中的文件，如果您要查找的是某个特定的执行文件的话，这样做是有帮助的）。</p><p>&lt;span class=“wp_key&lt;a href=” http:=“” www.it165.net=“” edu=“” ebg=“” “=”&quot; target=“_blank”&gt;wordlink_affiliate&quot;&gt;ubuntu查看版本命令<br />方法一：<br />在终端中执行下列指令： cat /etc/issue<br />方法二：<br />使用 lsb_release 命令也可以查看 Ubuntu 的版本号，与方法一相比，内容更为详细。<br />执行指令如下： sudo lsb_release -a<br />方法三：<br />打开“系统监视器”，选择“系统”<br />Ubuntu查看版本命令</p><ol><li>lshw<br />lshw命令显示详细硬件信息。<br />如果要用概要方式显示，可以加上short参数：lshw-short<br />要显示指定硬件信息，加上class(或C)参数：lshw -classmemory</li><li>sysstat<br />监测系统性能及效率的一组工具，这些工具对于我们收集系统性能数据，<br />比如CPU使用率、硬盘和网络吞吐数据。</li><li>lspci -v (相比cat/proc/pci更直观）<br />查看PCI信息，lspci 是读取 hwdata 数据库。</li><li>uname -a<br />查看系统体系结构。</li><li>dmidecode<br />查看硬件信息，包括bios、cpu、内存等信息</li><li>dmesg<br />显示内核缓冲区系统控制信息，如系统启动时的信息会写到/var/log/。<br />注：dmesg 工具并不是专门用来查看硬件芯片组标识的工具，<br />但通过这个工具能让我们知道机器中的硬件的一些参数；因为系统在启动的时候，<br />会写一些硬件相关的日志到 /var/log/message* 或/var/log/boot* 文件中。</li><li>lshal 和hal-device-manager</li><li>查看 /proc<br />对于“/proc”中文件可使用文件查看命令浏览其内容，文件中包含系统特定信息：<br />Cpuinfo 主机CPU信息<br />Dma 主机DMA通道信息<br />Filesystems 文件系统信息<br />Interrupts 主机中断信息<br />Ioprots 主机I/O端口号信息<br />Meninfo 主机内存信息<br />Version Linux内存版本信息<br />查看CPU信息：cat /proc/cpuinfo 查看板卡信息：cat /proc/pci 查看内存信息：cat/proc/meminfo 查看USB设备：cat /proc/bus/usb/devices 查看键盘和鼠标：cat/proc/bus/input/devices 查看各设备的中断请求(IRQ)：cat/proc/interrupts<br />主板信息:<br />sudo demidecode | grep -i ‘serial number’</li></ol><p>CPU信息:<br />cat /proc/cpuinfo<br />dmesg | grep -i ‘cpu’<br />sudo dmidecode -t processor</p><p>硬盘信息:<br />查看分区情况:<br />sudo fdisk -l</p><p>查看大小情况:<br />df -h</p><p>查看使用情况:<br />du -h<br />sudo hdparm -I /dev/sda<br />dmesg | grep sda</p><p>内存信息:<br />cat /proc/meminfo<br />dmesg | grep mem<br />free -m<br />vmstat<br />sudo dmidecode | grep -i mem</p><p>网卡信息:<br />dmesg | grep -i ‘eth’<br />lspci | grep -i ‘eth’</p><p>ethtool -i eht0<br />ethhool -k eth0<br />ethtool -g eth0</p><p>查看鼠标和键盘:<br />cat /proc/bus/input/devices</p><p>查看各设备的中断请求(IRQ):<br />cat /proc/interrupts</p><p>显卡信息:<br />lspci | grep -i ‘VGA’<br />dmesg | grep -i ‘VGA’</p><p>声卡信息:<br />查看声卡型号:<br />lspci | grep -i audio</p><p>查看型号ac97的声卡驱动模块:<br />modprobe -l | grep ac97</p><p>查看声卡信息:<br />cat /proc/asound/cards</p><p>查看alsa-utils本:<br />alsactl -v</p><p>查看内核alsa版本:<br />cat /proc/asound/version</p><p>声卡信息:<br />aplay -l</p><p>硬件信息之声卡:<br />sudo lshw -C sound</p><p>模块状态之声音:<br />lsmod | grep -i snd</p><p>alsa音频配置:<br />alsamixer</p><p>其他命令:<br />dmesg<br />lspci<br />mpstat(先安装sysstat: sudo spt-get install sysstat)</p><p><a href="https://blog.csdn.net/chuanyu/article/details/46611793">参考链接</a></p>]]></content>
      
      
      <categories>
          
          <category> linux </category>
          
          <category> system </category>
          
      </categories>
      
      
        <tags>
            
            <tag> linux </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>linux修改时区</title>
      <link href="/2020/08/17/linux%E4%BF%AE%E6%94%B9%E6%97%B6%E5%8C%BA/"/>
      <url>/2020/08/17/linux%E4%BF%AE%E6%94%B9%E6%97%B6%E5%8C%BA/</url>
      
        <content type="html"><![CDATA[<p>在Linux系统中修改时区。</p><span id="more"></span><h2 id="ubuntu"><a class="markdownIt-Anchor" href="#ubuntu"></a> Ubuntu</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">date -R # 查看时区，结尾+8000是中国北京时区</span><br></pre></td></tr></table></figure><h3 id="tzselect"><a class="markdownIt-Anchor" href="#tzselect"></a> tzselect</h3><p>修改时区使用 <code>tzselect</code> 命令。</p><p>修改完之后，执行如下命令复制文件。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cp /usr/share/zoneinfo/Asia/Shanghai  /etc/localtime</span><br></pre></td></tr></table></figure><h3 id="timedatectl"><a class="markdownIt-Anchor" href="#timedatectl"></a> timedatectl</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">timedatectl set-timezone Asia/Shanghai</span><br></pre></td></tr></table></figure><h3 id="修改日期和时间"><a class="markdownIt-Anchor" href="#修改日期和时间"></a> 修改日期和时间</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">sudo date -s MM/DD/YY //修改日期</span><br><span class="line">sudo date -s hh:mm:ss //修改时间</span><br></pre></td></tr></table></figure><p>修改时间以后，修改硬件CMOS的时间</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo hwclock --systohc</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> linux </category>
          
          <category> timezone </category>
          
      </categories>
      
      
        <tags>
            
            <tag> linux </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>linux开启ftp服务</title>
      <link href="/2020/08/16/linux%E5%BC%80%E5%90%AFftp%E6%9C%8D%E5%8A%A1/"/>
      <url>/2020/08/16/linux%E5%BC%80%E5%90%AFftp%E6%9C%8D%E5%8A%A1/</url>
      
        <content type="html"><![CDATA[<p>在linux服务器上开启ftp服务。</p><span id="more"></span><h2 id="ubuntu"><a class="markdownIt-Anchor" href="#ubuntu"></a> Ubuntu</h2><p>使用的软件: vsftpd</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo apt-get install vsftpd</span><br></pre></td></tr></table></figure><p>需要配置的文件: <code>/etc/vsftpd.conf</code></p><p>首先备份一下该文件，然后创建新配置文件，并输入以下内容。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">listen=NO</span><br><span class="line">listen_ipv6=YES</span><br><span class="line">anonymous_enable=NO</span><br><span class="line">local_enable=YES</span><br><span class="line">write_enable=YES</span><br><span class="line">local_umask=022</span><br><span class="line">dirmessage_enable=YES</span><br><span class="line">use_localtime=YES</span><br><span class="line">xferlog_enable=YES</span><br><span class="line">connect_from_port_20=YES</span><br><span class="line">chroot_local_user=YES</span><br><span class="line">secure_chroot_dir=/var/run/vsftpd/empty</span><br><span class="line">pam_service_name=vsftpd</span><br><span class="line">rsa_cert_file=/etc/ssl/certs/ssl-cert-snakeoil.pem</span><br><span class="line">rsa_private_key_file=/etc/ssl/private/ssl-cert-snakeoil.key</span><br><span class="line">ssl_enable=NO</span><br><span class="line">pasv_enable=Yes # 打开被动模式</span><br><span class="line">pasv_min_port=10000 # 被动模式的端口</span><br><span class="line">pasv_max_port=10100 # 被动模式的端口</span><br><span class="line">allow_writeable_chroot=YES # 必须要有</span><br></pre></td></tr></table></figure><p>操作服务</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo service vsftpd start/restart/stop</span><br></pre></td></tr></table></figure><p>使用该机器上的任意帐户登录即可，登录即到自己的用户帐户下。</p><p>关于ftp的两种工作模式：被动模式（PASV方式，passive）和主动模式（PORT方式）。</p><p><strong>必须用被动模式！！！</strong></p><p>FTP是仅基于TCP的服务，不支持UDP。默认情况下FTP协议使用TCP端口中的 20和21这两个端口，一个数据端口和一个命令端口（也可叫做控制端口），也就是20号端口用于传输数据，21号端口用于传输控制信息。但是，是否使用20作为传输数据的端口与FTP使用的传输模式有关，如果采用主动模式，那么数据传输端口就是20；如果采用被动模式，则具体最终使用哪个端口要服务器端和客户端协商决定。这就是主动与被动FTP的最大不同之处。</p><ul><li>命令连接：当FTP客户端需要登陆到FTP服务器上的时候，服务器与客户端需要进行一系列的身份验证过程，这个过程就叫做命令连接。</li><li>数据连接：如果此时客户端需要往FTP服务器上上传或者下载文件的话，就需要在客户端与服务器端再建立一条额外的数据传输连接。</li></ul><ol><li>主动模式。FTP客户端从任意的非特殊的端口（N &gt;1024）连入到FTP服务器的命令端口——21端口。然后客户端在N+1端口监听，并且通过该N+1端口发送PORT命令给FTP服务器，接着服务器会从它自己的数据端口（20）连接到客户端指定的数据端口（N+1）。在主动传输模式下，FTP的数据连接和控制连接的方向是相反的，也就是说：是客户端向服务器建立控制连接，服务器向客户端建立数据连接，其中，客户端的控制连接和数据连接的端口号是大于1024的两个端口号（临时端口），而FTP服务器的数据端口为20，控制端口为21。</br></br>主动方式FTP的主要问题实际上在于客户端。FTP的客户端并没有实际建立一个到服务器数据端口的连接，它只是简单地告诉服务器自己监听的端口号，服务器再回来连接客户端这个指定的端口。<strong>对于客户端的防火墙来说，这是从外部系统建立到内部客户端的连接，这是通常会被阻塞的。</strong></li></ol><ul><li>C:N -&gt; S:21</li><li>connection success</li><li>C open port N+1</li><li>C:N+1 -&gt; CMD: PORT -&gt; S:21</li><li>S:20 -&gt; C:N+1</li></ul><ol start="2"><li>被动模式。在被动方式FTP中，命令连接和数据连接都由客户端发起，只要求服务器端产生一个监听相应端口的进程，这样就可以解决从服务器到客户端的数据端口的入方向连接被防火墙过滤掉的问题。<br /></br></br>当开启一个FTP连接时，客户端随机打开一个大于1024的本地端口N向服务器的21号端口发起连接，同时会开启N+1号端口。然后向服务器提交 PASV命令，通知服务器自己处于被动模式。那么服务器收到命令后就会开启一个任意的非特权端口（P &gt; 1024）监听，并发送PORT P命令给客户端通知自己的数据端口是P。然后客户端通过本地端口N+1连接到服务器的端口P的连接用来传送数据。在被动模式下，FTP的数据连接和控制连接的方向都是一致的，也就是说：是客户端向服务器发起一个用于数据传输的连接，客户端的连接端口是发起这个数据连接请求时使用的端口。客户端的控制连接和数据连接的端口号是大于1024的两个端口号（临时端口），而服务器端的数据端口是临时端口，而不一定是常规的20。</li></ol><ul><li>C:N -&gt; S:21</li><li>connection success</li><li>C open port N+1</li><li>C:N -&gt; CMD: PASV -&gt; S:21</li><li>S open random port P(P&gt;1024)</li><li>S:21 -&gt; port P -&gt; C:N</li><li>C:N+1 -&gt; S:P</li></ul><p><a href="https://www.linuxidc.com/Linux/2018-08/153491.htm">参考链接 - 配置</a></p><p><a href="https://blog.csdn.net/qq_16038125/article/details/72851142">参考链接 - 被动与主动</a></p><p><a href="https://blog.csdn.net/wumenglu1018/article/details/54233826">参考链接 - 被动与主动</a></p><p><a href="https://blog.csdn.net/u010154760/article/details/45458219">参考链接 - 被动与主动</a></p>]]></content>
      
      
      <categories>
          
          <category> linux </category>
          
          <category> ftp </category>
          
      </categories>
      
      
        <tags>
            
            <tag> linux </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>linux配置wifi</title>
      <link href="/2020/08/16/linux%E9%85%8D%E7%BD%AEwifi/"/>
      <url>/2020/08/16/linux%E9%85%8D%E7%BD%AEwifi/</url>
      
        <content type="html"><![CDATA[<p>linux系统中配置wifi上网。</p><span id="more"></span><h2 id="ubuntu"><a class="markdownIt-Anchor" href="#ubuntu"></a> Ubuntu</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">首先安装这俩东西</span></span><br><span class="line">sudo apt-get install wpasupplicant</span><br><span class="line">sudo apt-get install network-manager</span><br></pre></td></tr></table></figure><p>使用 <code>ifconfig</code> 命令查看wifi网卡是否存在，不存在的话，执行下面命令</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">sudo apt-get update   # 尽可能使用Ubuntu的原始软件源</span><br><span class="line">sudo apt install broadcom-sta-dkms</span><br></pre></td></tr></table></figure><p>安装wifi网卡之后，重启电脑，使用 <code>ifconfig</code> 命令查看wifi网卡名称。</p><p>修改文件 <code>/etc/netplan/50-cloud-init.yaml</code> ，如下：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line">network:</span><br><span class="line">    renderer: NetworkManager // 网络管理渲染器</span><br><span class="line">    ethernets:</span><br><span class="line">        enp2s0:</span><br><span class="line">            addresses:</span><br><span class="line">            - 192.168.2.9/24</span><br><span class="line">            dhcp4: false</span><br><span class="line">            gateway4: 192.168.2.1</span><br><span class="line">            nameservers:</span><br><span class="line">                addresses: []</span><br><span class="line">                search: []</span><br><span class="line">    wifis: // 这里是wifi网卡的配置</span><br><span class="line">        wlp3s0:</span><br><span class="line">            addresses:</span><br><span class="line">            - 192.168.2.10/24</span><br><span class="line">            dhcp4: false</span><br><span class="line">            gateway4: 192.168.2.1</span><br><span class="line">            nameservers:</span><br><span class="line">                addresses: []</span><br><span class="line">                search: []</span><br><span class="line">            access-points:</span><br><span class="line">                &quot;无线网络名称&quot;:</span><br><span class="line">                        password: &#x27;无线网络密码&#x27;</span><br><span class="line">        wlp3s1:</span><br><span class="line">            dhcp4: true</span><br><span class="line">            access-points:</span><br><span class="line">                &quot;feixun_458BB5&quot;:  // 第一行是wifi名称</span><br><span class="line">                    password: &quot;987654321&quot;  // 第二行是wifi密码</span><br><span class="line">                &quot;4G_CPE_39E1&quot;:</span><br><span class="line">                    password: &quot;sscz090619&quot;</span><br><span class="line">                &quot;kr&#x27;s samsung&quot;:</span><br><span class="line">                    password: &quot;45880222&quot;            </span><br><span class="line">    version: 2</span><br></pre></td></tr></table></figure><p>修改文件之后，执行如下命令：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">sudo netplan try # Try to apply a new netplan config to running system, with automatic rollback</span><br><span class="line">sudo netplan generate # Generate backend specific configuration files from</span><br><span class="line">sudo netplan apply # Apply current netplan config to running system</span><br></pre></td></tr></table></figure><p><a href="https://www.cnblogs.com/free-ys/p/10162388.html">参考链接-wifi</a></p><p><a href="https://netplan.io/examples/">参考链接-netplan</a></p>]]></content>
      
      
      <categories>
          
          <category> linux </category>
          
          <category> wifi </category>
          
      </categories>
      
      
        <tags>
            
            <tag> linux </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>linux压缩文件</title>
      <link href="/2020/08/16/linux%E5%8E%8B%E7%BC%A9%E6%96%87%E4%BB%B6/"/>
      <url>/2020/08/16/linux%E5%8E%8B%E7%BC%A9%E6%96%87%E4%BB%B6/</url>
      
        <content type="html"><![CDATA[<p>linux中的压缩和解压缩</p><span id="more"></span><table><thead><tr><th>后缀</th><th>压缩</th><th>解压缩</th></tr></thead><tbody><tr><td>.rar</td><td><code>rar a FileName.rar DirName</code></td><td><code>rar x FileName.rar</code></td></tr><tr><td>.zip</td><td><code>zip FileName.zip DirName</code></td><td><code>unzip FileName.zip</code></td></tr><tr><td>.tar.bz</td><td></td><td><code>tar jxvf FileName.tar.bz</code></td></tr><tr><td>.tar.gz &amp; .tgs</td><td><code>tar zcvf FileName.tar.gz DirName</code></td><td><code>tar zxvf FileName.tar.gz</code></td></tr><tr><td>.gz</td><td><code>gzip FileName</code></td><td><code>gzip -d FileName.gz</code></td></tr></tbody></table>]]></content>
      
      
      <categories>
          
          <category> linux </category>
          
          <category> compress </category>
          
      </categories>
      
      
        <tags>
            
            <tag> linux </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>linux挂载U盘</title>
      <link href="/2020/08/16/linux%E6%8C%82%E8%BD%BDU%E7%9B%98/"/>
      <url>/2020/08/16/linux%E6%8C%82%E8%BD%BDU%E7%9B%98/</url>
      
        <content type="html"><![CDATA[<p>在linux服务器上使用命令挂载和卸载U盘</p><span id="more"></span><h2 id="ubuntu"><a class="markdownIt-Anchor" href="#ubuntu"></a> Ubuntu</h2><h3 id="mount"><a class="markdownIt-Anchor" href="#mount"></a> mount</h3><p>命令</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mount [-t vfstype] [-o options] device dir</span><br></pre></td></tr></table></figure><table><thead><tr><th>cmd</th><th>描述</th><th>详细</th></tr></thead><tbody><tr><td>-t vfstype</td><td>指定文件系统的类型，通常不必指定。mount 会自动选择正确的类型。</td><td>常用类型有：光盘或光盘镜像：iso9660;</br>DOS fat16文件系统：msdos;</br>Windows 9x fat32文件系统：vfat;</br>Windows NT ntfs文件系统：ntfs;</br>Mount Windows文件网络共享：smbfs;</br>UNIX(LINUX) 文件网络共享：nfs;</td></tr><tr><td>-o options</td><td>描述设备或档案的挂接方式</td><td>常用的参数有: loop：用来把一个文件当成硬盘分区挂接上系统;</br>ro：采用只读方式挂接设备;</br>rw：采用读写方式挂接设备;</br>iocharset：指定访问文件系统所用字符集;</td></tr><tr><td>device</td><td>要挂接(mount)的设备</td><td>使用<code>fdisk -l</code>来查询</td></tr><tr><td>dir</td><td>设备在系统上的挂接点</td><td></td></tr></tbody></table><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">sudo fdisk -l # 查看硬盘分区情况，根据硬盘大小找到U盘</span><br><span class="line"></span><br><span class="line">mkdir -p /mnt/usb # 创建挂载点，挂载完成后，U盘里面的内容在这里显示</span><br><span class="line"></span><br><span class="line">mount -t vfat /dev/sdd1 /mnt/usb # 把U盘设备 /dev/sdd1 挂载到挂载点上</span><br><span class="line"></span><br><span class="line">mount -t vfat -o iocharset=cp936 /dev/sdd1 /mnt/usb # 如果中文名不显示或者为乱码</span><br></pre></td></tr></table></figure><p><a href="https://www.jb51.net/os/RedHat/1109.html">参考链接</a></p><h3 id="umount"><a class="markdownIt-Anchor" href="#umount"></a> umount</h3><p>命令:</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">umount [-ahnrvV][-t &lt;文件系统类型&gt;][文件系统]</span><br></pre></td></tr></table></figure><table><thead><tr><th>参数</th><th>说明</th><th>详细</th></tr></thead><tbody><tr><td>-r</td><td>若无法成功卸除，则尝试以只读的方式重新挂入文件系统。</td><td></td></tr><tr><td>-v</td><td>执行时显示详细的信息。</td><td></td></tr><tr><td>-l</td><td>执行延迟卸载</td><td>延迟卸载（lazy unmount）会立即卸载目录树里的文件系统，等到设备不再繁忙时才清理所有相关资源</td></tr></tbody></table><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">umount -v /mnt/mymount/      # 通过挂载点卸载 </span><br><span class="line">umount -v /dev/sda1          # 通过设备名卸载 </span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">如果遇到设备繁忙的问题</span></span><br><span class="line">lsof | grep mymount          # 查找mymount分区里打开的文件  </span><br><span class="line">umount -vl /mnt/mymount/     # 执行延迟卸载 </span><br></pre></td></tr></table></figure><p><a href="http://www.linuxso.com/command/umount.html">参考链接</a></p>]]></content>
      
      
      <categories>
          
          <category> linux </category>
          
          <category> mount </category>
          
      </categories>
      
      
        <tags>
            
            <tag> linux </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>linux合盖电源设置</title>
      <link href="/2020/08/16/linux%E5%90%88%E7%9B%96%E7%94%B5%E6%BA%90%E8%AE%BE%E7%BD%AE/"/>
      <url>/2020/08/16/linux%E5%90%88%E7%9B%96%E7%94%B5%E6%BA%90%E8%AE%BE%E7%BD%AE/</url>
      
        <content type="html"><![CDATA[<p>笔记本安装linux服务器关闭盖子不休眠。</p><span id="more"></span><h2 id="ubuntu"><a class="markdownIt-Anchor" href="#ubuntu"></a> Ubuntu</h2><p>配置文件: <code>/etc/systemd/logind.conf</code></p><p>配置说明:</p><ul><li>#HandlePowerKey按下电源键后的行为，默认power off</li><li>#HandleSleepKey 按下挂起键后的行为，默认suspend</li><li>#HandleHibernateKey按下休眠键后的行为，默认hibernate</li><li>#HandleLidSwitch合上笔记本盖后的行为，默认suspend（改为ignore；即合盖不休眠）在原文件中，还要去掉前面的#</li></ul><p>我的做法是，把以上内容全部修改为 <code>ignore</code></p>]]></content>
      
      
      <categories>
          
          <category> linux </category>
          
          <category> power </category>
          
      </categories>
      
      
        <tags>
            
            <tag> linux </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>leetcode0030</title>
      <link href="/2020/08/11/leetcode0030/"/>
      <url>/2020/08/11/leetcode0030/</url>
      
        <content type="html"><![CDATA[<p>leetcode 0030 串联所有单词的子串：滑动窗口</p><span id="more"></span><ol><li>unordered_map&lt;string, int&gt;<ul><li>判断是否存在某个key，unodr_map.find(key) != unodr_map.end()</li></ul></li><li>auto 类型推导<ul><li>遍历vector: for (auto x:words) {}</li></ul></li><li>vector<ul><li>初始化<ul><li>vector<int> f(n, 1);</li><li>vector<int> f(n);</li><li>vector<int> f = {1, 2, 3};</li><li>vector<int> f(v.begin(), v.end());</li><li>vector<int> f; f = vector<int>(n, 10); // 先声明再初始化</li><li>vector<int> f; f.resize(10); // 先声明再初始化</li><li>vector&lt;vector<int>&gt; f(n, vector<int>(n, 10)); // 先声明再初始化</li></ul></li><li>去重<ul><li>#include<set> set<int>s(v.begin(), v.end()); v.assign(s.begin(), s.end());</li></ul></li></ul></li><li>滑动窗口<ul><li>如果当前子串在words中不存在，则将窗口 head 和 tail 指向新的位置，继续匹配。</li><li>如果当前子串在words中存在（可能已经匹配完一个，也可能没有匹配完，因为子串的出现次数超过了words中存在的数量），则将窗口 head 往后移动一个单词长度，继续匹配。</li><li>外部总循环，只需要循环一个单词长度即可，因为只需要以第一个单词长度内的位置作为起始位置，然后后面的循环中会按照上面两步执行</li></ul></li></ol><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function">vector&lt;<span class="type">int</span>&gt; <span class="title">findSubstring</span><span class="params">(string s, vector&lt;string&gt;&amp; words)</span> </span>&#123;</span><br><span class="line">        vector&lt;<span class="type">int</span>&gt; result;</span><br><span class="line">        <span class="type">int</span> ls = s.<span class="built_in">length</span>();</span><br><span class="line">        <span class="keyword">if</span> (!words.<span class="built_in">size</span>() || !ls) <span class="keyword">return</span> result;</span><br><span class="line">        <span class="type">int</span> lw = words[<span class="number">0</span>].<span class="built_in">length</span>();</span><br><span class="line">        unordered_map&lt;string, <span class="type">int</span>&gt; map, tempmap;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">auto</span> &amp;s:words) map[s]++;</span><br><span class="line">        tempmap = map;</span><br><span class="line">        <span class="function">vector&lt;<span class="type">bool</span>&gt; <span class="title">flag</span><span class="params">(ls, <span class="literal">false</span>)</span></span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; lw; i++)&#123;  <span class="comment">// 这里最开始我写的是 ls，结果总是超时，改成 lw ok。</span></span><br><span class="line">            <span class="keyword">if</span>(lw*words.<span class="built_in">size</span>() &gt; ls-i) <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">if</span>(flag[i]) <span class="keyword">continue</span>;</span><br><span class="line">            string word = s.<span class="built_in">substr</span>(i, lw);</span><br><span class="line">            tempmap = map;</span><br><span class="line">            <span class="type">int</span> count = <span class="number">0</span>, j = i, k = i;</span><br><span class="line">            <span class="keyword">while</span> (k+words.<span class="built_in">size</span>()*lw &lt;= ls &amp;&amp; !flag[k])&#123;</span><br><span class="line">                <span class="keyword">while</span> (tempmap[word]&gt;<span class="number">0</span>) &#123;</span><br><span class="line">                    tempmap[word]--;</span><br><span class="line">                    count++;</span><br><span class="line">                    j+=lw;</span><br><span class="line">                    <span class="keyword">if</span> (j &gt; ls) <span class="keyword">break</span>;</span><br><span class="line">                    word = s.<span class="built_in">substr</span>(j, lw);</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">if</span> (count == words.<span class="built_in">size</span>()) &#123;</span><br><span class="line">                    result.<span class="built_in">push_back</span>(k);</span><br><span class="line">                    flag[k] = <span class="literal">true</span>;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">if</span> (tempmap.<span class="built_in">find</span>(word) != tempmap.<span class="built_in">end</span>())&#123;</span><br><span class="line">                    tempmap[s.<span class="built_in">substr</span>(k, lw)]++;</span><br><span class="line">                    count--;</span><br><span class="line">                    k += lw;</span><br><span class="line">                &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                    flag[k] = <span class="literal">true</span>;</span><br><span class="line">                    k = j = j+lw;</span><br><span class="line">                    tempmap = map;</span><br><span class="line">                    word = s.<span class="built_in">substr</span>(k, lw);</span><br><span class="line">                    count = <span class="number">0</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> result;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> leetcode </category>
          
      </categories>
      
      
        <tags>
            
            <tag> leetcode </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>linux server 挂载U盘</title>
      <link href="/2020/08/10/linux-server-%E6%8C%82%E8%BD%BDU%E7%9B%98/"/>
      <url>/2020/08/10/linux-server-%E6%8C%82%E8%BD%BDU%E7%9B%98/</url>
      
        <content type="html"><![CDATA[<span id="more"></span>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>ssh登陆密钥警告</title>
      <link href="/2020/08/09/ssh%E7%99%BB%E9%99%86%E5%AF%86%E9%92%A5%E8%AD%A6%E5%91%8A/"/>
      <url>/2020/08/09/ssh%E7%99%BB%E9%99%86%E5%AF%86%E9%92%A5%E8%AD%A6%E5%91%8A/</url>
      
        <content type="html"><![CDATA[<p>使用ssh时出现警告: <em>WARNING: REMOTE HOST IDENTIFICATION HAS CHANGED!</em></p><p>警告信息中会有公钥文件的位置信息，打开之后，删除掉对应ip和port的条目，再重新ssh</p>]]></content>
      
      
      <categories>
          
          <category> ssh </category>
          
      </categories>
      
      
        <tags>
            
            <tag> ssh </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>linux网络操作</title>
      <link href="/2020/08/04/linux%E7%BD%91%E7%BB%9C%E6%93%8D%E4%BD%9C/"/>
      <url>/2020/08/04/linux%E7%BD%91%E7%BB%9C%E6%93%8D%E4%BD%9C/</url>
      
        <content type="html"><![CDATA[<p>关于 linux 的一些网络操作。</p><span id="more"></span><p>下面是几个常用的命令来查看网络信息</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">ifconfig <span class="comment"># 查看网卡</span></span><br><span class="line"></span><br><span class="line">netstat -rn <span class="comment"># 查看路由表，可以看到网关和子网掩码</span></span><br><span class="line"></span><br><span class="line">arp -n <span class="comment"># 查看近期的网络链接缓存，如果最近有其他ip访问你这台机器，那执行该命令的输出结果中就包含该ip的相关信息</span></span><br><span class="line"></span><br><span class="line">ifquery -a --list <span class="comment"># 列出所有的网卡名称</span></span><br><span class="line"></span><br><span class="line">traceroute IP地址 <span class="comment"># 连接到ip地址，需要经过的路由。</span></span><br></pre></td></tr></table></figure><p>关于Ubuntu桌面版进行网络配置的注意事项:</p><ol><li>因为是桌面版，所以增加了network-manager来执行可视化的网络管理（就是在桌面UI中管理网络配置），配置文件是那个 <code>/etc/NetworkManager/NetworkManager.conf</code>，操作服务是 <code>service network-manager restart</code>；</li><li>同时在命令行中依旧存在着管理网络的方式，配置文件是<code>/etc/network/interfaces</code>，操作服务是<code>service networking retart</code>。</li><li>所以说，如果两个类型的网络管理服务出现了冲突，那么Ubuntu采用的处理方式是，以network-manager的配置为准，在network-manager一直负责网络配置的过程中，修改<code>/etc/network/interfaces</code>是没有意义的，所以如果想使用<code>/etc/network/interfaces</code>的配置，就需要让network-manager摆脱对网络配置的管理（直接stop掉network-manager，或者修改network-manager的配置文件managed子项为false，在下面有详细命令）。</li></ol><p>以下是对网络进行配置的相关操作（适用于ubuntu 16，ubuntu 18）</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">/etc/NetworkManager/NetworkManager.conf <span class="comment"># network-manager服务的配置文件，修改managed子项，从true改为false，可以关闭网络桌面管理工具对网络配置管理</span></span><br><span class="line"><span class="comment"># managed=false</span></span><br><span class="line"></span><br><span class="line">sudo service network-manager restart <span class="comment"># 重启网络桌面管理工具，会发现右上角的网络链接出现了问题。</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 以上两步也可以不做，可以直接关闭 network-manager</span></span><br><span class="line"><span class="comment"># sudo service network-manager stop</span></span><br><span class="line"><span class="comment"># 然后再使用下面的interfaces从命令行配置网络</span></span><br><span class="line"></span><br><span class="line">/etc/network/interfaces <span class="comment"># 网络配置文件</span></span><br><span class="line"><span class="comment"># auto lo</span></span><br><span class="line"><span class="comment"># iface lo inet loopback</span></span><br><span class="line"><span class="comment"># 上面的是文件本身自带的，下面的是自己添加的</span></span><br><span class="line"><span class="comment"># auto ens33</span></span><br><span class="line"><span class="comment"># iface ens33 inet static</span></span><br><span class="line"><span class="comment"># address 192.168.5.133     地址</span></span><br><span class="line"><span class="comment"># netmask 255.255.255.0     子网掩码</span></span><br><span class="line"><span class="comment"># gateway 192.168.5.1       网关</span></span><br><span class="line"></span><br><span class="line">sudo ip addr flush dev 网卡名 <span class="comment"># 刷新ip地址</span></span><br><span class="line"></span><br><span class="line">sudo service networking restart <span class="comment"># 重启所有网卡，看下service文件就是使用的 ifup 命令</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><p><strong>刷新ip地址的时候必须要注意，修改网络配置文件之后或者恢复network-manager接管必须执行这个，否则不会生效，需要重启才能使修改后的网络配置文件生效。</strong></p><p>查看一下<code>networking.service</code>的源码，可以发现本质上<code>networking</code>命令就是调用了<code>if up/down 网卡名</code>。</p><p><img data-src="network-service.jpg" alt="networking.service" /></p>]]></content>
      
      
      <categories>
          
          <category> linux </category>
          
          <category> network </category>
          
      </categories>
      
      
        <tags>
            
            <tag> network </tag>
            
            <tag> linux </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>ubuntu18部署gitlab</title>
      <link href="/2020/08/04/ubuntu18%E9%83%A8%E7%BD%B2gitlab/"/>
      <url>/2020/08/04/ubuntu18%E9%83%A8%E7%BD%B2gitlab/</url>
      
        <content type="html"><![CDATA[<p>部署私人git服务器</p><span id="more"></span><ol><li><p>安装gitlab还挺占存储空间的，主要是 <code>/</code> 目录下的空间，大概要允出 2 个多G的空间。</p></li><li><p>另外一个就是找个网络不错的地方，要下载 800+M 的archives。</p></li><li><p>服务器内存要足够大，大概要8个G左右（之前虚拟机配置了4个G内存，依旧不能运行成功）。</p></li></ol><h2 id="安装"><a class="markdownIt-Anchor" href="#安装"></a> 安装</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">sudo apt-get update</span><br><span class="line">sudo apt-get install -y curl openssh-server ca-certificates</span><br><span class="line">sudo apt-get install -y postfix</span><br><span class="line">curl https://packages.gitlab.com/install/repositories/gitlab/gitlab-ee/script.deb.sh | sudo bash</span><br><span class="line"><span class="built_in">export</span> EXTERNAL_URL=<span class="string">&quot;http://本机IP地址&quot;</span> </span><br><span class="line">sudo apt-get install gitlab-ee</span><br><span class="line"><span class="comment"># 指定版本</span></span><br><span class="line"><span class="comment"># sudo apt-get install gitlab-ee=版本</span></span><br></pre></td></tr></table></figure><blockquote><p>具体版本查看: <a href="!https://packages.gitlab.com/gitlab/gitlab-ee">https://packages.gitlab.com/gitlab/gitlab-ee</a></p></blockquote><p>如果EXTERNAL_URL配置错误，就修改文件 <code>/etc/gitlab/gitlab.rb</code> 中的EXTERNAL_URL，然后执行下面的命令</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">gitlab-ctl reconfigure</span><br></pre></td></tr></table></figure><h2 id="gitlab-ctl基本操作"><a class="markdownIt-Anchor" href="#gitlab-ctl基本操作"></a> gitlab-ctl基本操作</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">gitlab-ctl start/stop/restart/status/reconfigure</span><br></pre></td></tr></table></figure><h2 id="查看gitlab版本"><a class="markdownIt-Anchor" href="#查看gitlab版本"></a> 查看gitlab版本</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">cat</span> /opt/gitlab/embedded/service/gitlab-rails/VERSION</span><br></pre></td></tr></table></figure><h2 id="卸载gitlab"><a class="markdownIt-Anchor" href="#卸载gitlab"></a> 卸载gitlab</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">sudo apt remove gitlab-ee</span><br><span class="line">sudo pkill -f gitlab</span><br><span class="line">sudo <span class="built_in">rm</span> -rf /etc/gitlab</span><br><span class="line">sudo <span class="built_in">rm</span> -rf /var/opt/gitlab</span><br><span class="line">sudo <span class="built_in">rm</span> -rf /opt/gitlab</span><br></pre></td></tr></table></figure><h2 id="迁移服务器内容"><a class="markdownIt-Anchor" href="#迁移服务器内容"></a> 迁移服务器内容</h2><p>直接参考官网链接来弄: <a href="!https://docs.gitlab.com/ee/raketasks/backup_restore.html">https://docs.gitlab.com/ee/raketasks/backup_restore.html</a></p><h2 id="tips"><a class="markdownIt-Anchor" href="#tips"></a> Tips</h2><ol><li>clone的时候，如果使用<code>git@****</code>，那么链接的是服务器的22端口，所以服务器防火墙要开放22端口</li><li>同样是clone的时候，当然不限于clone操作，都会要求密码，所以说需要在你的git账户里添加ssh_key，<code>ssh-keygen -t rsa -b 2048 -C &quot;email@example.com&quot; </code></li></ol>]]></content>
      
      
      <categories>
          
          <category> gitlab </category>
          
      </categories>
      
      
        <tags>
            
            <tag> gitlab </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>leetcode0114</title>
      <link href="/2020/08/02/leetcode0114/"/>
      <url>/2020/08/02/leetcode0114/</url>
      
        <content type="html"><![CDATA[<p>leetcode 0114 心得</p><span id="more"></span><p>自己的做法：先调换顺序，再把右子树搞成链，并获取链尾指针，然后把左子树添加到链尾，再返回新的链尾</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">flatten</span><span class="params">(TreeNode* root)</span></span>;</span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">    <span class="function">TreeNode* <span class="title">deal</span><span class="params">(TreeNode* root)</span></span>;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">Solution::flatten</span><span class="params">(TreeNode* root)</span></span>&#123;</span><br><span class="line">    <span class="keyword">this</span>-&gt;<span class="built_in">deal</span>(root);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function">TreeNode* <span class="title">Solution::deal</span><span class="params">(TreeNode* root)</span></span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (!root) <span class="keyword">return</span> <span class="literal">NULL</span>;</span><br><span class="line">    <span class="comment">// swap left and right</span></span><br><span class="line">    <span class="keyword">if</span> (root-&gt;left)&#123;  <span class="comment">// 如果左边没有子树，那就不需要调整；只有有左子树的时候，才需要和右子树上交换，然后把右子树调整到它的下面去，从而保证顺序顺序</span></span><br><span class="line">        TreeNode *temp = root-&gt;right;</span><br><span class="line">        root-&gt;right = root-&gt;left;</span><br><span class="line">        root-&gt;left = temp;</span><br><span class="line">    &#125;</span><br><span class="line">    TreeNode *righttail = <span class="keyword">this</span>-&gt;<span class="built_in">deal</span>(root-&gt;right);  <span class="comment">// 先处理右子树，搞成一条链，并返回链的末尾，然后把左子树连接到末尾。</span></span><br><span class="line">    <span class="keyword">if</span> (!righttail) <span class="keyword">return</span> root; <span class="comment">// 最终找到的末尾是NULL，所以要返回NULL的父节点。</span></span><br><span class="line">    righttail-&gt;right = root-&gt;left;</span><br><span class="line">    root-&gt;left = <span class="literal">NULL</span>; <span class="comment">// 把左子树连接到右子树链的末尾之后，左子树要置空。</span></span><br><span class="line">    TreeNode *lefttail = <span class="keyword">this</span>-&gt;<span class="built_in">deal</span>(righttail-&gt;right); <span class="comment">//把左子树也搞成一条链。</span></span><br><span class="line">    <span class="keyword">if</span> (!lefttail) <span class="keyword">return</span> righttail; <span class="comment">// 最终找到的末尾是NULL，所以要返回NULL的父节点</span></span><br><span class="line">    <span class="keyword">return</span> lefttail; <span class="comment">// 返回tail节点</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在题解里面看到了更简洁的做法。</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">flatten</span><span class="params">(TreeNode* root)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(!root || (!root-&gt;left &amp;&amp; !root-&gt;right)) <span class="keyword">return</span>; <span class="comment">// 到达叶子节点</span></span><br><span class="line">        <span class="built_in">flatten</span>(root-&gt;left);</span><br><span class="line">        <span class="built_in">flatten</span>(root-&gt;right);</span><br><span class="line">        TreeNode *right = root-&gt;right; <span class="comment">// 先保存原右子树</span></span><br><span class="line">        root-&gt;right = root-&gt;left;  <span class="comment">// 把原左子树移到右边</span></span><br><span class="line">        root-&gt;left = <span class="literal">nullptr</span>; <span class="comment">// 把现左子树置空</span></span><br><span class="line">        TreeNode *cur = root;</span><br><span class="line">        <span class="keyword">while</span>(cur-&gt;right) cur = cur-&gt;right; <span class="comment">// 找到现右子树的末尾</span></span><br><span class="line">        cur-&gt;right = right;  <span class="comment">// 因为左右子树在递归的过程中，都已经成为链，所以只需要简单的添加到现右子树末尾即可。</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>比较了一下两种解法，我的是属于先调换顺序（其实调换顺序这里可以直接把左子树放到右边，右子树放到temp存着，而不用放到），把右子树搞成链，然后把左子树添加到右子树末尾，再把左子树搞成链；而题解里的做法是先把左右子树都搞成链，然后调换顺序，找到右子树的末尾，把左子树拼接上去。</p><p>从题解里面又深入理解了递归的意义：每一部分的递归都是求解子问题，然后对于当前的问题，考虑如何把已经求解成功的子问题拼接在一起，考虑如何处理叶子节点（也就是边界）。</p>]]></content>
      
      
      <categories>
          
          <category> ACM </category>
          
          <category> leetcode </category>
          
      </categories>
      
      
        <tags>
            
            <tag> leetcode </tag>
            
            <tag> ACM </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>python生成器与迭代器</title>
      <link href="/2020/08/01/python%E7%94%9F%E6%88%90%E5%99%A8%E4%B8%8E%E8%BF%AD%E4%BB%A3%E5%99%A8/"/>
      <url>/2020/08/01/python%E7%94%9F%E6%88%90%E5%99%A8%E4%B8%8E%E8%BF%AD%E4%BB%A3%E5%99%A8/</url>
      
        <content type="html"><![CDATA[<p>区分python中生成器与迭代器</p><span id="more"></span><p>可迭代对象(Iterable)不是迭代器(Iterator)。</p><p>生成器(generator)。</p><p>可用于for循环的数据类型:</p><ol><li>for, list, str, dict等</li><li>generator</li></ol><p>统称为 Iterable（可迭代的对象），实现了__iter__()函数</p><p>迭代器既实现了__iter__()，有实现了__next__()的对象被称作迭代器</p><p>把Iterable对象变成Iterator，可以使用iter([1, 2, 3])函数</p><p>yield的典例:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">实现斐波那契数。</span></span><br><span class="line"><span class="string">若想获得generator函数的返回值，必须抛异常，用e.value获取返回值</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">fib</span>(<span class="params"><span class="built_in">max</span></span>):</span><br><span class="line">    n,a,b =<span class="number">0</span>,<span class="number">0</span>,<span class="number">1</span></span><br><span class="line">    <span class="keyword">while</span> n &lt; <span class="built_in">max</span>:</span><br><span class="line">        <span class="keyword">yield</span> b</span><br><span class="line">        a,b =b,a+b</span><br><span class="line">        n = n+<span class="number">1</span></span><br><span class="line">    <span class="keyword">return</span> <span class="string">&#x27;done&#x27;</span></span><br><span class="line">g = fib(<span class="number">6</span>)</span><br><span class="line"><span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        x = <span class="built_in">next</span>(g)</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;generator: &#x27;</span>,x)</span><br><span class="line">    <span class="keyword">except</span> StopIteration <span class="keyword">as</span> e:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;生成器返回值：&quot;</span>,e.value)</span><br><span class="line">        <span class="keyword">break</span></span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">生产者消费者模式。</span></span><br><span class="line"><span class="string">只有调用next()函数的时候，才执行generator函数</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line"><span class="keyword">def</span> <span class="title function_">consumer</span>(<span class="params">name</span>):</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;%s 准备学习啦!&quot;</span> %name)</span><br><span class="line">    <span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">       lesson = <span class="keyword">yield</span></span><br><span class="line"> </span><br><span class="line">       <span class="built_in">print</span>(<span class="string">&quot;开始[%s]了,[%s]老师来讲课了!&quot;</span> %(lesson,name))</span><br><span class="line"> </span><br><span class="line"> </span><br><span class="line"><span class="keyword">def</span> <span class="title function_">producer</span>(<span class="params">name</span>):</span><br><span class="line">    c = consumer(<span class="string">&#x27;A&#x27;</span>)</span><br><span class="line">    c2 = consumer(<span class="string">&#x27;B&#x27;</span>)</span><br><span class="line">    c.__next__()</span><br><span class="line">    c2.__next__()</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;同学们开始上课 了!&quot;</span>)</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">10</span>):</span><br><span class="line">        time.sleep(<span class="number">1</span>)</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;到了两个同学!&quot;</span>)</span><br><span class="line">        c.send(i)</span><br><span class="line">        c2.send(i)</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>restful与传统接口的区别</title>
      <link href="/2020/08/01/restful%E4%B8%8E%E4%BC%A0%E7%BB%9F%E6%8E%A5%E5%8F%A3%E7%9A%84%E5%8C%BA%E5%88%AB/"/>
      <url>/2020/08/01/restful%E4%B8%8E%E4%BC%A0%E7%BB%9F%E6%8E%A5%E5%8F%A3%E7%9A%84%E5%8C%BA%E5%88%AB/</url>
      
        <content type="html"><![CDATA[<p>restful与传统api接口的区别</p><span id="more"></span><p>示例：一个状态数据操作接口</p><p><strong>传统模式：</strong></p><p>api/getstate.aspx - 获取状态信息</p><p>api/updatestate.aspx - 更新状态信息</p><p>api/deletestate.aspx - 删除该状态的数据</p><p><strong>RESTful模式：</strong></p><p>api/state 只需要这一个接口</p><p>GET 方式请求 api/state - 获取该状态的数据</p><p>POST 方式请求 api/state - 更新该状态的数据</p><p>DELETE 方式请求 api/state - 删除该状态的数据</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>linux自定义服务</title>
      <link href="/2020/08/01/linux%E8%87%AA%E5%AE%9A%E4%B9%89%E6%9C%8D%E5%8A%A1/"/>
      <url>/2020/08/01/linux%E8%87%AA%E5%AE%9A%E4%B9%89%E6%9C%8D%E5%8A%A1/</url>
      
        <content type="html"><![CDATA[<p>在linux系统中自定义 service 并设置开机启动。</p><span id="more"></span><blockquote><p><em><strong>Tip:</strong></em> SELinux prevents you from running a system service where the binary is in a user’s home directory, or in your case, the root user’s home directory. To fix the problem, copy the binary to a proper directory such as /usr/local/bin and call it from there.<br /><br/><br /><em><strong>Source</strong>: <a href="https://serverfault.com/questions/957084/failed-at-step-exec-spawning-permission-denied">https://serverfault.com/questions/957084/failed-at-step-exec-spawning-permission-denied</a></em></p></blockquote><p>service 文件存放在 <code>/usr/lib/systemd/system/</code> 文件夹下</p><p>示例</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">[Unit]</span><br><span class="line">Description=Frp Server Service</span><br><span class="line">After=network.target</span><br><span class="line"></span><br><span class="line">[Service]</span><br><span class="line">Type=simple</span><br><span class="line">User=nobody</span><br><span class="line">Restart=on-failure</span><br><span class="line">RestartSec=5s</span><br><span class="line">ExecStart=/usr/bin/frps_start.sh</span><br><span class="line">ExecReload=/usr/bin/frps_reload.sh</span><br><span class="line">ExecStop=/usr/bin/frps_stop.sh</span><br><span class="line"></span><br><span class="line">[Install]</span><br><span class="line">WantedBy=multi-user.target</span><br></pre></td></tr></table></figure><p>关于开机启动</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">systemctl <span class="built_in">enable</span> servicename <span class="comment"># 开机启动</span></span><br><span class="line">systemctl <span class="built_in">disable</span> servicename <span class="comment"># 关闭开机启动</span></span><br><span class="line">systemctl list-units --<span class="built_in">type</span>=service <span class="comment"># 列出已经启动的服务</span></span><br></pre></td></tr></table></figure><p>详细参考: <a href="https://www.cnblogs.com/wutao666/p/9781567.html">https://www.cnblogs.com/wutao666/p/9781567.html</a></p>]]></content>
      
      
      <categories>
          
          <category> linux </category>
          
          <category> service </category>
          
      </categories>
      
      
        <tags>
            
            <tag> linux </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>物理机安装操作系统</title>
      <link href="/2020/08/01/%E7%89%A9%E7%90%86%E6%9C%BA%E5%AE%89%E8%A3%85%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/"/>
      <url>/2020/08/01/%E7%89%A9%E7%90%86%E6%9C%BA%E5%AE%89%E8%A3%85%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/</url>
      
        <content type="html"><![CDATA[<p>在物理机上安装win10和linux(ubuntu, centos)操作系统</p><span id="more"></span><h2 id="linux"><a class="markdownIt-Anchor" href="#linux"></a> linux</h2><p>对于linux系统，使用 <code>ultraIso</code> 烧录到U盘中进行安装，分四个区</p><table><thead><tr><th style="text-align:center">分区</th><th style="text-align:left">大小</th><th style="text-align:left">备注</th></tr></thead><tbody><tr><td style="text-align:center">/</td><td style="text-align:left">/home区的一半吧</td><td style="text-align:left">安装系统软件的地方</td></tr><tr><td style="text-align:center">/boot</td><td style="text-align:left">几百兆就行，我一般用一两个G</td><td style="text-align:left">用于启动</td></tr><tr><td style="text-align:center">/swap</td><td style="text-align:left">和内存一样大</td><td style="text-align:left">内存交换</td></tr><tr><td style="text-align:center">/home</td><td style="text-align:left">剩下的</td><td style="text-align:left">用户分区，存储用户的内容</td></tr></tbody></table><h2 id="win10"><a class="markdownIt-Anchor" href="#win10"></a> win10</h2><p>对于win10系统，微软官方给出了安装工具，<a href="https://www.microsoft.com/zh-cn/software-download/windows10">点击这里</a></p><p>打开开发者工具，打开手机模式，可以看到win10 iso镜像文件的选择项</p><p>使用鲁大师安装驱动。</p><p>比较糟心的是office和visio的安装类型要保持一致。</p><p>使用kms来破解win10和office。</p>]]></content>
      
      
      <categories>
          
          <category> linux </category>
          
          <category> win10 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> linux </tag>
            
            <tag> win10 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>linux开启ssh服务</title>
      <link href="/2020/08/01/linux%E5%BC%80%E5%90%AFssh%E6%9C%8D%E5%8A%A1/"/>
      <url>/2020/08/01/linux%E5%BC%80%E5%90%AFssh%E6%9C%8D%E5%8A%A1/</url>
      
        <content type="html"><![CDATA[<p>在Ubuntu和centos上开启ssh服务的过程</p><span id="more"></span><h2 id="ubuntu"><a class="markdownIt-Anchor" href="#ubuntu"></a> Ubuntu</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">sudo apt-get update</span><br><span class="line">sudo apt-get install openssh-server</span><br><span class="line"><span class="comment"># 查看ssh状态</span></span><br><span class="line">service ssh status</span><br></pre></td></tr></table></figure><h2 id="centos"><a class="markdownIt-Anchor" href="#centos"></a> Centos</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">yum install openssh-server</span><br><span class="line">service sshd start</span><br></pre></td></tr></table></figure><blockquote><p>不要忘记开启22端口, <a href="/2020/04/11/linux%E5%BC%80%E5%90%AF%E7%AB%AF%E5%8F%A3/" title="linux开启端口">点击这里查看这篇文章</a></p></blockquote><h2 id="保存ssh-key直接登录"><a class="markdownIt-Anchor" href="#保存ssh-key直接登录"></a> 保存ssh-key，直接登录</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">chmod</span> 700 ~/.ssh</span><br><span class="line"><span class="built_in">chmod</span> 600 ~/.ssh/authorized_keys</span><br><span class="line">把客户机的id_rsa.pub的内容append到authorized_keys文件</span><br><span class="line">ssh-keygen -t rsa -b 2048 -C <span class="string">&quot;email@example.com&quot;</span></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> linux </category>
          
          <category> ssh </category>
          
      </categories>
      
      
        <tags>
            
            <tag> linux </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>linux添加用户</title>
      <link href="/2020/08/01/linux%E6%B7%BB%E5%8A%A0%E7%94%A8%E6%88%B7/"/>
      <url>/2020/08/01/linux%E6%B7%BB%E5%8A%A0%E7%94%A8%E6%88%B7/</url>
      
        <content type="html"><![CDATA[<p>linux添加用户的命令</p><span id="more"></span><h2 id="ubuntu"><a class="markdownIt-Anchor" href="#ubuntu"></a> Ubuntu</h2><h3 id="用户"><a class="markdownIt-Anchor" href="#用户"></a> 用户</h3><p>基本操作</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">adduser guo <span class="comment"># 添加用户，并创建用户文件夹</span></span><br><span class="line">su guo <span class="comment"># 切换用户</span></span><br><span class="line">userdel -r guo <span class="comment"># -r 同时删除用户目录</span></span><br><span class="line">sudo -l -U username <span class="comment"># 查看用户权限</span></span><br><span class="line">passwd <span class="comment"># 修改密码</span></span><br><span class="line"><span class="built_in">cat</span> /etc/passwd|grep -v nologin|grep -v halt|grep -v shutdown|grep -v <span class="built_in">sync</span>|grep -v syslog|awk -F<span class="string">&quot;:&quot;</span> <span class="string">&#x27;&#123; print $1&quot;|&quot;$3&quot;|&quot;$4 &#125;&#x27;</span>|more <span class="comment"># 查看所有用户</span></span><br></pre></td></tr></table></figure><p>添加root权限</p><p>修改 <code>/etc/sudoers</code> 文件，在 <code>root ALL=(ALL:ALL) ALL</code> 后面添加 <code>guo ALL=(ALL:ALL) ALL</code></p><p>添加某项权限</p><p>修改 <code>/etc/sudoers</code> 文件，添加 <code>username ALL = NOPASSWD : /usr/bin/apt-get, /usr/bin/aptitude</code></p><h3 id="用户组"><a class="markdownIt-Anchor" href="#用户组"></a> 用户组</h3><p>基本操作</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">sudo groupadd [选项] 组名　　　#添加新的组</span><br><span class="line">sudo groupdel [选项] 组名　　　#删除一个组</span><br><span class="line">newgrp 目的用户组 # 如果一个用户同时属于多个用户组，那么用户可以在用户组之间切换，以便具有其他用户组的权限。</span><br></pre></td></tr></table></figure><p>修改用户所在组</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">usermod -g 用户组 用户名 # 强行设置某个用户所在组，修改用户名组</span><br><span class="line">usermod -G 用户组 用户名 # 把某个用户改为 group(s)，单纯修改所在组（不包含用户名组）</span><br><span class="line">usermod -a -G 用户组 用户名 # 把用户添加进入某个组(s），注意：原来的用户组还存在</span><br></pre></td></tr></table></figure><p>查看用户组</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">groups # 查看当前登录用户的组内成员</span><br><span class="line">groups 52php # 查看52php用户所在的组，以及组内成员</span><br><span class="line">whoami # 查看当前登录用户名 </span><br><span class="line">/etc/group # 文件包含所有组</span><br><span class="line">/etc/shadow or /etc/passwd # 系统存在的所有用户名 </span><br></pre></td></tr></table></figure><h3 id="更改权限"><a class="markdownIt-Anchor" href="#更改权限"></a> 更改权限</h3><p><code>chown [-R]  用户[:用户组] 文件或者目录</code></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">chown -R name:group /usr/local # 更改文件夹权限</span><br></pre></td></tr></table></figure><p><a href="https://www.cnblogs.com/52php/p/5677628.html">参考链接 - 组/用户操作</a></p><p><a href="https://blog.csdn.net/LI_AINY/article/details/87971085">参考链接 - 更改权限</a></p>]]></content>
      
      
      <categories>
          
          <category> linux </category>
          
          <category> user </category>
          
      </categories>
      
      
        <tags>
            
            <tag> linux </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>centos7升级git</title>
      <link href="/2020/08/01/centos7%E5%8D%87%E7%BA%A7git/"/>
      <url>/2020/08/01/centos7%E5%8D%87%E7%BA%A7git/</url>
      
        <content type="html"><![CDATA[<p>在centof7中升级git到最新版</p><span id="more"></span><h3 id="安装依赖"><a class="markdownIt-Anchor" href="#安装依赖"></a> 安装依赖</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">yum install curl-devel expat-devel gettext-devel openssl-devel zlib-devel asciidoc</span><br><span class="line">yum install  gcc perl-ExtUtils-MakeMaker</span><br></pre></td></tr></table></figure><h3 id="卸载旧版本"><a class="markdownIt-Anchor" href="#卸载旧版本"></a> 卸载旧版本</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yum remove git</span><br></pre></td></tr></table></figure><h3 id="下载新版本并安装"><a class="markdownIt-Anchor" href="#下载新版本并安装"></a> 下载新版本并安装</h3><p><a href="https://mirrors.edge.kernel.org/pub/software/scm/git/">https://mirrors.edge.kernel.org/pub/software/scm/git/</a></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">cd</span> /usr/local/src/</span><br><span class="line">wget https://mirrors.edge.kernel.org/pub/software/scm/git/git-2.23.0.tar.xz</span><br><span class="line">tar -xvf git-2.23.0.tar.xz</span><br><span class="line"><span class="built_in">cd</span> git-2.23.0/</span><br><span class="line">make prefix=/usr/local/git all</span><br><span class="line">make prefix=/usr/local/git install</span><br><span class="line"><span class="built_in">echo</span> <span class="string">&quot;export PATH=<span class="variable">$PATH</span>:/usr/local/git/bin&quot;</span> &gt;&gt; /etc/profile</span><br><span class="line"><span class="built_in">source</span> /etc/profile</span><br></pre></td></tr></table></figure><p>非root用户使用需要如下操作</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">echo</span> <span class="string">&quot;export PATH=<span class="variable">$PATH</span>:/usr/local/git/bin&quot;</span> &gt;&gt; ~/.bashrc</span><br><span class="line"><span class="built_in">source</span> ~/.bashrc</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>golang解决下载问题</title>
      <link href="/2020/07/23/golang%E8%A7%A3%E5%86%B3%E4%B8%8B%E8%BD%BD%E9%97%AE%E9%A2%98/"/>
      <url>/2020/07/23/golang%E8%A7%A3%E5%86%B3%E4%B8%8B%E8%BD%BD%E9%97%AE%E9%A2%98/</url>
      
        <content type="html"><![CDATA[<p>golang解决下载问题</p><span id="more"></span><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">go <span class="built_in">env</span> -w GO111MODULE=on // 不打开这个的话，下面的代理无效，需要把golang更新到最新版（好像得大于1.12）</span><br><span class="line">go <span class="built_in">env</span> -w GOPROXY=https://mirrors.aliyun.com/goproxy/</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> golang </category>
          
      </categories>
      
      
        <tags>
            
            <tag> golang </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>pycharm 文件模板</title>
      <link href="/2020/07/13/pycharm%E6%96%87%E4%BB%B6%E6%A8%A1%E6%9D%BF/"/>
      <url>/2020/07/13/pycharm%E6%96%87%E4%BB%B6%E6%A8%A1%E6%9D%BF/</url>
      
        <content type="html"><![CDATA[<p>pycharm 创建python文件时自动导入模板</p><span id="more"></span><hr /><table><thead><tr><th>变量</th><th>说明</th></tr></thead><tbody><tr><td>${PROJECT_NAME}</td><td>当前Project名称;</td></tr><tr><td>${NAME}</td><td>在创建文件的对话框中指定的文件名;</td></tr><tr><td>${USER}</td><td>当前用户名;</td></tr><tr><td>${DATE}</td><td>当前系统日期;</td></tr><tr><td>${TIME}</td><td>当前系统时间;</td></tr><tr><td>${YEAR}</td><td>年;</td></tr><tr><td>${MONTH}</td><td>月;</td></tr><tr><td>${DAY}</td><td>日;</td></tr><tr><td>${HOUR}</td><td>小时;</td></tr><tr><td>${MINUTE}</td><td>分钟；</td></tr><tr><td>${PRODUCT_NAME}</td><td>创建文件的IDE名称;</td></tr><tr><td>${MONTH_NAME_SHORT}</td><td>英文月份缩写, 如: Jan, Feb, etc;</td></tr><tr><td>${MONTH_NAME_FULL}</td><td>英文月份全称, 如: January, February, etc；</td></tr></tbody></table>]]></content>
      
      
      <categories>
          
          <category> python </category>
          
          <category> pycharm </category>
          
      </categories>
      
      
        <tags>
            
            <tag> python </tag>
            
            <tag> pycharm </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>VMware 安装 win10</title>
      <link href="/2020/07/13/vmware%E5%AE%89%E8%A3%85win10/"/>
      <url>/2020/07/13/vmware%E5%AE%89%E8%A3%85win10/</url>
      
        <content type="html"><![CDATA[<p>关于VMware安装win10的过程</p><span id="more"></span><p>制作 U 盘启动器，把 diskgenius 软件的最新版放到U盘里，用于磁盘分区，格式转换；</p><p>vmware创建一个新的虚拟机 win10_test；</p><p>创建完成之后，打开 win10_test 的配置： 新建 -&gt; 硬盘 -&gt; SCSI -&gt; 使用物理磁盘 -&gt; PhysicalDriver1 -&gt; 一路确定，</p><p>选择 <code>打开电源时进入固件</code>，进入 BIOS，调整启动顺序，启动PE系统；</p><p>在PE系统中，使用diskgenius<code>将磁盘转换为GUID格式</code>：硬盘 -&gt; 转换分区表类型为GUID格式</p><p>接下来进行分区，安装系统即可。</p>]]></content>
      
      
      <categories>
          
          <category> vmware </category>
          
      </categories>
      
      
        <tags>
            
            <tag> vmware </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>linux分区</title>
      <link href="/2020/04/26/linux%E5%88%86%E5%8C%BA/"/>
      <url>/2020/04/26/linux%E5%88%86%E5%8C%BA/</url>
      
        <content type="html"><![CDATA[<p>安装linux过程中的分区大小设置。</p><span id="more"></span><table><thead><tr><th>分区</th><th>容量</th><th>备注</th></tr></thead><tbody><tr><td>swap</td><td>和内存大小一致即可</td><td>交换分区</td></tr><tr><td>/.</td><td>根据系统安装程序多少来定，大概10G-20G</td><td>系统程序安装的位置</td></tr><tr><td>/boot</td><td>1G-2G（网上都推荐几十兆）</td><td>启动分区</td></tr><tr><td>/home</td><td>用户的文件什么的都在这里，就分配完上面的几个分区，剩下的给他就行，尽量大一些</td><td>用户主分区</td></tr></tbody></table>]]></content>
      
      
      <categories>
          
          <category> linux </category>
          
      </categories>
      
      
        <tags>
            
            <tag> linux </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Abama:为什么要上学</title>
      <link href="/2020/04/26/Abama-%E4%B8%BA%E4%BB%80%E4%B9%88%E8%A6%81%E4%B8%8A%E5%AD%A6/"/>
      <url>/2020/04/26/Abama-%E4%B8%BA%E4%BB%80%E4%B9%88%E8%A6%81%E4%B8%8A%E5%AD%A6/</url>
      
        <content type="html"><![CDATA[<p>奥巴马演讲：我们为什么要上学</p><span id="more"></span><iframe src="//player.bilibili.com/player.html?aid=10953059&cid=18130968&page=1&danmaku=1" allowfullscreen="allowfullscreen" width="100%" height="500" scrolling="no" frameborder="0" sandbox="allow-top-navigation allow-same-origin allow-forms allow-scripts"></iframe><p>Hello, everybody! Thank you.Thank you. Thank you, everybody. All right, everybody go ahead and have a seat.How is everybody doing today? (Applause.) How about Tim Spicer? (Applause.) I am here with students at Wakefield High School in Arlington</p><p>Virginia. And we’ve got students tuning in from all across America,from kindergarten through 12th grade. And I am just so glad that all could join us today. And I want to thank Wakefieldfor being such an outstanding host. Give yourselves a big round of applause.(Applause.)</p><p>大家好!谢谢你们。谢谢你们。谢谢你们大家。好，大家请就坐。你们今天都好吗?(掌声)蒂姆·斯派塞(Tim Spicer)好吗?(掌声)我现在与弗吉尼亚州阿灵顿郡韦克菲尔德高中的学生们在一起。美国各地从小学预备班到中学12年级的学生正在收听收看。我很高兴大家今天都能参与。我还要感谢韦克菲尔德高中出色的组织安排。请为你们自己热烈鼓掌。(掌声)</p><p>I know that for many of you, today is the first day of school. And for those of you in kindergarten, or starting middle or high school, it’s your first day in a new school, so it’s understandable if you’re alittle nervous. I imagine there are some seniors out there who are feeling pretty good right now – (applause) – with just one more year to go. And no matter what grade you’re in, some of you are probably wishing it were still summer and you could’ve stayed in bed just a little bit longer this morning.</p><p>我知道，今天是你们很多人开学的日子。对于进入小学预备班、初中或高中的学生，今天是你们来到新学校的第一天，心里可能有点紧张，这是可以理解的。我能想象有些毕业班学生现在感觉很不错——(掌声)——还有一年就毕业了。不论在哪个年级，你们有些人可能希望暑假更长一点，今天早上还能多睡一小会儿。</p><p>I know that feeling. When I was young, my family lived overseas. I lived in Indonesia for a few years. And my mother, she didn’t have the money to send me where all the American kids went to school, but she thought it was important for me to keep up with an American education. So she decided to teach me extra lessons herself, Monday through Friday. But because she had to go to work, the only time she could do it was at 4:30 in the morning.</p><p>我了解这种感觉。我小时候，我们家生活在海外。我在印度尼西亚住了几年。我妈妈没有钱送我上其他美国孩子上的学校，但她认为必须让我接受美式教育。因此，她决定从周一到周五自己给我补课。不过她还要上班，所以只能在清晨四点半给我上课。</p><p>Now, as you might imagine, I wasn’t too happy about getting up that early. And a lot of times, I’d fall asleep right there at the kitchen table. But whenever I’d complain, my mother would just give me one of those looks and she’d say, “This is no picnic for me either, buster.” (Laughter.)</p><p>你们可以想见，我不太情愿那么早起床。有很多次，我趴在餐桌上就睡着了。但每当我抱怨的时候，我妈妈都会那样地看我一眼，然后说：“小子，这对我也并不轻松。”(笑声)</p><p>So I know that some of you are still adjusting to being back at school. But I’m here today because I have something important to discuss with you. I’m here because I want to talk with you about your education and what’s expected of all of you in this new school year.</p><p>我知道你们有些人还在适应开学后的生活。但我今天来到这里是因为有重要的事情要和你们说。我来这里是要和你们谈谈你们的教育问题，以及在这个新学年对你们所有人的期望。</p><p>Now, I’ve given a lot of speeches about education. And I’ve talked about responsibility a lot.</p><p>我做过很多次有关教育问题的演讲。我多次谈到过责任问题。</p><p>I’ve talked about teachers’ responsibility for inspiring students and pushing you to learn.</p><p>我谈到过教师激励学生并督促他们学习的责任。</p><p>I’ve talked about your parents’ responsibility for making sure you stay on track, and you get your homework done, and don’t spend every waking hour in front of the TV or with the Xbox.</p><p>我谈到过家长的责任，要确保你们走正路，完成家庭作业，不要整天坐在电视前或玩Xbox游戏。</p><p>I’ve talked a lot about your government’s responsibility forsetting high standards, and supporting teachers and principals, and turning around schools that aren’t working, where students aren’t getting the opportunities that they deserve.</p><p>我多次谈到过政府的责任，要制定高标准，支持教师和校长的工作，彻底改善不能为学生提供应有机会的、教育质量差的学校。</p><p>But at the end of the day, we can have the most dedicated teachers, the most supportive parents, the best schools in the world – and none of it will make a difference, none of it will matter unless all of you fulfill your responsibilities, unless you show up to those schools, unless you pay attention to those teachers, unless you listen to your parents and grandparents and other adults and put in the hard work it takes to succeed.That’s what I want to focus on today: the responsibility each of you has foryour education.</p><p>然而，即使我们拥有最敬业的教师，最尽力的家长和全世界最好的学校——如果你们大家不履行你们的责任，不到校上课，不专心听讲，不听家长、祖父祖母和其他大人的话，不付出取得成功所必须的勤奋努力，那么这一切都毫无用处，都无关紧要。这就是我今天讲话的重点：你们每个人对自己的教育应尽的责任。</p><p>I want to start with the responsibility you have to yourself.Every single one of you has something that you’re good at. Every single one of you has something to offer. And you have a responsibility to yourself todiscover what that is. That’s the opportunity an education can provide.</p><p>我首先要讲讲你们对自己应尽的责任。你们每个人都有自己的长处。你们每个人都能做出自己的贡献。你们对自己应尽的责任是发现自己的能力所在。而教育能够提供这样的机会。</p><p>Maybe you could be a great writer – maybe even good enough to write a book or articles in a newspaper – but you might not know it until you write that English paper – that English class paper that’s assigned toyou. Maybe you could be an innovator or an inventor – maybe even good enoughto come up with the next iPhone or the new medicine or vaccine – but you mightnot know it until you do your project for your science class. Maybe you could be a mayor or a senator or a Supreme Court justice – but you might not knowthat until you join student government or the debate team.</p><p>你或许能成为一名出色的作家——甚至可能写书或在报纸上发表文章——但你可能要在完成那篇英文课的作文后才会发现自己的才华。你或许能成为一名创新者或发明家——甚至可能设计出新一代iPhone或研制出新型药物或疫苗——但你可能要在完成科学课的实验后才会发现自己的才华。你或许能成为一名市长或参议员或最高法院的大法官——但你可能要在参加学生会的工作或辩论队后才会发现自己的才华。</p><p>And no matter what you want to do with yourlife, I guarantee that you’ll need an education to do it. You want to be a doctor, or a teacher, or a police officer? You want to be a nurse or an architect, a lawyer or a member of our military? You’re going to need a good education for every single one of those careers. You cannot drop out of schooland just drop into a good job. You’ve got to train for it and work for it andlearn for it.</p><p>不论你的生活志向是什么，我敢肯定你必须上学读书才能实现它。你想当医生、教师或警官吗?你想当护士、建筑师、律师或军人吗?你必须接受良好的教育，才能从事上述任何一种职业。你不能指望辍学后能碰上个好工作。你必须接受培训，为之努力，为之学习。</p><p>And this isn’t just important for your own life and your own future. What you make of your education will decide nothing less than the future of this country. The future of America depends on you. What you’relearning in school today will determine whether we as a nation can meet our greatest challenges in the future.</p><p>这并非只对你个人的人生和未来意义重大。可以毫不夸大地说，教育给你带来的益处将决定这个国家的未来。美国的未来取决于你们。你们今日在校学习的知识将决定我们作为一个国家是否能够迎接我们未来所面临的最严峻挑战。</p><p>You’ll need the knowledge and problem-solving skills you learn in science and math to cure diseases like cancer and AIDS, and to developnew energy technologies and protect our environment. You’ll need the insightsand critical-thinking skills you gain in history and social studies to fight poverty and homelessness, crime and discrimination, and make our nation more fair and more free. You’ll need the creativity and ingenuity you develop in all your classes to build new companies that will create new jobs and boost our economy.</p><p>你们将需要利用你们通过自然科学和数学课程所学到的知识和解决问题的能力来治愈癌症、艾滋病及其他疾病，开发新的能源技术和保护我们的环境。你们将需要利用你们在历史学和社会学课堂上所获得的知识和独立思考能力来抗击贫困和解决无家可归问题，打击犯罪和消除歧视，使我们的国家更公平、更自由。你们将需要利用你们在所有课堂上培养的创造力和智慧来创办新公司，增加就业机会，振兴我们的经济。</p><p>We need every single one of you to develop your talents and your skills and your intellect so you can help us old folks solve our most difficult problems. If you don’t do that-- if you quit onschool – you’re not just quitting on yourself, you’re quitting on your country.</p><p>我们需要你们每个人发挥你们的聪明才智和技能，以便帮助老一辈人解决我们面临的最棘手问题。如果你们不这样做，如果你们辍学，你们不仅仅是自暴自弃，也是抛弃自己的国家。</p><p>Now, I know it’s not always easy to do well in school. I knowa lot of you have challenges in your lives right now that can make it hard tofocus on your schoolwork.</p><p>我自然知道要做到学业优秀并非总是易事。我知道你们许多人在生活中面临挑战，难以集中精力从事学业。</p><p>I get it. I know what it’s like. My father left my family when I was two years old, and I was raised by a single mom who had to work and who struggled at times to pay the bills and wasn’t always able to give us the things that other kids had. There were times when I missed having a father inmy life. There were times when I was lonely and I felt like I didn’t fit in.</p><p>我明白这一点。我有亲身感受。两岁时，我父亲离家而去，我是由一位单亲母亲抚养成人的，母亲不得不工作，并时常为支付生活费用而苦苦挣扎，但有时仍无法为我们提供其他孩子享有的东西。有时，我渴望生活中能有一位父亲。有时我感到孤独，感到自己不适应社会。</p><p>So I wasn’t always as focused as I should have been on school, and I did some things I’m not proud of, and I got inmore trouble than I should have. And my life could have easily taken a turn forthe worse.</p><p>我并非总是像我应该做到的那样专心学习，我也曾做过我如今不能引以为豪的一些事情，我曾惹过不应该惹的麻烦。我的人生原本会轻易陷入更糟糕的境地。</p><p>But I was – I was lucky. Igot a lot of second chances, and I had the opportunity to go to college and law school and follow my dreams. My wife, our First Lady Michelle Obama, she has a similar story. Neither of her parents had gone to college, and they didn’t have a lot of money. But they worked hard, and she worked hard, so that she could go to the best schools in this country.</p><p>但是，我当年际遇不错。我有过许多第二次机会，我有幸能上大学，上法学院，追求自己的理想。我的妻子，我们的第一夫人米歇尔?奥巴马，也有着类似的经历。她的父母都未曾上过大学，家里很穷。但他们非常勤奋，她也是如此，因此她得以进入一些美国最好的学校。</p><p>Some of you might not have those advantages. Maybe you don’thave adults in your life who give you the support that you need. Maybe someone in your family has lost their job and there’s not enough money to go around.Maybe you live in a neighborhood where you don’t feel safe, or have friends who are pressuring you to do things you know aren’t right.</p><p>你们中有一些人可能没有那些有利条件。或许你们生活中没有成年人为你们提供你们所需要的支持。或许你们家中有人失业，经济非常拮据。或许你们生活在使你们感觉不安全的社区，或有朋友逼迫你们去做你们知道不对的事情。</p><p>But at the end of the day, the circumstances of your life --what you look like, where you come from, how much money you have, what you’ve got going on at home – none of that is an excuse for neglecting your homeworkor having a bad attitude in school. That’s no excuse for talking back to your teacher, or cutting class, or dropping out of school. There is no excuse for not trying.</p><p>然而说到底，你们生活的环境、你们的肤色、你们的原籍、你们的经济收入、你们家中的境况等等，这一切都不能成为你们不用功或不努力的理由。你们没有理由不服从你们的老师、逃学、或辍学。没有理由不付出努力。</p><p>Where you are right now doesn’t have to determine whereyou’ll end up. No one’s written your destiny for you, because here in America,you write your own destiny. You make your own future.</p><p>你们目前的状况并不决定着你们的未来。没有人决定你们的命运，在美国，你们决定自己的命运。你们掌握自己的未来。</p><p>That’s what young people like you are doing every day, all across America.</p>]]></content>
      
      
      <categories>
          
          <category> speech </category>
          
      </categories>
      
      
        <tags>
            
            <tag> speech </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>python时间函数</title>
      <link href="/2020/04/23/python%E6%97%B6%E9%97%B4%E5%87%BD%E6%95%B0/"/>
      <url>/2020/04/23/python%E6%97%B6%E9%97%B4%E5%87%BD%E6%95%B0/</url>
      
        <content type="html"><![CDATA[<p>python中的时间函数一直很迷，很乱套，整理一下常用的一些。</p><span id="more"></span><p>在github上，放了两个模块：</p><ul><li><a href="https://github.com/kimroniny/CommonModules/blob/master/python/time/time.py">time</a></li><li><a href="https://github.com/kimroniny/CommonModules/blob/master/python/time/datetime.py">datetime</a></li></ul>]]></content>
      
      
      <categories>
          
          <category> python </category>
          
          <category> time </category>
          
      </categories>
      
      
        <tags>
            
            <tag> python </tag>
            
            <tag> time </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>mysql常用指令和知识</title>
      <link href="/2020/04/23/mysql%E5%B8%B8%E7%94%A8%E6%8C%87%E4%BB%A4%E5%92%8C%E7%9F%A5%E8%AF%86/"/>
      <url>/2020/04/23/mysql%E5%B8%B8%E7%94%A8%E6%8C%87%E4%BB%A4%E5%92%8C%E7%9F%A5%E8%AF%86/</url>
      
        <content type="html"><![CDATA[<p>关于mysql的基本操作，平时自己用的比较多的，以后方便用。</p><span id="more"></span><ul><li><a href="#%E4%B8%8B%E8%BD%BD%E4%B8%8E%E5%AE%89%E8%A3%85">下载与安装</a><ul><li><a href="#windows">windows</a></li><li><a href="#linux">linux</a></li><li><a href="#%E8%A7%A3%E5%86%B3%E5%BF%85%E9%A1%BB%E4%BD%BF%E7%94%A8root%E7%99%BB%E5%BD%95mysql%E7%9A%84%E9%97%AE%E9%A2%98">解决必须使用root登录mysql的问题</a></li></ul></li><li><a href="#%E5%9F%BA%E6%9C%AC%E6%93%8D%E4%BD%9C">基本操作</a><ul><li><a href="#%E7%99%BB%E5%BD%95">登录</a></li><li><a href="#%E6%9B%B4%E6%94%B9%E5%AF%86%E7%A0%81">更改密码</a></li><li><a href="#%E6%9F%A5%E8%AF%A2%E5%9F%BA%E6%9C%AC%E4%BF%A1%E6%81%AF">查询基本信息</a></li><li><a href="#%E5%A2%9E%E5%88%A0%E6%94%B9%E6%9F%A5">增删改查</a><ul><li><a href="#select">select</a></li><li><a href="#insert">insert</a></li><li><a href="#update">update</a></li><li><a href="#delete">delete</a></li></ul></li><li><a href="#%E5%A4%8D%E5%88%B6%E8%A1%A8">复制表</a></li><li><a href="#%E4%BF%AE%E6%94%B9%E8%A1%A8%E7%BB%93%E6%9E%84">修改表结构</a></li><li><a href="#%E5%88%9B%E5%BB%BA">创建</a><ul><li><a href="#%E6%95%B0%E6%8D%AE%E5%BA%93">数据库</a></li><li><a href="#%E8%A1%A8">表</a></li></ul></li><li><a href="#%E6%89%A7%E8%A1%8Csql%E6%96%87%E4%BB%B6">执行sql文件</a></li><li><a href="#%E6%95%B0%E6%8D%AE%E5%A4%87%E4%BB%BD">数据备份</a></li></ul></li><li><a href="#%E5%9F%BA%E6%9C%AC%E7%9F%A5%E8%AF%86">基本知识</a><ul><li><a href="#%E5%90%84%E7%A7%8D%E5%BC%95%E5%8F%B7">各种引号</a></li><li><a href="#datetime">datetime</a></li><li><a href="#%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B">数据类型</a><ul><li><a href="#%E6%95%B0%E5%80%BC">数值</a></li><li><a href="#%E6%97%A5%E6%9C%9F">日期</a></li><li><a href="#%E5%AD%97%E7%AC%A6%E4%B8%B2">字符串</a></li></ul></li></ul></li></ul><h1 id="下载与安装"><a class="markdownIt-Anchor" href="#下载与安装"></a> 下载与安装</h1><h2 id="windows"><a class="markdownIt-Anchor" href="#windows"></a> windows</h2><ul><li>官网下载 community server 的压缩包即可，其他组件不用下载</li><li>解压之后，添加 bin 文件夹到环境变量中</li><li>将mysql写入windows服务，<code>mysqld install</code></li><li>启动服务，<code>net start mysql</code></li></ul><p>有的时候在启动的过程中，会出现 <code>本地计算机上的mysql服务启动后停止，某些服务在未由其他服务或程序使用时将自动停止</code>。此时只需要：</p><ul><li>删除掉安装目录下 <code>data</code> 目录</li><li>执行 <code>mysqld --remove mysql</code></li><li>初始化mysqld --initialize-insecure --user=mysql</li><li>启动服务，<code>net start mysql</code></li></ul><p>在windows中，删除某个service的方法：在管理员cmd下，执行 <code>sc delete mysql</code>，service的名称可以在 <code>services.msc</code> 中右击服务点击属性查看。</p><h2 id="linux"><a class="markdownIt-Anchor" href="#linux"></a> linux</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">sudo apt update</span><br><span class="line">sudo apt install mysql-server</span><br><span class="line">sudo mysql_secure_installation</span><br><span class="line">sudo mysql -uroot -p <span class="comment"># 注意这里必须使用 sudo</span></span><br><span class="line">service mysql status</span><br></pre></td></tr></table></figure><h2 id="解决必须使用root登录mysql的问题"><a class="markdownIt-Anchor" href="#解决必须使用root登录mysql的问题"></a> 解决必须使用root登录mysql的问题</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">set global validate_password_policy=0;</span><br><span class="line">set global validate_password_length=4;</span><br><span class="line">​ALTER USER root@localhost IDENTIFIED WITH mysql_native_password BY &#x27;123456&#x27;;</span><br><span class="line">flush privileges;</span><br></pre></td></tr></table></figure><h1 id="基本操作"><a class="markdownIt-Anchor" href="#基本操作"></a> 基本操作</h1><h2 id="登录"><a class="markdownIt-Anchor" href="#登录"></a> 登录</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">mysql -h12.228.12.12 -P3306 -uroot -p<span class="string">&#x27;adadfafaf&#x27;</span>  -Dtest_db -A --default-character-set=utf8</span><br><span class="line"><span class="comment"># 简化版</span></span><br><span class="line">mysql -uroot -p</span><br></pre></td></tr></table></figure><h2 id="更改密码"><a class="markdownIt-Anchor" href="#更改密码"></a> 更改密码</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 使用 mysqladmin</span></span><br><span class="line">mysqladmin -uroot -p password 123456</span><br><span class="line"><span class="comment"># 登录之后修改</span></span><br><span class="line"><span class="built_in">set</span> password <span class="keyword">for</span> root@localhost = password(<span class="string">&#x27;123&#x27;</span>); </span><br><span class="line"><span class="comment"># 在windows里面上述命令总报错，遂使用下面这个</span></span><br><span class="line">SET PASSWORD = <span class="string">&#x27;123&#x27;</span>;</span><br><span class="line"><span class="comment"># update编辑user表</span></span><br><span class="line">use mysql;</span><br><span class="line">update user <span class="built_in">set</span> password=password(<span class="string">&#x27;123&#x27;</span>) <span class="built_in">where</span> user=<span class="string">&#x27;root&#x27;</span> and host=<span class="string">&#x27;localhost&#x27;</span>; </span><br><span class="line">flush privileges; </span><br></pre></td></tr></table></figure><p>忘记密码的时候可以这样：</p><ul><li>关闭正在运行的MySQL服务。</li><li>打开DOS窗口，转到mysql\bin目录。</li><li>输入mysqld --skip-grant-tables 回车。–skip-grant-tables 的意思是启动MySQL服务的时候跳过权限表认证。</li><li>再开一个DOS窗口（因为刚才那个DOS窗口已经不能动了），转到mysql\bin目录。</li><li>输入mysql回车，如果成功，将出现MySQL提示符 &gt;。</li><li>连接权限数据库： use mysql; 。</li><li>改密码：update user set password=password(“123”) where user=“root”;（别忘了最后加分号） 。</li><li>刷新权限（必须步骤）：flush privileges;　。</li><li>退出 quit。</li><li>注销系统，再进入，使用用户名root和刚才设置的新密码123登录</li></ul><h2 id="查询基本信息"><a class="markdownIt-Anchor" href="#查询基本信息"></a> 查询基本信息</h2><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">-- 查询数据库</span></span><br><span class="line"><span class="keyword">show</span> databases;</span><br><span class="line"><span class="comment">-- 查询数据库的所有表名</span></span><br><span class="line"><span class="keyword">SHOW</span> TABLES [<span class="keyword">FROM</span> db_name];</span><br><span class="line"><span class="keyword">select</span> table_name <span class="keyword">from</span> information_schema.tables <span class="keyword">where</span> table_schema<span class="operator">=</span><span class="string">&#x27;your_db_name&#x27;</span>;</span><br><span class="line"><span class="comment">-- 查询表的所有列名</span></span><br><span class="line"><span class="keyword">SHOW</span> COLUMNS <span class="keyword">FROM</span> tbl_name [<span class="keyword">FROM</span> db_name];</span><br><span class="line"><span class="keyword">select</span> COLUMN_NAME <span class="keyword">from</span> information_schema.COLUMNS <span class="keyword">where</span> table_name <span class="operator">=</span> <span class="string">&#x27;your_table_name&#x27;</span> <span class="keyword">and</span> table_schema <span class="operator">=</span> <span class="string">&#x27;your_db_name&#x27;</span>;</span><br><span class="line"><span class="comment">-- 查询数据表结构</span></span><br><span class="line"><span class="keyword">SHOW</span> <span class="keyword">CREATE</span> <span class="keyword">TABLE</span>S tbl_name;</span><br></pre></td></tr></table></figure><h2 id="增删改查"><a class="markdownIt-Anchor" href="#增删改查"></a> 增删改查</h2><h3 id="select"><a class="markdownIt-Anchor" href="#select"></a> select</h3><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> a, b, c <span class="keyword">from</span> <span class="keyword">table</span> <span class="keyword">where</span> id <span class="operator">&gt;</span> <span class="number">1</span>;</span><br></pre></td></tr></table></figure><h3 id="insert"><a class="markdownIt-Anchor" href="#insert"></a> insert</h3><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> table_name (column1, column2, column3 ) <span class="keyword">VALUES</span> (value1, value2, value3, ...);</span><br></pre></td></tr></table></figure><h3 id="update"><a class="markdownIt-Anchor" href="#update"></a> update</h3><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"># 多个字段更新，用逗号分隔</span><br><span class="line"><span class="keyword">UPDATE</span> table_name <span class="keyword">SET</span> column1 <span class="operator">=</span> value1, column2 <span class="operator">=</span> value2 <span class="keyword">WHERE</span> <span class="keyword">condition</span>;</span><br></pre></td></tr></table></figure><h3 id="delete"><a class="markdownIt-Anchor" href="#delete"></a> delete</h3><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">DELETE</span> <span class="keyword">FROM</span> table_name <span class="keyword">WHERE</span> <span class="keyword">condition</span>;</span><br></pre></td></tr></table></figure><h2 id="复制表"><a class="markdownIt-Anchor" href="#复制表"></a> 复制表</h2><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">-- 复制表结构和数据</span></span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> 新表 <span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> 旧表;</span><br><span class="line"><span class="comment">-- 仅复制表结构</span></span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> 新表 <span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> 旧表 <span class="keyword">WHERE</span> <span class="number">1</span><span class="operator">=</span><span class="number">2</span>;</span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> 新表  <span class="keyword">LIKE</span> 旧表;</span><br><span class="line"><span class="comment">-- 复制旧表数据到新表</span></span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> 新表(字段<span class="number">1</span>,字段<span class="number">2</span>,.......) <span class="keyword">SELECT</span> 字段<span class="number">1</span>,字段<span class="number">2</span>,...... <span class="keyword">FROM</span> 旧表;</span><br><span class="line"><span class="comment">-- 如果两个表的结构一致，则可以</span></span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> 新表 <span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> 旧表;</span><br><span class="line"><span class="comment">-- 复制旧表内容到新表</span></span><br><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">INTO</span> 新表 <span class="keyword">FROM</span> 旧表;</span><br><span class="line"><span class="comment">-- 旧表结构复制到新表</span></span><br><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">INTO</span> 表<span class="number">2</span> <span class="keyword">FROM</span> 表<span class="number">1</span> <span class="keyword">WHERE</span> <span class="number">1</span><span class="operator">=</span><span class="number">2</span>;</span><br></pre></td></tr></table></figure><h2 id="修改表结构"><a class="markdownIt-Anchor" href="#修改表结构"></a> 修改表结构</h2><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">-- 增加字段</span></span><br><span class="line"><span class="keyword">alter</span> <span class="keyword">table</span> perple <span class="keyword">add</span> name <span class="type">varchar</span>(<span class="number">200</span>) <span class="keyword">default</span> <span class="keyword">null</span> comment <span class="string">&#x27;名称&#x27;</span>;</span><br><span class="line"><span class="comment">-- 修改字段</span></span><br><span class="line"><span class="keyword">alter</span> <span class="keyword">table</span> perple change oldname newname <span class="type">varchar</span>(<span class="number">20</span>) <span class="keyword">not</span> <span class="keyword">null</span> <span class="keyword">default</span> <span class="string">&#x27;0&#x27;</span>;</span><br><span class="line"><span class="comment">-- 删除字段</span></span><br><span class="line"><span class="keyword">alter</span> <span class="keyword">table</span> perple <span class="keyword">drop</span> name;</span><br></pre></td></tr></table></figure><h2 id="创建"><a class="markdownIt-Anchor" href="#创建"></a> 创建</h2><h3 id="数据库"><a class="markdownIt-Anchor" href="#数据库"></a> 数据库</h3><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> DATABASE IF <span class="keyword">NOT</span> <span class="keyword">EXISTS</span> test <span class="keyword">default</span> <span class="type">character</span> <span class="keyword">set</span> utf8 <span class="keyword">COLLATE</span> utf8_general_ci;</span><br></pre></td></tr></table></figure><h3 id="表"><a class="markdownIt-Anchor" href="#表"></a> 表</h3><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">DROP</span> <span class="keyword">TABLE</span> IF <span class="keyword">EXISTS</span> `test`;</span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> IF <span class="keyword">NOT</span> <span class="keyword">EXISTS</span> `test` (</span><br><span class="line">  `id` <span class="type">bigint</span>(<span class="number">20</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span>,</span><br><span class="line">  `type` <span class="type">int</span>(<span class="number">4</span>) <span class="keyword">DEFAULT</span> <span class="keyword">NULL</span>,</span><br><span class="line">  `name` <span class="type">varchar</span>(<span class="number">255</span>) <span class="keyword">DEFAULT</span> <span class="keyword">NULL</span>,</span><br><span class="line">  `<span class="type">time</span>` datetime <span class="keyword">DEFAULT</span> <span class="keyword">NULL</span>,</span><br><span class="line">  <span class="keyword">PRIMARY</span> KEY (`id`)</span><br><span class="line">) ENGINE<span class="operator">=</span>InnoDB <span class="keyword">DEFAULT</span> CHARSET<span class="operator">=</span>utf8;</span><br></pre></td></tr></table></figure><h2 id="执行sql文件"><a class="markdownIt-Anchor" href="#执行sql文件"></a> 执行sql文件</h2><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">source absolute_path</span><br><span class="line">\. absolute_path</span><br></pre></td></tr></table></figure><h2 id="数据备份"><a class="markdownIt-Anchor" href="#数据备份"></a> 数据备份</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 导出数据库中所有的表结构和数据</span></span><br><span class="line">mysqldump -u root -p dbname &gt; dump.txt</span><br><span class="line">mysqldump -u root -p dbname tablename &gt; dump.txt</span><br><span class="line"><span class="comment"># 只导出表结构</span></span><br><span class="line">mysqldump --opt -d dbname -uroot -p &gt; xxx.sql</span><br><span class="line">mysqldump --opt -d dbname tablename -uroot -p &gt; xxx.sql</span><br><span class="line"><span class="comment"># 只导出数据</span></span><br><span class="line">mysqldump -t dbname -uroot -p &gt; xxx.sql</span><br><span class="line">mysqldump -t dbname tablename -uroot -p &gt; xxx.sql</span><br></pre></td></tr></table></figure><h1 id="基本知识"><a class="markdownIt-Anchor" href="#基本知识"></a> 基本知识</h1><h2 id="各种引号"><a class="markdownIt-Anchor" href="#各种引号"></a> 各种引号</h2><ul><li>严格上，sql没有双引号，只有单引号和反引号，但是某些数据库对sql进行了一定的扩展，所以也支持双引号</li><li>单引号，用来表示字符串</li><li>反引号，用来表示表名或者列名，防止与关键字冲突</li></ul><h2 id="datetime"><a class="markdownIt-Anchor" href="#datetime"></a> datetime</h2><p>插入的时候一般按照<code>2020-5-9 16:02:22</code>这种格式。</p><p>系统也会自动识别数据格式:</p><ul><li>20191221010203</li><li>2019/12/21/1/21/3</li></ul><h2 id="数据类型"><a class="markdownIt-Anchor" href="#数据类型"></a> 数据类型</h2><ul><li>数字类型<ul><li>整数: tinyint、smallint、mediumint、int、bigint</li><li>浮点数: float、double、real、decimal</li></ul></li><li>日期和时间: date、time、datetime、timestamp、year</li><li>字符串类型<ul><li>字符串: char、varchar</li><li>文本: tinytext、text、mediumtext、longtext</li></ul></li><li>二进制(可用来存储图片、音乐等): tinyblob、blob、mediumblob、longblob</li></ul><h3 id="数值"><a class="markdownIt-Anchor" href="#数值"></a> 数值</h3><p><em><strong>整型</strong></em></p><table><thead><tr><th style="text-align:left">type</th><th style="text-align:left">Storage</th><th style="text-align:left">Minumun Value</th><th style="text-align:left">Maximum Value</th></tr></thead><tbody><tr><td style="text-align:left"></td><td style="text-align:left">(Bytes)</td><td style="text-align:left">(Signed/Unsigned)</td><td style="text-align:left">(Signed/Unsigned)</td></tr><tr><td style="text-align:left">TINYINT</td><td style="text-align:left">1</td><td style="text-align:left">-128</td><td style="text-align:left">127</td></tr><tr><td style="text-align:left"></td><td style="text-align:left"></td><td style="text-align:left">0</td><td style="text-align:left">255</td></tr><tr><td style="text-align:left">SMALLINT</td><td style="text-align:left">2</td><td style="text-align:left">-32768</td><td style="text-align:left">32767</td></tr><tr><td style="text-align:left"></td><td style="text-align:left"></td><td style="text-align:left">0</td><td style="text-align:left">65535</td></tr><tr><td style="text-align:left">MEDIUMINT</td><td style="text-align:left">3</td><td style="text-align:left">-8388608</td><td style="text-align:left">8388607</td></tr><tr><td style="text-align:left"></td><td style="text-align:left"></td><td style="text-align:left">0</td><td style="text-align:left">16777215</td></tr><tr><td style="text-align:left">INT</td><td style="text-align:left">4</td><td style="text-align:left">-2147483648</td><td style="text-align:left">2147483647</td></tr><tr><td style="text-align:left"></td><td style="text-align:left"></td><td style="text-align:left">0</td><td style="text-align:left">4294967295</td></tr><tr><td style="text-align:left">BIGINT</td><td style="text-align:left">8</td><td style="text-align:left">-9223372036854775808</td><td style="text-align:left">9223372036854775807</td></tr><tr><td style="text-align:left"></td><td style="text-align:left"></td><td style="text-align:left">0</td><td style="text-align:left">18446744073709551615</td></tr></tbody></table><p><em><strong>浮点型</strong></em></p><table><thead><tr><th>属性</th><th>存储空间</th><th>精度</th><th>精确性</th><th>说明</th></tr></thead><tbody><tr><td>FLOAT(M, D)</td><td>4 bytes</td><td>单精度</td><td>非精确</td><td>单精度浮点型，m总个数，d小数位</td></tr><tr><td>DOUBLE(M, D)</td><td>8 bytes</td><td>双精度</td><td>比Float精度高</td><td>双精度浮点型，m总个数，d小数位</td></tr></tbody></table><ul><li>FLOAT容易造成精度丢失</li></ul><p><em><strong>定点数DECIMAL</strong></em></p><ul><li>高精度的数据类型，常用来存储交易相关的数据</li><li>DECIMAL(M,N).M代表总精度，N代表小数点右侧的位数（标度）</li><li>1 &lt; M &lt; 254, 0 &lt; N &lt; 60;</li><li>存储空间变长</li></ul><h3 id="日期"><a class="markdownIt-Anchor" href="#日期"></a> 日期</h3><table><thead><tr><th>类型</th><th>字节</th><th>例</th><th>精确性</th></tr></thead><tbody><tr><td>DATE</td><td>三字节</td><td>2015-05-01</td><td>精确到年月日</td></tr><tr><td>TIME</td><td>三字节</td><td>11:12:00</td><td>精确到时分秒</td></tr><tr><td>DATETIME</td><td>八字节</td><td>2015-05-01 11::12:00</td><td>精确到年月日时分秒</td></tr><tr><td>TIMESTAMP</td><td></td><td>2015-05-01 11::12:00</td><td>精确到年月日时分秒</td></tr></tbody></table><ul><li>MySQL在<code>5.6.4</code>版本之后，<code>TIMESTAMP</code>和<code>DATETIME</code>支持到微秒。</li><li><code>TIMESTAMP</code>会根据系统时区进行转换，<code>DATETIME</code>则不会</li><li>存储范围的区别<ul><li><code>TIMESTAMP</code>存储范围：1970-01-01 00::00:01 to 2038-01-19 03:14:07</li><li><code>DATETIME</code>的存储范围：1000-01-01 00:00:00 to 9999-12-31 23:59:59</li></ul></li><li>一般使用<code>TIMESTAMP</code>国际化</li><li>如存时间戳使用数字类型<code>BIGINT</code></li></ul><h3 id="字符串"><a class="markdownIt-Anchor" href="#字符串"></a> 字符串</h3><table><thead><tr><th>类型</th><th>单位</th><th>最大</th><th>特性</th></tr></thead><tbody><tr><td>CHAR</td><td>字符</td><td>最大为255字符</td><td>存储定长，容易造成空间的浪费</td></tr><tr><td>VARCHAR</td><td>字符</td><td>可以超过255个字符</td><td>存储变长，节省存储空间</td></tr><tr><td>TEXT</td><td>字节</td><td>总大小为65535字节，约为64KB</td><td>-</td></tr></tbody></table><ul><li>TEXT在MySQL内部大多存储格式为溢出页，效率不如CHAR</li><li>Mysql默认为utf-8，那么在英文模式下1个字符=1个字节，在中文模式下1个字符=3个字节。</li></ul>]]></content>
      
      
      <categories>
          
          <category> database </category>
          
          <category> mysql </category>
          
      </categories>
      
      
        <tags>
            
            <tag> database </tag>
            
            <tag> mysql </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>solidity单元测试(使用remix)</title>
      <link href="/2020/04/22/solidity%E5%8D%95%E5%85%83%E6%B5%8B%E8%AF%95-%E4%BD%BF%E7%94%A8remix/"/>
      <url>/2020/04/22/solidity%E5%8D%95%E5%85%83%E6%B5%8B%E8%AF%95-%E4%BD%BF%E7%94%A8remix/</url>
      
        <content type="html"><![CDATA[<p>在remix中对solidity进行单元测试。</p><span id="more"></span><ul><li><a href="#%e4%b8%80%e6%bf%80%e6%b4%bb%e6%b5%8b%e8%af%95%e6%8f%92%e4%bb%b6">一、激活测试插件</a></li><li><a href="#%e4%ba%8c%e6%96%ad%e8%a8%80">二、断言</a><ul><li><a href="#assertokvalue-message">Assert.ok(value[, message])</a></li><li><a href="#assertequalactual-expected-message">Assert.equal(actual, expected[, message])</a></li><li><a href="#assertnotequalactual-expected-message">Assert.notEqual(actual, expected[, message])</a></li><li><a href="#assertgreaterthanvalue1-value2-message">Assert.greaterThan(value1, value2[, message])</a></li><li><a href="#assertlesserthanvalue1-value2-message">Assert.lesserThan(value1, value2[, message])</a></li></ul></li><li><a href="#%e4%b8%89%e7%89%b9%e6%ae%8a%e5%87%bd%e6%95%b0">三、特殊函数</a></li><li><a href="#%e5%9b%9b%e7%89%b9%e6%ae%8a%e7%9a%84%e4%ba%a4%e6%98%93%e5%8f%82%e6%95%b0">四、特殊的交易参数</a></li><li><a href="#%e4%ba%94%e6%a0%b7%e4%be%8b%e8%af%b4%e6%98%8e">五、样例说明</a><ul><li><a href="#%e4%b8%80%e5%9f%ba%e6%9c%ac%e6%b5%8b%e8%af%95%e6%a0%b7%e4%be%8b">（一）基本测试样例</a></li><li><a href="#%e4%ba%8c%e6%b6%89%e5%8f%8a%e5%88%b0msgsender%e7%9a%84%e6%b5%8b%e8%af%95%e6%a0%b7%e4%be%8b">（二）涉及到<code>msg.sender</code>的测试样例</a></li><li><a href="#%e4%b8%89%e6%b6%89%e5%8f%8a%e5%88%b0-msgvalue-%e7%9a%84%e6%b5%8b%e8%af%95%e6%a0%b7%e4%be%8b">（三）涉及到 <code>msg.value</code> 的测试样例</a></li><li><a href="#%e5%9b%9b%e6%96%b9%e6%b3%95%e6%89%a7%e8%a1%8c%e8%bf%87%e7%a8%8b%e4%b8%ad%e7%9a%84%e9%94%99%e8%af%af%e5%a4%84%e7%90%86">（四）方法执行过程中的错误处理</a></li></ul></li></ul><h1 id="一-激活测试插件"><a class="markdownIt-Anchor" href="#一-激活测试插件"></a> 一、激活测试插件</h1><p><img data-src="plugin1.png" alt="插件列表" /></p><p><img data-src="plugin2.png" alt="插件页面" /></p><p>激活插件之后，点击 <code>Generate test file</code>，就可以创建测试文件。</p><p><img data-src="generate.png" alt="生成测试文件" /></p><h1 id="二-断言"><a class="markdownIt-Anchor" href="#二-断言"></a> 二、断言</h1><p>断言很少，官方给出的只有5个。</p><h2 id="assertokvalue-message"><a class="markdownIt-Anchor" href="#assertokvalue-message"></a> Assert.ok(value[, message])</h2><ul><li>value: bool</li><li>message: string</li></ul><h2 id="assertequalactual-expected-message"><a class="markdownIt-Anchor" href="#assertequalactual-expected-message"></a> Assert.equal(actual, expected[, message])</h2><ul><li><em>actual</em>: uint | int | bool | address | bytes32 | string</li><li><em>expected</em>: uint | int | bool | address | bytes32 | string</li><li><em>message</em>: string</li></ul><h2 id="assertnotequalactual-expected-message"><a class="markdownIt-Anchor" href="#assertnotequalactual-expected-message"></a> Assert.notEqual(actual, expected[, message])</h2><ul><li><em>actual</em>: uint | int | bool | address | bytes32 | string</li><li><em>expected</em>: uint | int | bool | address | bytes32 | string</li><li><em>message</em>: string</li></ul><h2 id="assertgreaterthanvalue1-value2-message"><a class="markdownIt-Anchor" href="#assertgreaterthanvalue1-value2-message"></a> Assert.greaterThan(value1, value2[, message])</h2><ul><li><em>value1</em>: uint | int</li><li><em>value2</em>: uint | int</li><li><em>message</em>: string</li></ul><h2 id="assertlesserthanvalue1-value2-message"><a class="markdownIt-Anchor" href="#assertlesserthanvalue1-value2-message"></a> Assert.lesserThan(value1, value2[, message])</h2><ul><li><em>value1</em>: uint | int</li><li><em>value2</em>: uint | int</li><li><em>message</em>: string</li></ul><h1 id="三-特殊函数"><a class="markdownIt-Anchor" href="#三-特殊函数"></a> 三、特殊函数</h1><ul><li>beforeEach() - 在每个测试开始前运行</li><li>beforeAll() - 在所有测试开始前运行</li><li>afterEach() - 在每个测试结束后运行</li><li>afterAll() - 在所有测试结束后运行</li></ul><h1 id="四-特殊的交易参数"><a class="markdownIt-Anchor" href="#四-特殊的交易参数"></a> 四、特殊的交易参数</h1><p>对于涉及到 <code>msg.sender</code> 和 <code>msg.value</code> 的交易，remix采取特殊的方法来提供这两个参数。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/// #sender: account-0</span></span><br><span class="line"><span class="comment">/// #value: 10</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">checkSenderIs0AndValueis10</span> () public payable &#123;</span><br><span class="line">    <span class="title class_">Assert</span>.<span class="title function_">equal</span>(msg.<span class="property">sender</span>, <span class="title class_">TestsAccounts</span>.<span class="title function_">getAccount</span>(<span class="number">0</span>), <span class="string">&quot;wrong sender in checkSenderIs0AndValueis10&quot;</span>);</span><br><span class="line">    <span class="title class_">Assert</span>.<span class="title function_">equal</span>(msg.<span class="property">value</span>, <span class="number">10</span>, <span class="string">&quot;wrong value in checkSenderIs0AndValueis10&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>格式：在函数前加上 <code>/// #sender: account-0</code> 或者 <code>/// #value: 10</code></li><li>目前只提供 <code>#sender</code> 和 <code>#value</code> 两种参数</li><li>发送者地址的格式是固定的，就是 <code>account-x</code> 这个样子的，<code>x</code> 的取值只有三个 <code>[0-2]</code> (v0.10.0之后可以在<code>[0-9]</code>取值，提供10个地址)</li><li>使用 <code>TestsAccounts.getAccount(idx)</code>  来获取测试地址，首地址是合约创建者的地址</li><li>如果说用到 <code>#sender</code> 这个参数，那么必须在合约文件中导入 <code>import remix_accounts.sol</code></li><li>参数 <code>#value</code> 的单位是 <code>wei</code></li></ul><h1 id="五-样例说明"><a class="markdownIt-Anchor" href="#五-样例说明"></a> 五、样例说明</h1><h2 id="一基本测试样例"><a class="markdownIt-Anchor" href="#一基本测试样例"></a> （一）基本测试样例</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/// @notice - 源程序</span></span><br><span class="line"><span class="comment">/// @filename - Simple_storage.sol</span></span><br><span class="line"></span><br><span class="line">pragma solidity &gt;=<span class="number">0.4</span><span class="number">.22</span> &lt;<span class="number">0.7</span><span class="number">.0</span>;</span><br><span class="line"></span><br><span class="line">contract <span class="title class_">SimpleStorage</span> &#123;</span><br><span class="line">    uint public storedData;</span><br><span class="line"></span><br><span class="line">    <span class="title function_">constructor</span>(<span class="params"></span>) public &#123;</span><br><span class="line">        storedData = <span class="number">100</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">function</span> <span class="title function_">set</span>(<span class="params">uint x</span>) public &#123;</span><br><span class="line">        storedData = x;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">function</span> <span class="title function_">get</span>(<span class="params"></span>) public view returns (uint retVal) &#123;</span><br><span class="line">        <span class="keyword">return</span> storedData;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/// @notice - 测试程序</span></span><br><span class="line"><span class="comment">/// @filename - Simple_storage_test.sol</span></span><br><span class="line"></span><br><span class="line">pragma solidity &gt;=<span class="number">0.4</span><span class="number">.22</span> &lt;<span class="number">0.7</span><span class="number">.0</span>;</span><br><span class="line"><span class="keyword">import</span> <span class="string">&quot;remix_tests.sol&quot;</span>;  <span class="comment">// 自动导入</span></span><br><span class="line"><span class="keyword">import</span> <span class="string">&quot;./Simple_storage.sol&quot;</span>;  <span class="comment">// 待测试的合约</span></span><br><span class="line"></span><br><span class="line">contract <span class="title class_">MyTest</span> &#123;</span><br><span class="line">    <span class="title class_">SimpleStorage</span> foo;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">function</span> <span class="title function_">beforeEach</span>(<span class="params"></span>) public &#123;</span><br><span class="line">        foo = <span class="keyword">new</span> <span class="title class_">SimpleStorage</span>();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">function</span> <span class="title function_">initialValueShouldBe100</span>(<span class="params"></span>) public returns (bool) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="title class_">Assert</span>.<span class="title function_">equal</span>(foo.<span class="title function_">get</span>(), <span class="number">100</span>, <span class="string">&quot;initial value is not correct&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">function</span> <span class="title function_">valueIsSet200</span>(<span class="params"></span>) public returns (bool) &#123;</span><br><span class="line">        foo.<span class="title function_">set</span>(<span class="number">200</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="title class_">Assert</span>.<span class="title function_">equal</span>(foo.<span class="title function_">get</span>(), <span class="number">200</span>, <span class="string">&quot;value is not 200&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="二涉及到msgsender的测试样例"><a class="markdownIt-Anchor" href="#二涉及到msgsender的测试样例"></a> （二）涉及到<code>msg.sender</code>的测试样例</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/// @notice - 源程序</span></span><br><span class="line"><span class="comment">/// @filename - Sender.sol</span></span><br><span class="line"></span><br><span class="line">pragma solidity &gt;=<span class="number">0.4</span><span class="number">.22</span> &lt;<span class="number">0.7</span><span class="number">.0</span>;</span><br><span class="line">contract <span class="title class_">Sender</span> &#123;</span><br><span class="line">    address private owner;</span><br><span class="line">    </span><br><span class="line">    <span class="title function_">constructor</span>(<span class="params"></span>) public &#123;</span><br><span class="line">        owner = msg.<span class="property">sender</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 先判断发送者是否和当前owner一致，只有一致时才可以修改</span></span><br><span class="line">    <span class="keyword">function</span> <span class="title function_">updateOwner</span>(<span class="params">address newOwner</span>) public &#123;</span><br><span class="line">        <span class="built_in">require</span>(msg.<span class="property">sender</span> == owner, <span class="string">&quot;only current owner can update owner&quot;</span>);</span><br><span class="line">        owner = newOwner;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">function</span> <span class="title function_">getOwner</span>(<span class="params"></span>) public view returns (address) &#123;</span><br><span class="line">        <span class="keyword">return</span> owner;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/// @notice - 测试程序</span></span><br><span class="line"><span class="comment">/// @filename - Sender_test.sol</span></span><br><span class="line"></span><br><span class="line">pragma solidity &gt;=<span class="number">0.4</span><span class="number">.22</span> &lt;<span class="number">0.7</span><span class="number">.0</span>;</span><br><span class="line"><span class="keyword">import</span> <span class="string">&quot;remix_tests.sol&quot;</span>; </span><br><span class="line"><span class="keyword">import</span> <span class="string">&quot;remix_accounts.sol&quot;</span>;  <span class="comment">// 因为使用到了 #sender , 所以必须导入该package</span></span><br><span class="line"><span class="keyword">import</span> <span class="string">&quot;./Sender.sol&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 注意，这里是继承合约</span></span><br><span class="line">contract <span class="title class_">SenderTest</span> is <span class="title class_">Sender</span> &#123;</span><br><span class="line">    address acc0;</span><br><span class="line">    address acc1;</span><br><span class="line">    address acc2;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">/// 这里的TestsAccounts用来获取测试用户，acc0（首地址） 就是合约的创建者地址</span></span><br><span class="line">    <span class="keyword">function</span> <span class="title function_">beforeAll</span>(<span class="params"></span>) public &#123;</span><br><span class="line">        acc0 = <span class="title class_">TestsAccounts</span>.<span class="title function_">getAccount</span>(<span class="number">0</span>); </span><br><span class="line">        acc1 = <span class="title class_">TestsAccounts</span>.<span class="title function_">getAccount</span>(<span class="number">1</span>);</span><br><span class="line">        acc2 = <span class="title class_">TestsAccounts</span>.<span class="title function_">getAccount</span>(<span class="number">2</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">function</span> <span class="title function_">testInitialOwner</span>(<span class="params"></span>) public &#123;</span><br><span class="line">        <span class="comment">// 合约初始化之后，owner代表着合约发布者的地址，也就是acc0</span></span><br><span class="line">        <span class="title class_">Assert</span>.<span class="title function_">equal</span>(<span class="title function_">getOwner</span>(), acc0, <span class="string">&#x27;owner should be acc0&#x27;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">/// 如果不指定 #sender 参数，那么默认 msg.sender 是测试用的首地址</span></span><br><span class="line">    <span class="keyword">function</span> <span class="title function_">updateOwnerOnce</span>(<span class="params"></span>) public &#123;</span><br><span class="line">        <span class="title class_">Assert</span>.<span class="title function_">ok</span>(msg.<span class="property">sender</span> == acc0, <span class="string">&#x27;caller should be default account i.e. acc0&#x27;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="title function_">updateOwner</span>(acc1);</span><br><span class="line"></span><br><span class="line">        <span class="title class_">Assert</span>.<span class="title function_">equal</span>(<span class="title function_">getOwner</span>(), acc1, <span class="string">&#x27;owner should be updated to acc1&#x27;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">/// 通过 #sender: account-1 来指定 msg.sender，即为测试用的编号为 1 的地址</span></span><br><span class="line">    <span class="comment">/// #sender: account-1 </span></span><br><span class="line">    <span class="keyword">function</span> <span class="title function_">updateOwnerOnceAgain</span>(<span class="params"></span>) public &#123;</span><br><span class="line">        <span class="title class_">Assert</span>.<span class="title function_">ok</span>(msg.<span class="property">sender</span> == acc1, <span class="string">&#x27;caller should be custom account i.e. acc1&#x27;</span>);</span><br><span class="line">        <span class="title function_">updateOwner</span>(acc2);</span><br><span class="line">        <span class="title class_">Assert</span>.<span class="title function_">equal</span>(<span class="title function_">getOwner</span>(), acc2, <span class="string">&#x27;owner should be updated to acc2&#x27;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="三涉及到-msgvalue-的测试样例"><a class="markdownIt-Anchor" href="#三涉及到-msgvalue-的测试样例"></a> （三）涉及到 <code>msg.value</code> 的测试样例</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/// @notice - 源程序</span></span><br><span class="line"><span class="comment">/// @filename - Value.sol</span></span><br><span class="line"></span><br><span class="line">pragma solidity &gt;=<span class="number">0.4</span><span class="number">.22</span> &lt;<span class="number">0.7</span><span class="number">.0</span>;</span><br><span class="line">contract <span class="title class_">Value</span> &#123;</span><br><span class="line">    uint256 public tokenBalance;</span><br><span class="line">    </span><br><span class="line">    <span class="title function_">constructor</span>(<span class="params"></span>) public &#123;</span><br><span class="line">        tokenBalance = <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">function</span> <span class="title function_">addValue</span>(<span class="params"></span>) payable public &#123;</span><br><span class="line">        tokenBalance = tokenBalance + (msg.<span class="property">value</span>/<span class="number">10</span>);</span><br><span class="line">    &#125; </span><br><span class="line">    </span><br><span class="line">    <span class="keyword">function</span> <span class="title function_">getTokenBalance</span>(<span class="params"></span>) view public returns (uint256) &#123;</span><br><span class="line">        <span class="keyword">return</span> tokenBalance;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line">pragma solidity &gt;=<span class="number">0.4</span><span class="number">.22</span> &lt;<span class="number">0.7</span><span class="number">.0</span>;</span><br><span class="line"><span class="keyword">import</span> <span class="string">&quot;remix_tests.sol&quot;</span>; </span><br><span class="line"><span class="keyword">import</span> <span class="string">&quot;./Value.sol&quot;</span>;</span><br><span class="line"></span><br><span class="line">contract <span class="title class_">ValueTest</span>&#123;</span><br><span class="line">    <span class="title class_">Value</span> v;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">function</span> <span class="title function_">beforeAll</span>(<span class="params"></span>) public &#123;</span><br><span class="line">        v = <span class="keyword">new</span> <span class="title class_">Value</span>();</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">function</span> <span class="title function_">testInitialBalance</span>(<span class="params"></span>) public &#123;</span><br><span class="line">        <span class="title class_">Assert</span>.<span class="title function_">equal</span>(v.<span class="title function_">getTokenBalance</span>(), <span class="number">0</span>, <span class="string">&#x27;token balance should be 0 initially&#x27;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">/// 自定义 #value ，也就是 msg.value</span></span><br><span class="line">    <span class="comment">/// #value: 200</span></span><br><span class="line">    <span class="keyword">function</span> <span class="title function_">addValueOnce</span>(<span class="params"></span>) public payable &#123;</span><br><span class="line">        <span class="title class_">Assert</span>.<span class="title function_">equal</span>(msg.<span class="property">value</span>, <span class="number">200</span>, <span class="string">&#x27;value should be 200&#x27;</span>);</span><br><span class="line">        <span class="comment">// execute &#x27;addValue&#x27;</span></span><br><span class="line">        v.<span class="property">addValue</span>&#123;<span class="attr">gas</span>: <span class="number">40000</span>, <span class="attr">value</span>: <span class="number">200</span>&#125;(); <span class="comment">// 注意这种写法，solidity的版本必须大于 0.6.2，若版本低于0.6.2，就采用 addValueAgain() 中的方法。</span></span><br><span class="line">        <span class="title class_">Assert</span>.<span class="title function_">equal</span>(v.<span class="title function_">getTokenBalance</span>(), <span class="number">20</span>, <span class="string">&#x27;token balance should be 20&#x27;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">     </span><br><span class="line">    <span class="comment">/// 对于 solidity 版本小于 0.6.2 的，使用下面这种方式。</span></span><br><span class="line">    <span class="comment">/// #value: 100</span></span><br><span class="line">    <span class="keyword">function</span> <span class="title function_">addValueAgain</span>(<span class="params"></span>) public payable &#123;</span><br><span class="line">        <span class="title class_">Assert</span>.<span class="title function_">equal</span>(msg.<span class="property">value</span>, <span class="number">100</span>, <span class="string">&#x27;value should be 100&#x27;</span>);</span><br><span class="line">        bytes memory methodSign = abi.<span class="title function_">encodeWithSignature</span>(<span class="string">&#x27;addValue()&#x27;</span>);</span><br><span class="line">        (bool success, bytes memory data) = <span class="title function_">address</span>(v).<span class="property">call</span>.<span class="title function_">gas</span>(<span class="number">40000</span>).<span class="title function_">value</span>(<span class="number">100</span>)(methodSign);</span><br><span class="line">        <span class="title class_">Assert</span>.<span class="title function_">equal</span>(success, <span class="literal">true</span>, <span class="string">&#x27;execution should be successful&#x27;</span>);</span><br><span class="line">        <span class="title class_">Assert</span>.<span class="title function_">equal</span>(v.<span class="title function_">getTokenBalance</span>(), <span class="number">30</span>, <span class="string">&#x27;token balance should be 30&#x27;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="四方法执行过程中的错误处理"><a class="markdownIt-Anchor" href="#四方法执行过程中的错误处理"></a> （四）方法执行过程中的错误处理</h2><p>如果 <code>solidity</code> 大于 0.6.0， 就是用 <code>try...catch</code> 结构，否则使用执行状态返回值的方法，具体见样例。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/// @notice - 源程序</span></span><br><span class="line"><span class="comment">/// @filename - AttendanceRegister.sol</span></span><br><span class="line"></span><br><span class="line">pragma solidity &gt;=<span class="number">0.4</span><span class="number">.22</span> &lt;<span class="number">0.7</span><span class="number">.0</span>;</span><br><span class="line">contract <span class="title class_">AttendanceRegister</span> &#123;</span><br><span class="line">    struct <span class="title class_">Student</span>&#123;</span><br><span class="line">            string name;</span><br><span class="line">            uint <span class="keyword">class</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    event <span class="title class_">Added</span>(string name, uint <span class="keyword">class</span>, uint time);</span><br><span class="line"></span><br><span class="line">    <span class="title function_">mapping</span>(<span class="function"><span class="params">uint</span> =&gt;</span> <span class="title class_">Student</span>) public register; </span><br><span class="line"></span><br><span class="line">    <span class="keyword">function</span> <span class="title function_">add</span>(<span class="params">uint rollNumber, string memory name, uint <span class="keyword">class</span></span>) public returns (uint256)&#123;</span><br><span class="line">        <span class="built_in">require</span>(<span class="keyword">class</span> &gt; <span class="number">0</span> &amp;&amp; <span class="keyword">class</span> &lt;= <span class="number">12</span>, <span class="string">&quot;Invalid class&quot;</span>);</span><br><span class="line">        <span class="built_in">require</span>(register[rollNumber].<span class="property">class</span> == <span class="number">0</span>, <span class="string">&quot;Roll number not available&quot;</span>);</span><br><span class="line">        <span class="title class_">Student</span> memory s = <span class="title class_">Student</span>(name, <span class="keyword">class</span>);</span><br><span class="line">        register[rollNumber] = s;</span><br><span class="line">        emit <span class="title class_">Added</span>(name, <span class="keyword">class</span>, now);</span><br><span class="line">        <span class="keyword">return</span> rollNumber;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">function</span> <span class="title function_">getStudentName</span>(<span class="params">uint rollNumber</span>) public view returns (string memory) &#123;</span><br><span class="line">        <span class="keyword">return</span> register[rollNumber].<span class="property">name</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/// @notice - 测试程序</span></span><br><span class="line"><span class="comment">/// @filename - AttendanceRegister_test.sol</span></span><br><span class="line"></span><br><span class="line">pragma solidity &gt;=<span class="number">0.4</span><span class="number">.22</span> &lt;<span class="number">0.7</span><span class="number">.0</span>;</span><br><span class="line"><span class="keyword">import</span> <span class="string">&quot;remix_tests.sol&quot;</span>; </span><br><span class="line"><span class="keyword">import</span> <span class="string">&quot;./AttendanceRegister.sol&quot;</span>;</span><br><span class="line"></span><br><span class="line">contract <span class="title class_">AttendanceRegisterTest</span> &#123;</span><br><span class="line">   </span><br><span class="line">    <span class="title class_">AttendanceRegister</span> ar;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">function</span> <span class="title function_">beforeAll</span> () public &#123;</span><br><span class="line">        ar = <span class="keyword">new</span> <span class="title class_">AttendanceRegister</span>();</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">/// solidity 版本大于等于 0.6.0 的时候，使用 try-catch 结构 </span></span><br><span class="line">    <span class="comment">/// try-catch 的具体用法参考: https://solidity.readthedocs.io/en/v0.6.0/control-structures.html#try-catch</span></span><br><span class="line">    <span class="keyword">function</span> <span class="title function_">testAddSuccessUsingTryCatch</span>(<span class="params"></span>) public &#123;</span><br><span class="line">        <span class="keyword">try</span> ar.<span class="title function_">add</span>(<span class="number">101</span>, <span class="string">&#x27;secondStudent&#x27;</span>, <span class="number">11</span>) returns (uint256 r) &#123;</span><br><span class="line">            <span class="title class_">Assert</span>.<span class="title function_">equal</span>(r, <span class="number">101</span>, <span class="string">&#x27;wrong rollNumber&#x27;</span>);</span><br><span class="line">        &#125; <span class="keyword">catch</span> <span class="title class_">Error</span>(string memory <span class="comment">/*reason*/</span>) &#123;</span><br><span class="line">            <span class="title class_">Assert</span>.<span class="title function_">ok</span>(<span class="literal">false</span>, <span class="string">&#x27;failed with reason&#x27;</span>);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (bytes memory <span class="comment">/*lowLevelData*/</span>) &#123;</span><br><span class="line">            <span class="title class_">Assert</span>.<span class="title function_">ok</span>(<span class="literal">false</span>, <span class="string">&#x27;failed unexpected&#x27;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line"></span><br><span class="line">    <span class="keyword">function</span> <span class="title function_">testAddFailureUsingTryCatch2</span>(<span class="params"></span>) public &#123;</span><br><span class="line">        <span class="keyword">try</span> ar.<span class="title function_">add</span>(<span class="number">101</span>, <span class="string">&#x27;secondStudent&#x27;</span>, <span class="number">11</span>) returns (uint256 r) &#123;</span><br><span class="line">            <span class="title class_">Assert</span>.<span class="title function_">ok</span>(<span class="literal">false</span>, <span class="string">&#x27;method execution should fail&#x27;</span>);</span><br><span class="line">        &#125; <span class="keyword">catch</span> <span class="title class_">Error</span>(string memory reason) &#123;</span><br><span class="line">            <span class="title class_">Assert</span>.<span class="title function_">equal</span>(reason, <span class="string">&#x27;Roll number not available&#x27;</span>, <span class="string">&#x27;failed with unexpected reason&#x27;</span>);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (bytes memory <span class="comment">/*lowLevelData*/</span>) &#123;</span><br><span class="line">            <span class="title class_">Assert</span>.<span class="title function_">ok</span>(<span class="literal">false</span>, <span class="string">&#x27;failed unexpected&#x27;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">/// solidity版本小于 0.6.0，使用下面这种方式</span></span><br><span class="line">    <span class="comment">/// 具体参考: https://solidity.readthedocs.io/en/v0.6.0/units-and-global-variables.html#members-of-address-types</span></span><br><span class="line">    <span class="keyword">function</span> <span class="title function_">testAddSuccessUsingCall</span>(<span class="params"></span>) public &#123;</span><br><span class="line">        bytes memory methodSign = abi.<span class="title function_">encodeWithSignature</span>(<span class="string">&#x27;add(uint256,string,uint256)&#x27;</span>, <span class="number">102</span>, <span class="string">&#x27;firstStudent&#x27;</span>, <span class="number">10</span>);</span><br><span class="line">        (bool success, bytes memory data) = <span class="title function_">address</span>(ar).<span class="title function_">call</span>(methodSign);</span><br><span class="line">        <span class="comment">// success 代表了方法是否被正确执行。</span></span><br><span class="line">        <span class="title class_">Assert</span>.<span class="title function_">equal</span>(success, <span class="literal">true</span>, <span class="string">&#x27;execution should be successful&#x27;</span>);</span><br><span class="line">        <span class="comment">// data 代表了返回结果，需要进行解码</span></span><br><span class="line">        uint rollNumber = abi.<span class="title function_">decode</span>(data, (uint256));</span><br><span class="line">        <span class="title class_">Assert</span>.<span class="title function_">equal</span>(rollNumber, <span class="number">102</span>, <span class="string">&#x27;wrong rollNumber&#x27;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>参考：<a href="https://remix-ide.readthedocs.io/en/latest/unittesting.html">https://remix-ide.readthedocs.io/en/latest/unittesting.html</a></p></blockquote>]]></content>
      
      
      <categories>
          
          <category> blockchain </category>
          
          <category> ethereum </category>
          
          <category> solidity </category>
          
      </categories>
      
      
        <tags>
            
            <tag> blockchain </tag>
            
            <tag> ethereum </tag>
            
            <tag> solidity </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>windows修改控制台默认编码</title>
      <link href="/2020/04/18/windows%E4%BF%AE%E6%94%B9%E6%8E%A7%E5%88%B6%E5%8F%B0%E9%BB%98%E8%AE%A4%E7%BC%96%E7%A0%81/"/>
      <url>/2020/04/18/windows%E4%BF%AE%E6%94%B9%E6%8E%A7%E5%88%B6%E5%8F%B0%E9%BB%98%E8%AE%A4%E7%BC%96%E7%A0%81/</url>
      
        <content type="html"><![CDATA[<p>修改windows控制台cmd的默认编码方式</p><span id="more"></span><p>命令行输入 <code>chcp</code>， 显示当前的控制台编码</p><p>输入 <code>chcp 65001</code> 会转到新的代码页，编码方式是 <code>UTF-8</code></p><p>永久修改方式，修改注册表</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">[HKEY_CURRENT_USER\Console\%SystemRoot%_System32_WindowsPowerShell_v1.0_powershell.exe]</span><br><span class="line"><span class="string">&quot;CodePage&quot;</span>=dword:0000fde9</span><br></pre></td></tr></table></figure><p><code>fde9</code> 是 <code>65001</code> 的16进制</p>]]></content>
      
      
      <categories>
          
          <category> windows </category>
          
      </categories>
      
      
        <tags>
            
            <tag> windows </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>vmware共享主机代理</title>
      <link href="/2020/04/18/vmware%E5%85%B1%E4%BA%AB%E4%B8%BB%E6%9C%BA%E4%BB%A3%E7%90%86/"/>
      <url>/2020/04/18/vmware%E5%85%B1%E4%BA%AB%E4%B8%BB%E6%9C%BA%E4%BB%A3%E7%90%86/</url>
      
        <content type="html"><![CDATA[<p>vmware虚拟机共享主机科学代理</p><span id="more"></span><ol><li>宿主机科学代理打开“允许来自互联网的链接”。</li><li>虚拟机采用桥接模式，即虚拟机可以连接到宿主机上。</li><li>虚拟机系统代理全部设置为宿主机的IP和代理端口（通常是1080）。</li></ol><p><img data-src="proxy_share_1.png" alt="虚拟机代理设置" /></p>]]></content>
      
      
      <categories>
          
          <category> vmware </category>
          
      </categories>
      
      
        <tags>
            
            <tag> vmware </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>docker基本命令</title>
      <link href="/2020/04/18/docker%E5%9F%BA%E6%9C%AC%E5%91%BD%E4%BB%A4/"/>
      <url>/2020/04/18/docker%E5%9F%BA%E6%9C%AC%E5%91%BD%E4%BB%A4/</url>
      
        <content type="html"><![CDATA[<p>关于docker使用的一些基本命令</p><span id="more"></span><h3 id="镜像-容器-仓库的概念区分"><a class="markdownIt-Anchor" href="#镜像-容器-仓库的概念区分"></a> 镜像、容器、仓库的概念区分</h3><p><img data-src="docker_1.png" alt="镜像容器仓库" /></p><h3 id="docker用户组加入当前用户"><a class="markdownIt-Anchor" href="#docker用户组加入当前用户"></a> docker用户组加入当前用户</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#添加docker用户组</span></span><br><span class="line">sudo groupadd docker     </span><br><span class="line"><span class="comment">#将登陆用户加入到docker用户组中</span></span><br><span class="line">sudo gpasswd -a <span class="variable">$USER</span> docker     </span><br><span class="line"><span class="comment">#更新用户组</span></span><br><span class="line">newgrp docker     </span><br><span class="line"><span class="comment">#测试docker命令是否可以使用sudo正常使用</span></span><br><span class="line">docker ps    </span><br></pre></td></tr></table></figure><h3 id="docker镜像源"><a class="markdownIt-Anchor" href="#docker镜像源"></a> docker镜像源</h3><p>打开<code>/etc/docker/daemon.json</code>，添加如下信息</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    <span class="string">&quot;registry-mirrors&quot;</span>: [<span class="string">&quot;https://docker.mirrors.ustc.edu.cn&quot;</span>]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="基本命令"><a class="markdownIt-Anchor" href="#基本命令"></a> 基本命令</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">-i 交互式; -t 在新容器内指定一个终端</span></span><br><span class="line">docker run -i -t ubuntu /bin/bash</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">在交互式中，查看系统版本，都可以</span></span><br><span class="line">cat /proc/version</span><br><span class="line">cat /etc/lsb-release</span><br><span class="line">uname -a</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">退出容器</span></span><br><span class="line">exit</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">显示所有的容器</span></span><br><span class="line">docker ps -a</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">查看容器的标准输出，2b1b7a428627是容器的ID号</span> </span><br><span class="line">docker logs 2b1b7a428627</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">拉取镜像到本地</span></span><br><span class="line">docker pull centos</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">停止容器</span></span><br><span class="line">docker stop 2b1b7a428627</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">启动已经停止的容器</span></span><br><span class="line">docker start 2b1b7a428627</span><br><span class="line">docker restart 2b1b7a428627</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">-d 是从后台运行容器</span></span><br><span class="line">docker run -itd --name ubuntu-test ubuntu /bin/bash</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">进入放在后台的容器，当使用<span class="built_in">exit</span>退出的时候，不会停止容器的运行</span></span><br><span class="line">docker exec -it 2b1b7a428627 /bin/bash</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">导出容器</span></span><br><span class="line">docker export 2b1b7a428627 &gt; ubuntu.tar</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">导入容器</span></span><br><span class="line">cat ubuntu.tar | docker import - ubuntu:v1</span><br><span class="line">docker import http://example.com/exampleimage.tgz imagerepo</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">显示本地镜像</span></span><br><span class="line">docker images</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">删除容器</span></span><br><span class="line">docker rm -f 2b1b7a428627</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> docker </category>
          
      </categories>
      
      
        <tags>
            
            <tag> docker </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Anaconda更新下载源</title>
      <link href="/2020/04/18/Anaconda%E6%9B%B4%E6%96%B0%E4%B8%8B%E8%BD%BD%E6%BA%90/"/>
      <url>/2020/04/18/Anaconda%E6%9B%B4%E6%96%B0%E4%B8%8B%E8%BD%BD%E6%BA%90/</url>
      
        <content type="html"><![CDATA[<p>Anaconda 更新下载源</p><span id="more"></span><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 清除索引</span></span><br><span class="line">conda clean -i</span><br><span class="line"><span class="comment"># url 不可以加引号</span></span><br><span class="line">conda config --add channels  https://mirrors.tuna.tsinghua.edu.cn/anaconda/pkgs/main</span><br><span class="line">conda config --add channels  https://mirrors.tuna.tsinghua.edu.cn/anaconda/pkgs/free</span><br><span class="line">conda config --add channels  https://mirrors.tuna.tsinghua.edu.cn/anaconda/pkgs/r</span><br><span class="line">conda config --add channels  https://mirrors.tuna.tsinghua.edu.cn/anaconda/pkgs/pro</span><br><span class="line">conda config --add channels  https://mirrors.tuna.tsinghua.edu.cn/anaconda/pkgs/msys2</span><br><span class="line"><span class="comment"># 搜索时显示通道地址</span></span><br><span class="line">conda config --<span class="built_in">set</span> show_channel_urls <span class="built_in">yes</span> </span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> python </category>
          
          <category> Anaconda </category>
          
      </categories>
      
      
        <tags>
            
            <tag> python </tag>
            
            <tag> Anaconda </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>linux keyboard</title>
      <link href="/2020/04/17/linux-keyboard/"/>
      <url>/2020/04/17/linux-keyboard/</url>
      
        <content type="html"><![CDATA[<p>关于linux上的一些快捷键</p><span id="more"></span><h3 id="键盘指令文件-etcinputrc"><a class="markdownIt-Anchor" href="#键盘指令文件-etcinputrc"></a> 键盘指令文件  <em><strong>/etc/inputrc</strong></em></h3><ol><li><code>page-down/page-up</code>: 找到 history-search，删掉 # 符号</li></ol>]]></content>
      
      
      <categories>
          
          <category> linux </category>
          
      </categories>
      
      
        <tags>
            
            <tag> linux </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>linux开启端口</title>
      <link href="/2020/04/11/linux%E5%BC%80%E5%90%AF%E7%AB%AF%E5%8F%A3/"/>
      <url>/2020/04/11/linux%E5%BC%80%E5%90%AF%E7%AB%AF%E5%8F%A3/</url>
      
        <content type="html"><![CDATA[<p>关于linux系统中端口的那些事儿</p><span id="more"></span><h1 id="打开端口"><a class="markdownIt-Anchor" href="#打开端口"></a> 打开端口</h1><p>首先看云服务器控制台安全组规则是否允许打开该端口</p><p>然后在服务器上两种方式打开端口（Centos升级到7之后，内置的防火墙已经从iptables变成了firewalld）</p><h3 id="centos"><a class="markdownIt-Anchor" href="#centos"></a> centos</h3><p><strong>防火墙</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 防火墙的启动关闭</span></span><br><span class="line">systemctl status firewalld</span><br><span class="line">systemctl start firewalld</span><br><span class="line">systemctl restart firewalld</span><br><span class="line">systemctl stop firewalld</span><br><span class="line"><span class="comment"># 打开端口</span></span><br><span class="line">firewall-cmd --zone=public --add-port=4000/tcp --permanent </span><br><span class="line">firewall-cmd --zone=public --add-port=100-500/tcp --permanent <span class="comment"># 连续端口</span></span><br><span class="line"><span class="comment"># 关闭端口</span></span><br><span class="line">firewall-cmd --zone=public --remove-port=4000/tcp --permanent</span><br><span class="line"><span class="comment"># 重启防火墙</span></span><br><span class="line">firewall-cmd --reload</span><br><span class="line"><span class="comment"># 查询指定端口</span></span><br><span class="line">firewall-cmd --query-port=4000/tcp </span><br><span class="line"><span class="comment"># 查询所有端口</span></span><br><span class="line">firewall-cmd --list-all </span><br></pre></td></tr></table></figure><h3 id="ubuntu"><a class="markdownIt-Anchor" href="#ubuntu"></a> ubuntu</h3><p>使用<code>ufw</code></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># install</span></span><br><span class="line">sudo apt-get install ufw</span><br><span class="line"></span><br><span class="line"><span class="comment"># start and stop</span></span><br><span class="line">sudo ufw <span class="built_in">enable</span></span><br><span class="line">sudo ufw <span class="built_in">disable</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># status</span></span><br><span class="line">sudo ufw status verbose</span><br><span class="line"></span><br><span class="line"><span class="comment"># open port</span></span><br><span class="line"><span class="comment">### 允许ssh连接22端口</span></span><br><span class="line">sudo ufw allow ssh</span><br><span class="line"><span class="comment">### 允许 HTTP 连接：</span></span><br><span class="line">sudo ufw allow http</span><br><span class="line"><span class="comment">### 也可以直接指定端口号 80：</span></span><br><span class="line">sudo ufw allow 80/tcp</span><br><span class="line"><span class="comment">### 也可以使用应用程序配置文件，在本例中为「Nginx HTTP」：</span></span><br><span class="line">sudo ufw allow <span class="string">&#x27;Nginx HTTP&#x27;</span></span><br><span class="line"><span class="comment">### 允许 HTTPS 连接：</span></span><br><span class="line">sudo ufw allow https</span><br><span class="line"><span class="comment">### 也可以直接指定端口号 443：</span></span><br><span class="line">sudo ufw allow 443/tcp</span><br><span class="line"><span class="comment">### 也可以使用应用程序配置文件，在本例中为「Nginx HTTPS」：</span></span><br><span class="line">sudo ufw allow <span class="string">&#x27;Nginx HTTPS&#x27;</span></span><br><span class="line"><span class="comment">### 打开8080端口</span></span><br><span class="line">sudo ufw allow 8080/tcp</span><br><span class="line"></span><br><span class="line"><span class="comment"># deny port</span></span><br><span class="line"><span class="comment">### both tcp and udp</span></span><br><span class="line">sudo ufw deny 53</span><br><span class="line"><span class="comment">### only tcp</span></span><br><span class="line">sudo ufw deny 53/tcp</span><br><span class="line"></span><br><span class="line"><span class="comment"># delete rule</span></span><br><span class="line">sudo ufw delete deny 80/tcp</span><br><span class="line">sudo ufw delete allow 53/udp</span><br><span class="line"></span><br><span class="line"><span class="comment"># add port range, use &quot;:&quot;</span></span><br><span class="line">ufw allow 11200:11299/tcp</span><br></pre></td></tr></table></figure><h3 id="linux原始"><a class="markdownIt-Anchor" href="#linux原始"></a> linux原始</h3><p><strong>iptables</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">iptables -I INPUT -p tcp -m state --state NEW -m tcp --dport 4000 -j ACCEPT</span><br><span class="line">iptables -I INPUT -p tcp -m state --state NEW -m tcp --dport 4000:5000 -j ACCEPT # 连续端口</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> linux </category>
          
          <category> port </category>
          
      </categories>
      
      
        <tags>
            
            <tag> linux </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>hexo备份恢复</title>
      <link href="/2020/04/11/hexo%E5%A4%87%E4%BB%BD%E6%81%A2%E5%A4%8D/"/>
      <url>/2020/04/11/hexo%E5%A4%87%E4%BB%BD%E6%81%A2%E5%A4%8D/</url>
      
        <content type="html"><![CDATA[<p>hexo 备份如何恢复</p><span id="more"></span><h3 id="下载仓库"><a class="markdownIt-Anchor" href="#下载仓库"></a> 下载仓库</h3><p>从git上下载仓库，并切换分支</p><h3 id="安装模块"><a class="markdownIt-Anchor" href="#安装模块"></a> 安装模块</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"># 先安装npm</span><br><span class="line">yum install npm</span><br><span class="line"># 查看版本</span><br><span class="line">npm -v</span><br><span class="line">node -v</span><br></pre></td></tr></table></figure><p>下载完之后，<a href="/2020/04/10/npm-%E6%9B%B4%E6%8D%A2%E6%BA%90/">更换npm下载源</a></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"># 安装modules, 速度非常慢, 可以先更换npm下载源</span><br><span class="line">npm install</span><br><span class="line">npm install -g hexo-cli</span><br><span class="line"># 查看hexo是否安装成功</span><br><span class="line">hexo -v</span><br></pre></td></tr></table></figure><p>如果执行<code>hexo</code>命令显示异常，如下图：</p><p><img data-src="exception.png" alt="exception" /></p><p>那么需要更新nodejs</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"># 更新npm</span><br><span class="line">npm i -g npm@latest</span><br><span class="line"># 更新nodejs</span><br><span class="line">npm install -g n</span><br><span class="line">n latest</span><br><span class="line">n # 查看已安装的版本</span><br><span class="line">node -v # 查看是否更新成功</span><br></pre></td></tr></table></figure><h3 id="部署git"><a class="markdownIt-Anchor" href="#部署git"></a> 部署git</h3><p>主要是两个方面：</p><ul><li>设置全局用户名和邮箱(用于<code>commit</code>)</li><li>生成密钥(用于<code>push</code>权限)</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">git config --global user.name &quot;your name&quot;</span><br><span class="line">git config --global user.email &quot;your email&quot;</span><br><span class="line">ssh-keygen -t rsa -C &quot;1301862177@qq.com&quot;</span><br><span class="line"># 生成公钥之后，复制到github账户的ssh_and_GPG_keys</span><br><span class="line"># 然后测试链接是否成功</span><br><span class="line">ssh -T git@github.com</span><br><span class="line"># 设置下面不用每次push时输入账号密码</span><br><span class="line">git config --global credential.helper store</span><br></pre></td></tr></table></figure><h3 id="关于-hexo-server"><a class="markdownIt-Anchor" href="#关于-hexo-server"></a> 关于 hexo-server</h3><p>因为是放在服务器上，所以希望执行 <code>hexo server</code> 之后，外网也可以预览。</p><p>修改 <code>node_modules/hexo-server/lib/server.js</code></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">function formatAddress(ip, port, root) &#123;</span><br><span class="line">  // if (ip === &#x27;0.0.0.0&#x27;) ip = &#x27;localhost&#x27;; 把这一行注释掉</span><br><span class="line"></span><br><span class="line">  return format(&#x27;http://%s:%d%s&#x27;, ip, port, root);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>然后打开服务器 <code>4000</code> 端口, <a href="/2020/04/11/linux%E5%BC%80%E5%90%AF%E7%AB%AF%E5%8F%A3/">服务器打开端口在这</a></p><p>执行命令</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hexo server -i 0.0.0.0</span><br></pre></td></tr></table></figure><p>打开浏览器，打开控制台，看看缺少哪些js文件，就到<code>theme</code>的<code>_config.yml</code>中找github地址进行下载</p>]]></content>
      
      
      <categories>
          
          <category> hexo </category>
          
      </categories>
      
      
        <tags>
            
            <tag> hexo </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>npm 安装模块</title>
      <link href="/2020/04/10/npm-%E5%AE%89%E8%A3%85%E6%8F%92%E4%BB%B6/"/>
      <url>/2020/04/10/npm-%E5%AE%89%E8%A3%85%E6%8F%92%E4%BB%B6/</url>
      
        <content type="html"><![CDATA[<p>npm install [–save]</p><span id="more"></span><h3 id="npm-install-modulename-命令"><a class="markdownIt-Anchor" href="#npm-install-modulename-命令"></a> npm install moduleName 命令</h3><ol><li>安装模块到项目node_modules目录下。</li><li>不会将模块依赖写入devDependencies或dependencies 节点。</li><li>运行 npm install 初始化项目时不会下载模块。</li></ol><h3 id="npm-install-g-modulename-命令"><a class="markdownIt-Anchor" href="#npm-install-g-modulename-命令"></a> npm install -g moduleName 命令</h3><ol><li>安装模块到全局，不会在项目node_modules目录中保存模块包。</li><li>不会将模块依赖写入devDependencies或dependencies 节点。</li><li>运行 npm install 初始化项目时不会下载模块。</li></ol><h3 id="npm-install-save-modulename-命令"><a class="markdownIt-Anchor" href="#npm-install-save-modulename-命令"></a> npm install -save moduleName 命令</h3><ol><li>安装模块到项目node_modules目录下。</li><li>会将模块依赖写入dependencies 节点。</li><li>运行 npm install 初始化项目时，会将模块下载到项目目录下。</li><li>运行npm install --production或者注明NODE_ENV变量值为production时，会自动下载模块到node_modules目录中。</li></ol><h3 id="npm-install-save-dev-modulename-命令"><a class="markdownIt-Anchor" href="#npm-install-save-dev-modulename-命令"></a> npm install -save-dev moduleName 命令</h3><ol><li>安装模块到项目node_modules目录下。</li><li>会将模块依赖写入devDependencies 节点。</li><li>运行 npm install 初始化项目时，会将模块下载到项目目录下。</li><li>运行npm install --production或者注明NODE_ENV变量值为production时，不会自动下载模块到node_modules目录中。</li></ol><h3 id="自定义-node_modules-目录"><a class="markdownIt-Anchor" href="#自定义-node_modules-目录"></a> 自定义 node_modules 目录</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm config set prefix /home/kimroniny/.node</span><br></pre></td></tr></table></figure><h3 id="总结"><a class="markdownIt-Anchor" href="#总结"></a> 总结</h3><p>devDependencies 节点下的模块是我们在开发时需要用的，比如项目中使用的 gulp ，压缩css、js的模块。这些模块在我们的项目部署后是不需要的，所以我们可以使用 -save-dev 的形式安装。像 express 这些模块是项目运行必备的，应该安装在 dependencies 节点下，所以我们应该使用 -save 的形式安装。</p>]]></content>
      
      
      <categories>
          
          <category> npm </category>
          
      </categories>
      
      
        <tags>
            
            <tag> npm </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>pip 更换源</title>
      <link href="/2020/04/10/pip-%E6%9B%B4%E6%8D%A2%E6%BA%90/"/>
      <url>/2020/04/10/pip-%E6%9B%B4%E6%8D%A2%E6%BA%90/</url>
      
        <content type="html"><![CDATA[<p>pip 更换下载源</p><span id="more"></span><h3 id="临时更换"><a class="markdownIt-Anchor" href="#临时更换"></a> 临时更换</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pip install requests -i https://pypi.tuna.tsinghua.edu.cn/simple</span><br></pre></td></tr></table></figure><h3 id="全局更换"><a class="markdownIt-Anchor" href="#全局更换"></a> 全局更换</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pip config set global.index-url https://pypi.tuna.tsinghua.edu.cn/simple</span><br></pre></td></tr></table></figure><h3 id="其他源"><a class="markdownIt-Anchor" href="#其他源"></a> 其他源</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 豆瓣</span></span><br><span class="line">https://pypi.doubanio.com/simple/</span><br><span class="line"><span class="comment"># 阿里云    </span></span><br><span class="line">https://mirrors.aliyun.com/pypi/simple/</span><br><span class="line"><span class="comment"># 清华大学</span></span><br><span class="line">https://pypi.tuna.tsinghua.edu.cn/simple/</span><br><span class="line">https://mirrors.tuna.tsinghua.edu.cn/pypi/web/simple/</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> python </category>
          
          <category> pip </category>
          
      </categories>
      
      
        <tags>
            
            <tag> python </tag>
            
            <tag> pip </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>npm 更换源，设置代理</title>
      <link href="/2020/04/10/npm-%E6%9B%B4%E6%8D%A2%E6%BA%90/"/>
      <url>/2020/04/10/npm-%E6%9B%B4%E6%8D%A2%E6%BA%90/</url>
      
        <content type="html"><![CDATA[<p>npm 更换下载源，设置代理</p><span id="more"></span><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">npm config <span class="built_in">set</span> registry https://registry.npm.taobao.org/</span><br><span class="line"></span><br><span class="line"><span class="comment"># 设置代理</span></span><br><span class="line">npm config <span class="built_in">set</span> proxy http://192.168.1.100:8080</span><br><span class="line">npm config <span class="built_in">set</span> https-proxy http://192.168.1.100:8080</span><br><span class="line"></span><br><span class="line"><span class="comment"># 删除代理</span></span><br><span class="line">npm config <span class="built_in">rm</span> proxy</span><br><span class="line">npm config <span class="built_in">rm</span> https-proxy</span><br><span class="line"></span><br><span class="line"><span class="comment"># 查看设置</span></span><br><span class="line">npm config get registry</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> npm </category>
          
      </categories>
      
      
        <tags>
            
            <tag> npm </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>python 单元测试</title>
      <link href="/2020/04/09/python-%E5%8D%95%E5%85%83%E6%B5%8B%E8%AF%95/"/>
      <url>/2020/04/09/python-%E5%8D%95%E5%85%83%E6%B5%8B%E8%AF%95/</url>
      
        <content type="html"><![CDATA[<p>关于python单元测试的常用内容</p><span id="more"></span><h2 id="基本单元测试"><a class="markdownIt-Anchor" href="#基本单元测试"></a> 基本单元测试</h2><p>使用python自带的unittest进行单元测试, 非常方便。</p><ol><li>首先创建测试类, 继承 <code>unittest.TestCase</code>。</li><li>编写测试用例, 一般命名为 <code>test+函数名</code></li><li><code>setUp()</code> 方法是在运行测试用例开始之前执行, <code>tearDown()</code> 则是在运行测试用例结束之后执行</li><li>使用断言, unittest有丰富的断言方法。</li></ol><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> unittest</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">TestCase</span>(unittest.TestCase):</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">setUp</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="built_in">super</span>(TestCase, self).setUp()</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">tearDown</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="built_in">super</span>(TestCase, self).tearDown()</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">testFunc</span>(<span class="params">self</span>):</span><br><span class="line">        self.assertTrue(<span class="literal">True</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    unittest.main()</span><br></pre></td></tr></table></figure><h2 id="tornado-单元测试"><a class="markdownIt-Anchor" href="#tornado-单元测试"></a> tornado 单元测试</h2><p>tornado服务测试采用内置的测试类 <code>AsyncHTTPTestCase</code>, 不需要单独在后台开启服务, 只需要实现 <code>get_app()</code> 方法, 就可以达到<strong>在测试过程中自动开启服务，测试结束后自动关闭服务</strong>的效果。</p><p>示例如下：</p><ol><li>创建tornado服务类 <code>class MapCheck(tornado.web.RequestHandler)</code></li><li>创建测试类 <code>class TestClass(AsyncHTTPTestCase)</code></li></ol><ul><li>继承tornado内置单元测试类 <code>AsyncHTTPTestCase</code></li><li>实现 <code>get_app()</code>方法</li><li>创建测试用例 <code>test_server()</code><ul><li>使用requests模块构造请求体 <code>body</code></li><li>使用 <code>AsyncHTTPTestCase</code> 类的 <code>fetch()</code> 方法请求接口</li></ul></li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># -*-encoding=utf-8-*-</span></span><br><span class="line"><span class="comment"># filename: test_tornado</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> unittest, sys</span><br><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"><span class="keyword">import</span> tornado.web</span><br><span class="line"><span class="keyword">from</span> tornado.testing <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> . <span class="keyword">import</span> test_tornado <span class="keyword">as</span> entry</span><br><span class="line"></span><br><span class="line"><span class="comment">### tornado服务</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">MapCheck</span>(tornado.web.RequestHandler):</span><br><span class="line">   <span class="keyword">def</span> <span class="title function_">post</span>(<span class="params">self</span>):</span><br><span class="line">      self.write(<span class="string">&quot;success&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">make_app</span>(<span class="params">args</span>):</span><br><span class="line">   <span class="keyword">return</span> tornado.web.Application([</span><br><span class="line">      (<span class="string">r&quot;/map_check&quot;</span>, MapCheck, <span class="built_in">dict</span>(args=args)),</span><br><span class="line">   ])</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">getArg</span>():</span><br><span class="line">   <span class="keyword">return</span> &#123;&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">### 测试类</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">TestClass</span>(<span class="title class_ inherited__">AsyncHTTPTestCase</span>): <span class="comment"># 使用tornado内置测试类</span></span><br><span class="line"></span><br><span class="line">   <span class="keyword">def</span> <span class="title function_">setUp</span>(<span class="params">self</span>):</span><br><span class="line">      <span class="built_in">super</span>(TestServer, self).setUp() <span class="comment"># 必须有这句</span></span><br><span class="line">    </span><br><span class="line">   <span class="keyword">def</span> <span class="title function_">tearDown</span>(<span class="params">self</span>):</span><br><span class="line">      <span class="built_in">super</span>(TestServer, self).tearDown() </span><br><span class="line"></span><br><span class="line">   <span class="keyword">def</span> <span class="title function_">get_app</span>(<span class="params">self</span>): <span class="comment"># 必须实现的方法, 调用make_app()函数</span></span><br><span class="line">      self.args = entry.getArg()</span><br><span class="line">      <span class="keyword">return</span> entry.make_app(self.args)</span><br><span class="line"></span><br><span class="line">   <span class="keyword">def</span> <span class="title function_">test_server</span>(<span class="params">self</span>):</span><br><span class="line">      files = []</span><br><span class="line">      data = &#123;&#125;</span><br><span class="line">      <span class="comment"># 构造请求体</span></span><br><span class="line">      a = requests.Request(url=<span class="string">&quot;http://localhost/test&quot;</span>, files=files, data=data)</span><br><span class="line">      prepare = a.prepare()</span><br><span class="line">      content_type = prepare.headers.get(<span class="string">&#x27;Content-Type&#x27;</span>)</span><br><span class="line">      body = prepare.body</span><br><span class="line">      <span class="comment"># 使用fetch()调用tornado接口，传入请求body, 返回response</span></span><br><span class="line">      headers = &#123;<span class="string">&quot;Content-Type&quot;</span>: content_type,&#125;</span><br><span class="line">      response = self.fetch(<span class="string">&#x27;/map_check&#x27;</span>, method=<span class="string">&quot;POST&quot;</span>, body=body, headers=headers)</span><br><span class="line">      self.assertEqual(response.code, <span class="number">200</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">   unittest.main()</span><br></pre></td></tr></table></figure><h2 id="grpc-单元测试"><a class="markdownIt-Anchor" href="#grpc-单元测试"></a> grpc 单元测试</h2><p>grpc服务的单元测试, 使用到 <code>setUp()</code> 以及 <code>tearDown()</code> 两个方法。</p><ul><li>在 <code>setUp()</code> 中启动grpc服务</li><li>在 <code>tearDown()</code> 中结束grpc服务</li><li>在测试用例中直接按照grpc客户端访问服务端写法来写即可</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># -*- coding: utf8 -*-</span></span><br><span class="line"><span class="keyword">import</span> unittest</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> grpc_http_server <span class="keyword">as</span> entry</span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> proto <span class="keyword">import</span> audio_pb2, audio_pb2_grpc</span><br><span class="line"><span class="keyword">from</span> concurrent <span class="keyword">import</span> futures</span><br><span class="line"><span class="keyword">import</span> grpc</span><br><span class="line"></span><br><span class="line">port = <span class="number">10051</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">AudioClassificationTest</span>(unittest.TestCase):</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">setUp</span>(<span class="params">self</span>):</span><br><span class="line">        options = [(<span class="string">&#x27;grpc.max_send_message_length&#x27;</span>, <span class="number">1000</span> * <span class="number">1024</span> * <span class="number">1024</span> * <span class="number">2</span>),</span><br><span class="line">                   (<span class="string">&#x27;grpc.max_receive_message_length&#x27;</span>, <span class="number">1000</span> * <span class="number">1024</span> * <span class="number">1024</span> * <span class="number">2</span>)]</span><br><span class="line">        self.server = grpc.server(futures.ThreadPoolExecutor(max_workers=args.max_workers), options=options)</span><br><span class="line">        audio_pb2_grpc.add_GreeterServicer_to_server(entry.Greeter(), self.server)</span><br><span class="line">        self.server.add_insecure_port(<span class="string">&#x27;[::]:%d&#x27;</span> % port)</span><br><span class="line">        self.server.start()</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">tearDown</span>(<span class="params">self</span>):</span><br><span class="line">        self.server.stop(<span class="number">0</span>)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">test_video_check</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="keyword">with</span> grpc.insecure_channel(<span class="string">&#x27;localhost:%d&#x27;</span> % port) <span class="keyword">as</span> channel:</span><br><span class="line">            stub = audio_pb2_grpc.GreeterStub(channel)</span><br><span class="line">            req = audio_pb2.VideoRequest()</span><br><span class="line">            rep = stub.audio_classify(req)</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&quot;__main__&quot;</span>:</span><br><span class="line">    unittest.main()</span><br></pre></td></tr></table></figure><h2 id="coverage-代码覆盖率单元测试"><a class="markdownIt-Anchor" href="#coverage-代码覆盖率单元测试"></a> Coverage 代码覆盖率单元测试</h2><p>coverage 用来检测测试代码对被测代码的覆盖率如何。</p><p>有两种组织方式:</p><ul><li>写在 <code>main</code> 主体中。</li></ul><blockquote><p>在这种方式中, 不能通过 <code>unittest.main()</code> 的方式执行测试, 需要通过 <code>runner</code> 来执行测试用例, 这一点可以通过 <code>main</code> 主体中的代码看到。</p></blockquote><ul><li>写在测试用例中。</li></ul><blockquote><p>在这种方式中, <code>main</code>主体中的执行方式随意, coverage的启动与结束需要包裹在测试用例之中, 这一点可以在 <code>test_server()</code>方法中的注释部分看到。</p></blockquote><p>最后生成报告有多种方式(xml, json, html), 通过指定 <code>omit</code> 参数, 可以排除不需要的测试覆盖路径(比如某些系统函数)</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># -*-encoding=utf-8-*-</span></span><br><span class="line"><span class="keyword">import</span> unittest, sys</span><br><span class="line"><span class="keyword">import</span> coverage</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">TestCase</span>(unittest.TestCase):</span><br><span class="line"></span><br><span class="line">   <span class="keyword">def</span> <span class="title function_">test_server</span>(<span class="params">self</span>):</span><br><span class="line">      <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">      如果不在main函数里面写cov，也可以直接在测试用例里面写</span></span><br><span class="line"><span class="string">      &quot;&quot;&quot;</span></span><br><span class="line">      <span class="comment"># cov = coverage.Coverage()</span></span><br><span class="line">      <span class="comment"># cov.start()</span></span><br><span class="line">      self.assertTrue(<span class="literal">True</span>)</span><br><span class="line">      <span class="comment"># cov.stop()</span></span><br><span class="line">      <span class="comment"># cov.save()</span></span><br><span class="line">      <span class="comment"># cov.report()</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">   runner = unittest.TextTestRunner()</span><br><span class="line">   suite = unittest.TestLoader().loadTestsFromTestCase(TestCase)</span><br><span class="line"></span><br><span class="line">   <span class="comment"># 如果不在main函数里面写cov，也可以直接在测试用例里面写，见 test_server()</span></span><br><span class="line">   <span class="comment"># 启动 cov</span></span><br><span class="line">   cov = coverage.Coverage()</span><br><span class="line">   cov.start()</span><br><span class="line"></span><br><span class="line">   <span class="comment"># 运行测试用例</span></span><br><span class="line">   runner.run(suite)</span><br><span class="line"></span><br><span class="line">   <span class="comment"># 关闭 cov</span></span><br><span class="line">   cov.stop()</span><br><span class="line">   cov.save()</span><br><span class="line">   cov.xml_report(</span><br><span class="line">      outfile=<span class="string">&quot;coverage.xml&quot;</span>,</span><br><span class="line">      omit=[<span class="string">&quot;./map_check/china_map_pb2*&quot;</span>, <span class="string">&quot;./modulecall/*&quot;</span>, <span class="string">&quot;/usr/local/ons_agent/names/nameapi.py&quot;</span>]</span><br><span class="line">   )</span><br></pre></td></tr></table></figure><h2 id="mock-单元测试"><a class="markdownIt-Anchor" href="#mock-单元测试"></a> Mock 单元测试</h2><p>用来指定某些函数的返回值, 当调用该函数的时候, 直接返回该指定值。</p><p>在下面的简单示例中, <code>beishu()</code>的返回值是10, 但是在测试用例中通过 <code>mock.Mock(return_value=5)</code> 指定它的返回值为5, 再继续进行测试。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># -*-encoding=utf-8-*-</span></span><br><span class="line"><span class="comment"># filename: test_mock</span></span><br><span class="line"><span class="keyword">import</span> unittest, sys, mock</span><br><span class="line"><span class="keyword">from</span> . <span class="keyword">import</span> test_mock <span class="keyword">as</span> client</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">beishu</span>():</span><br><span class="line">    <span class="keyword">return</span> <span class="number">10</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">test_add</span>(<span class="params">a, b</span>):</span><br><span class="line">    <span class="keyword">return</span> beishu() * (a+b)</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">TestMathFunc</span>(unittest.TestCase):</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">testAdd</span>(<span class="params">self</span>):</span><br><span class="line">        beishu = mock.Mock(return_value=<span class="number">5</span>)</span><br><span class="line">        client.beishu = beishu</span><br><span class="line">        self.assertEqual(test_add(<span class="number">2</span>, <span class="number">3</span>), <span class="number">25</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    unittest.main()</span><br></pre></td></tr></table></figure><h2 id="单元测试-生成测试报告"><a class="markdownIt-Anchor" href="#单元测试-生成测试报告"></a> 单元测试, 生成测试报告</h2><p>可以使用包 <code>HtmlTestRunner</code> 来生成html类型的单元测试报告。</p><p>使用 <code>pip</code> 进行安装, <code>pip install html-testRunner</code></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># -*-encoding=utf-8-*-</span></span><br><span class="line"><span class="keyword">import</span> unittest, HtmlTestRunner</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">add</span>(<span class="params">a, b</span>):</span><br><span class="line">    <span class="keyword">return</span> a+b</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">TestCase</span>(unittest.TestCase):</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">testAdd</span>(<span class="params">self</span>):</span><br><span class="line">        self.assertEqual(add(<span class="number">1</span>, <span class="number">2</span>), <span class="number">3</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    runner = HtmlTestRunner.HTMLTestRunner(</span><br><span class="line">        report_title=<span class="string">&#x27;TestCase Test&#x27;</span>,</span><br><span class="line">        report_name=<span class="string">&#x27;TestCase&#x27;</span>,</span><br><span class="line">        output=<span class="string">&#x27;reports/&#x27;</span></span><br><span class="line">    )</span><br><span class="line">    itersuite = unittest.TestLoader().loadTestsFromTestCase(TestCase)</span><br><span class="line">    runner.run(itersuite)</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> python </category>
          
          <category> unittest </category>
          
      </categories>
      
      
        <tags>
            
            <tag> python </tag>
            
            <tag> unittest </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>solidity合约开发</title>
      <link href="/2020/04/02/solidity%E5%90%88%E7%BA%A6%E5%BC%80%E5%8F%91/"/>
      <url>/2020/04/02/solidity%E5%90%88%E7%BA%A6%E5%BC%80%E5%8F%91/</url>
      
        <content type="html"><![CDATA[<p>关于以太坊智能合约solidity开发过程中的一个tips</p><span id="more"></span><ol><li>remix访问本地文件</li></ol><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">remixd -s absolute_path --remix-ide https://remix.ethereum.org</span><br><span class="line">// 注意没有最后的左斜杠</span><br></pre></td></tr></table></figure><p>然后点击 <code>connect to localhost</code></p><ol start="2"><li>pycharm中的solidity插件</li></ol>]]></content>
      
      
      <categories>
          
          <category> blockchain </category>
          
          <category> ethereum </category>
          
          <category> solidity </category>
          
      </categories>
      
      
        <tags>
            
            <tag> blockchain </tag>
            
            <tag> ethereum </tag>
            
            <tag> solidity </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Steven Jobs:Stay Hungry, Stay Foolish</title>
      <link href="/2020/03/22/Steven-Jobs-in-Stanford/"/>
      <url>/2020/03/22/Steven-Jobs-in-Stanford/</url>
      
        <content type="html"><![CDATA[<p>Stay Hungry, Stay Foolish<br />Steve Jobs</p><span id="more"></span><iframe width="640" height="480" src="https://www.youtube.com/embed/UF8uR6Z6KLc" frameborder="0" allow="accelerometer; autoplay; encrypted-media; gyroscope; picture-in-picture" allowfullscreen></iframe><p>I am honoured to be with you today at your commencement from one of the finest universities in the world. Truth be told, I never graduated from college. this is the closest I’ve ever gotten to a college graduation. Today I want to tell you three stories from my life. That’s it. No big deal. Just three stories.</p><p>The first story is about connecting the dots. I dropped out of Reed College after the first 6 months, but then stayed around as a drop-in for another 18 months or so before I really quit. So why did I drop out?</p><p>It started before I was born. My biological mother was a young, unwed college graduate student, and she decided to put me up for adoption. She felt very strongly that I should be adopted by college graduates, so everything was all set for me to be adopted at birth by a lawyer and his wife. Except that when I popped out they decided at the last minute that they really wanted a girl.</p><p>So my parents, who were on a waiting list, got a call in the middle of the night asking: “We’ve got an unexpected baby boy; do you want him?” They said: “Of course.” My biological mother later found out that my mother had never graduated from college and that my father had never graduated from high school. She refused to sign the final adoption papers. She only relented a few months later when my parents promised that I would someday go to college. (This was the start in my life.)</p><p>And 17 years later I did go to college. But I naively chose a college that was almost as expensive as Stanford, and all of my working-class parents’ savings were being spent on my college tuition. After six months, I couldn’t see the value in it. I had no idea what I wanted to do with my life and no idea how college was going to help me figure it out. And here I was spending all of the money my parents had saved their entire life.</p><p><em><strong>So I decided to drop out and trust that it would all work out OK. It was pretty scary at the time, but looking back it was one of the best decisions I ever made. The minute I dropped out I could stop taking the required classes that didn’t interest me, and begin dropping in on the ones that looked far more interesting.</strong></em></p><p><em><strong>It wasn’t all romantic. I didn’t have a dorm room, so I slept on the floor in friends’ rooms, I returned coke bottles for the 5￠deposits to buy food with, and I would walk the 7 miles across town every Sunday night to get one good meal a week at the Hare Krishna temple. I loved it. And much of what I stumbled into by following my curiosity and intuition turned out to be priceless later on.</strong></em> Let me give you one example:</p><p>Reed College at that time offered perhaps the best calligraphy instruction in the country. Throughout the campus every poster, every label on every drawer, was beautifully hand calligraphed. Because I had dropped out and didn’t have to take the normal classes, I decided to take a calligraphy class to learn how to do this. I learned about serif and san serif typefaces, about varying the amount of space between different letter combinations, about what makes great typography great. It was beautiful, historical, artistically subtle in a way that science can’t capture, and I found it fascinating.</p><p>None of this had even a hope of any practical application in my life. But ten years later, when we were designing the first Macintosh computer, it all came back to me. And we designed it all into the Mac. It was the first computer with beautiful typography. If I had never dropped in on that single course in college, the Mac would have never had multiple typefaces or proportionally spaced fonts. And since Windows just copied the Mac, it’s likely that no personal computer would have them. If I had never dropped out, I would have never dropped in on this calligraphy class, and personal computers might not have the wonderful typography that they do. Of course it was impossible to connect the dots looking forward when I was in college. But it was very, very clear looking backwards ten years later.</p><p>Again, you can’t connect the dots looking forward; you can only connect them looking backwards. So you have to trust that the dots will somehow connect in your future. You have to trust in something – your gut, destiny, life, karma, whatever – because believing that the dots will connect down the road will give you the confidence to follow your heart, even when it leads you off the well-worn path, and that will make all the difference.</p><p>My second story is about love and loss.</p><p>I was lucky – I found what I loved to do early in life. Wolz and I started Apple in my parents’ garage when I was 20. We worked hard, and in 10 years Apple had grown from just the two of us in a garage into a $2 billion company with over 4000 employees. We had just released our finest creation — the Macintosh — a year earlier, and I had just turned 30.</p><p>And then I got fired. How can you get fired from a company you started? Well, as Apple grew we hired someone who I thought was very talented to run the company with me, and for the first year or so things went well. But then our visions of the future began to diverge and eventually we had a falling out. When we did, our Board of Directors sided with him. So at 30 I was out. And very publicly out. What had been the focus of my entire adult life was gone, and it was devastating.</p><p>I really didn’t know what to do for a few months. I felt that I had let the previous generation of entrepreneurs down – that I had dropped the baton as it was being passed to me. I met with David Packard and Bob Noyce and tried to apologize for screwing up so badly. I was a very public failure, and I even thought about running away from the valley. But something slowly began to dawn on me – I still loved what I did. The turn of events at Apple had not changed that one bit. I had been rejected, but I was still in love. And so I decided to start over.</p><p>I didn’t see it then, but it turned out that getting fired from Apple was the best thing that could have ever happened to me. The heaviness of being successful was replaced by the lightness of being a beginner again, less sure about everything. It freed me to enter one of the most creative periods of my life.</p><p>During the next five years, I started a company named NeXT, another company named Pixar, and fell in love with an amazing woman who would become my wife. Pixar went on to create the worlds first computer animated feature film, Toy Story, and is now the most successful animation studio in the world. In a remarkable turn of events, Apple bought NeXT, I returned to Apple, and the technology we developed at NeXT is at the heart of Apple’s current renaissance. And Laurene and I have a wonderful family together.</p><p>I’m pretty sure none of this would have happened if I hadn’t been fired from Apple. It was awful tasted medicine, but I guess the patient needed it. Sometimes life hits you in the head with a brick. Don’t lose faith. I’ convinced that the only thing that kept me going was that I loved what I did. You’ve got to find what you love.</p><p>And that is as true for your work as it is for your lovers. Your work is going to fill a large part of your life, and the only way to be truly satisfied is to do what you believe is great work. And the only way to do great work is to love what you do. If you haven’t found it yet, keep looking. Don’t settle. As with all matters of the heart, you’ll know when you find it. And, like any great relationship, it just gets better and better as the years roll on. So keep looking until you find it. Don’t settle.</p><p>My third story is about death.</p><p>When I was 17, I read a quote that went something like: “If you live each day as if it was your last, someday you’ll most certainly be right.” It made an impression on me, and since then, for the past 33 years, I have looked in the mirror every morning and asked myself: “If today were the last day of my life, would I want to do what I am about to do today?” And whenever the answer has been “No” for too many days in a row, I know I need to change something.</p><p>Remembering that I’ll be dead soon is the most important tool I’ve ever encountered to help me make the big choices in life. Because almost everything – all external expectations, all pride, all fear of embarrassment or failure – these things just fall away in the face of death, leaving only what is truly important. Remembering that you are going to die is the best way I know to avoid the trap of thinking you have something to lose. You are already naked. There is no reason not to follow your heart.</p><p>About a year ago I was diagnosed with cancer. I had a scan at 7:30 in the morning, and it clearly showed a tumour on my pancreas. I didn’t even know what a pancreas was. The doctors told me this was almost certainly a type of cancer that is incurable, and that I should expect to live no longer than three to six months. My doctor advised me to go home and get my affairs in order, which is doctor’s code for prepare to die. It means to try to tell your kids everything you thought you’d have the next 10 years to tell them in just a few months. It means to make sure everything is buttoned up so that it will be as easy as possible for your family. It means to say your goodbyes.</p><p>I lived with that diagnosis all day. Later that evening I had a biopsy, where they stuck an endoscope down my throat, through my stomach and into my intestines, put a needle into my pancreas and got a few cells from the tumour. I was sedated, but my wife, who was there, told me that when they viewed the cells under a microscope the doctors started crying because it turned out to be a very rare form of pancreatic cancer that is curable with surgery. I had the surgery and I’m fine now.</p><p>This was the closest I’ve been to facing death and I hope it’s the closest I get for a few more decades. Having lived through it, I can now say this to you with a bit more certainty than when death was a useful but purely intellectual concept: No one wants to die.</p><p>Even people who want to go to heaven don’t want to die to get there. And yet death is the destination we all share. No one has ever escaped it. And that is as it should be, because Death is very likely the single best invention of Life. It is Life’s change agent. It clears out the old to make way for the new. Right now the new is you, but someday not too long from now, you will gradually become the old and be cleared away. Sorry to be so dramatic, but it is quite true.</p><p>Your time is limited, so don’t waste it living someone else’s life. Don’t be trapped by dogma – which is living with the results of other people’s thinking. Don’t let the noise of others’ opinions drown out your own inner voice. And the most important, have the courage to follow your heart and intuition. They somehow already know what you truly want to become. Everything else is secondary.</p><p>When I was young, there was an amazing publication called The Whole Earth Catalog, which was one of the bibles of my generation. It was created by a fellow named Stewart Brand not far from here in Menlo Park, and he brought it to life with his poetic touch. This was in the late 1960’s, before personal computers and desktop publishing, so it was all made with typewriters, scissors, and Polaroid cameras. It was sort of like Google in paperback form, 35 years before Google came along: it was idealistic, and overflowing with neat tools and great notions.</p><p>Stewart and his team put out several issues of The Whole Earth Catalog, and then when it had run its course, they put out a final issue. It was the mid-1970s, and I was your age. On the back cover of their final issue was a photograph of an early morning country road, the kind you might find yourself hitchhiking on if you were so adventurous. Beneath it were the words: “Stay Hungry. Stay Foolish.” It was their farewell message as they signed off. Stay Hungry. Stay Foolish. And I have always wished that for myself. And now, as you graduate to begin anew, I wish that for you.</p><p>Stay Hungry. Stay Foolish.</p><p>Thank you all very much.</p>]]></content>
      
      
      <categories>
          
          <category> speech </category>
          
      </categories>
      
      
        <tags>
            
            <tag> speech </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Leonardo DiCaprio`s Oscar Acceptance Speech</title>
      <link href="/2020/03/09/Leonardo-DiCaprio-s-Oscar-Acceptance-Speech/"/>
      <url>/2020/03/09/Leonardo-DiCaprio-s-Oscar-Acceptance-Speech/</url>
      
        <content type="html"><![CDATA[<p>Leonardo DiCaprio`s Oscar Acceptance Speech</p><span id="more"></span><iframe width="853" height="480" src="https://www.youtube.com/embed/xpyrefzvTpI" frameborder="0" allow="accelerometer; autoplay; encrypted-media; gyroscope; picture-in-picture" allowfullscreen></iframe><p>Thank you all so very much. Thank you to the Academy, thank you to all of you in this room.I have to congratulate the other incredible nominees this year, for their unbelievable performances.</p><p>The Revenant was a product of the tireless efforts of an unbelievable cast and crew I got to work alongside. First off, to my brother in this endeavor, Mr. Tom Hardy. Tom, your fierce talent on screen can only be surpassed by your friendship off screen to Mr. Alejandro Iñárritu. As the history of cinema unfolds, you have forged your way into history these past two years. What an unbelievable talent you are. Thank you, to you and Chivo for creating a transcendent cinematic experience for all of us. Thank you to everybody at Fox and New Regency, and particular Ana Milchan, you were the champion of this endeavor. My entire team. I have to thank everyone from the very onset of my career. Mr. Caton-Jones, for casting me in my first film. Mr. Scorsese for teaching me so much about this cinematic art form. To Mr. Ricky Yorn, thank you for helping me navigate my way through this industry. And to my parents, none of this would be possible without you. And to my friends, I love you dearly, you know who you are.</p><p>And lastly I just want to say this: Making The Revenant was about man’s relationship to the natural world. A world that we collectively felt in 2015 as the hottest year in recorded history. Our production needed to move to the southern tip of this planet just to be able to find snow. Climate change is real, it is happening right now. It is the most urgent threat facing our entire species, and we need to work collectively together and stop procrastinating. We need to support leaders around the world who do not speak for the big polluters, the big corporations, but who speak for all of humanity, for the indigenous people of the world, for the billions and billions of underprivileged people who will be most affected by this. For our children’s children, and for those people out there whose voices have been drowned out by the politics of greed. I thank you all for this amazing award tonight. Let us not take this planet for granted. I do not take tonight for granted. Thank you so very much.</p>]]></content>
      
      
      <categories>
          
          <category> speech </category>
          
      </categories>
      
      
        <tags>
            
            <tag> speech </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>wb爬虫项目介绍</title>
      <link href="/2020/03/06/Wb-Spider-Description/"/>
      <url>/2020/03/06/Wb-Spider-Description/</url>
      
        <content type="html"><![CDATA[<div class="hbe hbe-container" id="hexo-blog-encrypt" data-wpm="Oh, this is an invalid password. Check and try again, please." data-whm="OOPS, these decrypted content may changed, but you can still have a look.">  <script id="hbeData" type="hbeData" data-hmacdigest="51d6b565faec33345a9398ffe22dcc0eb90bedfc7a73a45a472307f83e2f9693"></script>  <div class="hbe hbe-content">    <div class="hbe hbe-input hbe-input-default">      <input class="hbe hbe-input-field hbe-input-field-default" type="password" id="hbePass">      <label class="hbe hbe-input-label hbe-input-label-default" for="hbePass">        <span class="hbe hbe-input-label-content hbe-input-label-content-default">您好, 这里需要密码.</span>      </label>    </div>  </div></div><script data-pjax src="/lib/hbe.js"></script><link href="/css/hbe.style.css" rel="stylesheet" type="text/css">]]></content>
      
      
      <categories>
          
          <category> spider </category>
          
          <category> weibo </category>
          
      </categories>
      
      
        <tags>
            
            <tag> spider </tag>
            
            <tag> weibo </tag>
            
            <tag> scrapy </tag>
            
            <tag> private </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>golang 理解</title>
      <link href="/2019/12/09/golang-%E7%90%86%E8%A7%A3/"/>
      <url>/2019/12/09/golang-%E7%90%86%E8%A7%A3/</url>
      
        <content type="html"><![CDATA[<p>golang学习过程中的一些理解</p><span id="more"></span><h3 id="channel"><a class="markdownIt-Anchor" href="#channel"></a> channel</h3><p>从main函数开始，main函数不堵塞，轮不到goroutine</p><p>mian函数堵塞在 i := &lt;- c</p><p>goroutine运行，channel c接收数据，c &lt;- x1, 此时不会堵塞（因为main函数在接收数据，相当于抵消掉），<br />goroutine继续执行，channel c接收数据，c &lt;- x2，此时len© &gt; cap©，goroutine堵塞，需要跳转到另一个goroutine，<br />从而把数据消掉，于是跳转到了main，而此时main函数正在处理的数据是x1，然后继续循环执行到 i := &lt;- c，此时获取x2，<br />然后继续执行到 i := &lt;- c, 因为channel没有数据了，所以堵塞，转到goroutine。</p><p>综合理解：从channel中取数据时，没有数据就阻塞，有数据就继续执行；向channel中写数据时，如果没有goroutine等着接收数据，则阻塞，<br />如果有，则继续执行。</p><p>可以理解为三部分: [ 抵消值 | 缓冲区 | 阻塞值 ]</p><p>先满足抵消值，再填充缓冲区，然后到达阻塞值处，当前goroutine阻塞，跳转到另一个goroutine。</p>]]></content>
      
      
      <categories>
          
          <category> golang </category>
          
      </categories>
      
      
        <tags>
            
            <tag> golang </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>grpc</title>
      <link href="/2019/12/05/grpc/"/>
      <url>/2019/12/05/grpc/</url>
      
        <content type="html"><![CDATA[<p>关于google grpc的一些基础知识和操作流程</p><span id="more"></span><h3 id="必要的-packages"><a class="markdownIt-Anchor" href="#必要的-packages"></a> 必要的 packages</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">pip install grpcio</span><br><span class="line">pip install grpcio-tools</span><br></pre></td></tr></table></figure><h3 id="将-protobuf-生成为-python-代码"><a class="markdownIt-Anchor" href="#将-protobuf-生成为-python-代码"></a> 将 protobuf 生成为 python 代码</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">python -m grpc_tools.protoc     -I../../protos      --python_out=.     --grpc_python_out=.     ../../protos/route_guide.proto</span><br><span class="line">// protoc.py [OPTION] PROTO_FILES</span><br><span class="line">// -IPATH: --proto_path=PATH, Specify the directory <span class="keyword">in</span> <span class="built_in">which</span> to search <span class="keyword">for</span> imports.</span><br><span class="line">// --python_out: Generate Python <span class="built_in">source</span> file</span><br><span class="line">// --grpc_python_out: Generate Python <span class="built_in">source</span> file</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> python </category>
          
          <category> grpc </category>
          
      </categories>
      
      
        <tags>
            
            <tag> python </tag>
            
            <tag> grpc </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>python 系统级操作</title>
      <link href="/2019/12/05/python-%E7%B3%BB%E7%BB%9F%E7%BA%A7%E6%93%8D%E4%BD%9C/"/>
      <url>/2019/12/05/python-%E7%B3%BB%E7%BB%9F%E7%BA%A7%E6%93%8D%E4%BD%9C/</url>
      
        <content type="html"><![CDATA[<p>关于python中对系统的一些操作，比如os模块等等</p><span id="more"></span><h2 id="模块-os"><a class="markdownIt-Anchor" href="#模块-os"></a> 模块 os</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> os</span><br><span class="line"></span><br><span class="line">filepath = os.path.abspath(__file__)</span><br><span class="line">os.path.exists(filepath)</span><br><span class="line"></span><br><span class="line">os.path.isfile(filepath)</span><br><span class="line">os.path.isdir(filepath)</span><br><span class="line"></span><br><span class="line">os.mkdir() <span class="comment"># 单级目录</span></span><br><span class="line">os.makedirs() <span class="comment"># 多级目录</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="模块-sys"><a class="markdownIt-Anchor" href="#模块-sys"></a> 模块 sys</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> sys</span><br><span class="line"></span><br><span class="line">sys.path.append()</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="模块-subprocess"><a class="markdownIt-Anchor" href="#模块-subprocess"></a> 模块 subprocess</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> subprocess</span><br><span class="line"></span><br><span class="line">res = subprocess.Popen([<span class="string">&#x27;cmd1&#x27;</span>, <span class="string">&#x27;cmd2&#x27;</span>, ], shell=<span class="literal">True</span>, stdout=subprocess.PIPE, stderr=subprocess.PIPE)</span><br><span class="line">err = res.stderr.read().decode(<span class="string">&#x27;gbk&#x27;</span>)</span><br><span class="line">out = res.stdout.read().decode(<span class="string">&#x27;gbk&#x27;</span>)</span><br><span class="line"><span class="comment"># read() 只能读取一次</span></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> python </category>
          
          <category> os, sys </category>
          
      </categories>
      
      
        <tags>
            
            <tag> python </tag>
            
            <tag> os,sys </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>python 多线程</title>
      <link href="/2019/12/04/python-%E5%A4%9A%E7%BA%BF%E7%A8%8B/"/>
      <url>/2019/12/04/python-%E5%A4%9A%E7%BA%BF%E7%A8%8B/</url>
      
        <content type="html"><![CDATA[<p>关于python中多线程的实现以及一些知识点</p><span id="more"></span><h2 id="threading"><a class="markdownIt-Anchor" href="#threading"></a> threading</h2><p>实现方式</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> threading</span><br><span class="line">threads = []</span><br><span class="line"><span class="keyword">for</span> _ <span class="keyword">in</span> <span class="built_in">range</span>(thread_num):</span><br><span class="line">    threads.append(threading.Thread(target=func, args=[arg0, arg1]))</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(thread_num):</span><br><span class="line">    threads[i].start()</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(thread_num):</span><br><span class="line">    threads[i].join() <span class="comment"># join的含义就是阻塞在线程i，直到线程i停止，然后阻塞在下一个线程i+1，直到线程i+1停止</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 线程锁</span></span><br><span class="line">mutex = threading.RLock()</span><br><span class="line">mutex.acquire()</span><br><span class="line">mutex.release()</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="threadpool"><a class="markdownIt-Anchor" href="#threadpool"></a> threadpool</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pip install threadpool</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> threadpool</span><br><span class="line">pool = threadpool.ThreadPool(thread_num)  <span class="comment"># 成立线程池</span></span><br><span class="line">params = [x*x <span class="keyword">for</span> x <span class="keyword">in</span> <span class="built_in">range</span>(thread_num)]  <span class="comment"># 拼接 func 的参数</span></span><br><span class="line">thread_requests = threadpool.makeRequests(post, params)  <span class="comment">#</span></span><br><span class="line">[pool.putRequest(req) <span class="keyword">for</span> req <span class="keyword">in</span> thread_requests] <span class="comment"># putRequest就已经启动了线程</span></span><br><span class="line">pool.wait() <span class="comment"># 类似于join进行堵塞</span></span><br></pre></td></tr></table></figure><h2 id="伪并行"><a class="markdownIt-Anchor" href="#伪并行"></a> 伪并行</h2><p>因为GIL（全局解释锁）。</p><p>python中的线程在单个CPU上进行，使用GIL解决资源共享的一致性问题。</p><p>对于计算密集型多线程程序，也就是说单个线程不会有因本线程问题而阻塞的情况（比如网络延迟），那么该线程本来可以安然无恙、无需等待的去进行，但是其他线程要来争夺资源，所以需要进行线程间的切换，而多线程的交替执行涉及到上下文切换、锁机制处理（获取锁，释放锁等），所以需要耗费更多的时间。</p><p>对于网络密集型多线程程序，则无需考虑该问题，因为在等待网络请求的过程中，线程往往会处于阻塞状态，这是可以切换到其他线程进行其他操作，因此节省了时间。</p><h2 id="threadsetdaemontrue"><a class="markdownIt-Anchor" href="#threadsetdaemontrue"></a> thread.setDaemon(True)</h2><p>译名：守护线程</p><p>执行下面代码后</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">thread[i].setDaemon(<span class="literal">True</span>)</span><br></pre></td></tr></table></figure><p>主要体现在线程i与主线程之间的关系，主线程执行完毕后，会直接退出程序，杀死线程i，不会管线程i是否执行完毕</p><p>setDaemon的作用和join相反，join是阻塞主线程</p>]]></content>
      
      
      <categories>
          
          <category> python </category>
          
          <category> threading </category>
          
      </categories>
      
      
        <tags>
            
            <tag> python </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>git基本操作</title>
      <link href="/2019/12/01/git%E5%9F%BA%E6%9C%AC%E6%93%8D%E4%BD%9C/"/>
      <url>/2019/12/01/git%E5%9F%BA%E6%9C%AC%E6%93%8D%E4%BD%9C/</url>
      
        <content type="html"><![CDATA[<p>关于git的基本指令和操作，方便查询</p><span id="more"></span><h2 id="add时忽略某些文件"><a class="markdownIt-Anchor" href="#add时忽略某些文件"></a> add时忽略某些文件</h2><p>根目录添加<code>.gitignore</code>文件，逐行写入需要忽略的文件</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">touch</span> .gitignore</span><br></pre></td></tr></table></figure><h2 id="配置本地用户名和邮箱"><a class="markdownIt-Anchor" href="#配置本地用户名和邮箱"></a> 配置本地用户名和邮箱</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">git config --<span class="built_in">local</span> user.name <span class="string">&quot;&quot;</span></span><br><span class="line">git config --<span class="built_in">local</span> user.email <span class="string">&quot;&quot;</span></span><br></pre></td></tr></table></figure><h2 id="不用每次输入账号密码"><a class="markdownIt-Anchor" href="#不用每次输入账号密码"></a> 不用每次输入账号密码</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git config --global credential.helper store</span><br></pre></td></tr></table></figure><h2 id="标签的基本操作"><a class="markdownIt-Anchor" href="#标签的基本操作"></a> 标签的基本操作</h2><h3 id="创建tag"><a class="markdownIt-Anchor" href="#创建tag"></a> 创建tag</h3><p>创建 tag 是基于本地分支的 commit，而且与分支的推送是两回事，就是说分支已经推送到远程了，但是你的 tag 并没有，如果把 tag 推送到远程分支上，需要另外执行 tag 的推送命令。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">git tag &lt;tagName&gt; //创建本地tag</span><br><span class="line"></span><br><span class="line">git push origin &lt;tagName&gt; //推送到远程仓库</span><br><span class="line"></span><br><span class="line">git push origin --tags // 一次性推送全部tag</span><br><span class="line"></span><br><span class="line">// 以上是基于本地当前分支的最后的一个commit 创建的 tag ，但是如果不想以最后一个，只想以某一个特定的提交为tag ，也是可以的，只要你知道commit 的id。</span><br><span class="line"></span><br><span class="line">git log --pretty=oneline //查看当前分支的提交历史 里面包含 commit id</span><br><span class="line"></span><br><span class="line">git tag -a &lt;tagName&gt; &lt;commitId&gt;</span><br></pre></td></tr></table></figure><h3 id="查看tag"><a class="markdownIt-Anchor" href="#查看tag"></a> 查看tag</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">git show &lt;tagName&gt;</span><br><span class="line">git tag </span><br><span class="line">git ls-remote --tags origin // 查看远程tag</span><br></pre></td></tr></table></figure><h3 id="删除tag"><a class="markdownIt-Anchor" href="#删除tag"></a> 删除tag</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">git tag -d &lt;tagName&gt;</span><br><span class="line">git push origin :&lt;tagName&gt;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> git </category>
          
      </categories>
      
      
        <tags>
            
            <tag> git </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>hexo添加图片</title>
      <link href="/2019/12/01/hexo%E6%B7%BB%E5%8A%A0%E5%9B%BE%E7%89%87/"/>
      <url>/2019/12/01/hexo%E6%B7%BB%E5%8A%A0%E5%9B%BE%E7%89%87/</url>
      
        <content type="html"><![CDATA[<p>如何为hexo网站添加图片呢？</p><span id="more"></span><p><code>_config.yml</code>中的<code>post_asset_folder</code>设为<code>true</code></p><p>每次执行指令<code>hexo new &quot;new_post&quot;</code>，都会在<code>_post</code>目录下生成对应名称的文件夹，把图片放里面</p><p>md文件中的图片只需要图片名+后缀名</p>]]></content>
      
      
      <categories>
          
          <category> hexo </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>hexo设置域名</title>
      <link href="/2019/12/01/hexo%E8%AE%BE%E7%BD%AE%E5%9F%9F%E5%90%8D/"/>
      <url>/2019/12/01/hexo%E8%AE%BE%E7%BD%AE%E5%9F%9F%E5%90%8D/</url>
      
        <content type="html"><![CDATA[<p>如何为hexo设置域名呢</p><span id="more"></span><ol><li>购买域名</li><li>在<code>blog/source/</code>文件夹下创建<code>CNAME</code>文件（无后缀）</li><li><code>CNAME</code>中写你的新域名</li><li><code>username.github.io</code> 项目中的<code>setting</code>中的<code>github pages</code>选项中，在<code>Custom domain</code>填写自己的域名</li></ol><p><img data-src="custom_domain.jpg" alt="自定义域名" /></p>]]></content>
      
      
      <categories>
          
          <category> hexo </category>
          
      </categories>
      
      
        <tags>
            
            <tag> hexo </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>windows 设置代理</title>
      <link href="/2019/11/30/windows-%E8%AE%BE%E7%BD%AE%E4%BB%A3%E7%90%86/"/>
      <url>/2019/11/30/windows-%E8%AE%BE%E7%BD%AE%E4%BB%A3%E7%90%86/</url>
      
        <content type="html"><![CDATA[<p>在Windows中设置本地代理</p><span id="more"></span><ol><li>命令行</li></ol><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">set</span> HTTP_PROXY=http://user:password@proxy.domain.com:port</span><br><span class="line"><span class="built_in">set</span> HTTP_PROXY=http://127.0.0.1:12639</span><br><span class="line"><span class="built_in">set</span> HTTPS_PROXY=http://127.0.0.1:12639</span><br></pre></td></tr></table></figure><ol start="2"><li>系统变量</li></ol><p>创建两个系统变量</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">HTTP_PROXY</span><br><span class="line">HTTPS_PROXY</span><br><span class="line"><span class="comment"># 内容：http://127.0.0.1:12639</span></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> windows </category>
          
      </categories>
      
      
        <tags>
            
            <tag> proxy </tag>
            
            <tag> windows </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>centos7 安装vmware-tools</title>
      <link href="/2018/09/03/centos7-%E5%AE%89%E8%A3%85vmware-tools/"/>
      <url>/2018/09/03/centos7-%E5%AE%89%E8%A3%85vmware-tools/</url>
      
        <content type="html"><![CDATA[<p>在vmware12中，centos7安装vmware-tools的过程</p><span id="more"></span>]]></content>
      
      
      <categories>
          
          <category> vmware </category>
          
      </categories>
      
      
        <tags>
            
            <tag> centos </tag>
            
            <tag> vmware </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>anaconda 的安装与使用</title>
      <link href="/2018/09/02/anaconda-%E7%9A%84%E5%AE%89%E8%A3%85%E4%B8%8E%E4%BD%BF%E7%94%A8/"/>
      <url>/2018/09/02/anaconda-%E7%9A%84%E5%AE%89%E8%A3%85%E4%B8%8E%E4%BD%BF%E7%94%A8/</url>
      
        <content type="html"><![CDATA[<p>安装和使用anaconda以及miniconda过程中遇到的问题</p><span id="more"></span><h2 id="安装"><a class="markdownIt-Anchor" href="#安装"></a> 安装</h2><p><strong>问题1：</strong> centos7.5 64位安装miniconda遇到报错： <code>bunzip2: command not found</code></p><p><strong>解决办法：</strong></p><p>安装bzip2：</p> <figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yum install -y bzip2</span><br></pre></td></tr></table></figure><p><strong>问题2：</strong> 加入系统path</p><p><strong>解决办法（永久生效）：</strong></p><ul><li>修改/etc/profile文件</li></ul> <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">vim /etc/profile</span><br></pre></td></tr></table></figure><ul><li>将以下文本加入到该文件末尾</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">PATH=<span class="variable">$PATH</span>:/root/Anaconda3/bin</span><br><span class="line"><span class="built_in">export</span> PATH</span><br></pre></td></tr></table></figure><ul><li>输入以下命令激活PATH，否则是不起作用的（如果在安装cond的过程中已经选择了加入path，那么安装完之后如果不执行以下命令会发现conda依旧是<code>command not found</code></li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">source</span> ~/.bashrc</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> python </category>
          
          <category> Anaconda </category>
          
      </categories>
      
      
        <tags>
            
            <tag> python </tag>
            
            <tag> Anaconda </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>selenium 无头浏览器 配置</title>
      <link href="/2018/09/02/selenium%20%E6%97%A0%E5%A4%B4%E6%B5%8F%E8%A7%88%E5%99%A8%20%E9%85%8D%E7%BD%AE/"/>
      <url>/2018/09/02/selenium%20%E6%97%A0%E5%A4%B4%E6%B5%8F%E8%A7%88%E5%99%A8%20%E9%85%8D%E7%BD%AE/</url>
      
        <content type="html"><![CDATA[<p>python 中selenium设置无头浏览器配置options</p><span id="more"></span><blockquote><p>phantomjs 在新版本selenium中已经warning不支持了</p></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> selenium <span class="keyword">import</span> webdriver </span><br><span class="line"></span><br><span class="line">options = webdriver.FirefoxOptions()</span><br><span class="line">options.add_argument(<span class="string">&quot;--headless&quot;</span>)</span><br><span class="line">webdriver.Firefox(options=options)</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> python </category>
          
          <category> selenium </category>
          
      </categories>
      
      
        <tags>
            
            <tag> python </tag>
            
            <tag> selenium </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>pycharm 2018.02 激活码</title>
      <link href="/2018/08/21/pycharm-2018-02-%E6%BF%80%E6%B4%BB%E7%A0%81/"/>
      <url>/2018/08/21/pycharm-2018-02-%E6%BF%80%E6%B4%BB%E7%A0%81/</url>
      
        <content type="html"><![CDATA[<p>pycharm 2018.02版本的激活码</p><span id="more"></span><p>网上的很多破解好像都逐渐失效了</p><p>最方便的做法就是到淘宝上买吧</p>]]></content>
      
      
      <categories>
          
          <category> python </category>
          
          <category> pycharm </category>
          
      </categories>
      
      
        <tags>
            
            <tag> pycharm </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>vmware12 Pro 安装 windows系统</title>
      <link href="/2018/08/01/vmware12-Pro-%E5%AE%89%E8%A3%85-windows%E7%B3%BB%E7%BB%9F/"/>
      <url>/2018/08/01/vmware12-Pro-%E5%AE%89%E8%A3%85-windows%E7%B3%BB%E7%BB%9F/</url>
      
        <content type="html"><![CDATA[<h3 id="使用vmware虚拟机安装操作系统的一点经历"><a class="markdownIt-Anchor" href="#使用vmware虚拟机安装操作系统的一点经历"></a> 使用VMware虚拟机安装操作系统的一点经历</h3><span id="more"></span><p>之前使用VMware12 pro安装Windows系统毫无问题，但是昨天安装的时候却总是出现 <code>operating system not found</code>的情况。经过一番百度和Google，换了各种iso镜像文件，也删过网络适配器，调整过BIOS启动项，但是都以失败告终，最终在一篇博客上看到说，<em><strong>VMware不支持各种 ghost 镜像，只能用原生系统文件，试验成功。</strong></em></p><blockquote><p>原生系统：<a href="https://msdn.itellyou.cn/">https://msdn.itellyou.cn/</a></p></blockquote><p>还有个小技巧：</p><ul><li>进入VMware 的 BIOS，右击系统名称，电源，固件。这样就不用像以前那样和VMware拼速度了。</li></ul><p>目前还没有解决的问题：</p><ul><li>VMware usb3.0 接口 暂时不知道怎么改，试了几种方法都有问题</li></ul>]]></content>
      
      
      <categories>
          
          <category> vmware </category>
          
      </categories>
      
      
        <tags>
            
            <tag> vmware </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>hexo+github_page 博客创建流程</title>
      <link href="/2018/07/23/%E5%8D%9A%E5%AE%A2%E5%88%9B%E5%BB%BA%E6%B5%81%E7%A8%8B/"/>
      <url>/2018/07/23/%E5%8D%9A%E5%AE%A2%E5%88%9B%E5%BB%BA%E6%B5%81%E7%A8%8B/</url>
      
        <content type="html"><![CDATA[<h2 id="前言"><a class="markdownIt-Anchor" href="#前言"></a> 前言</h2><blockquote><p>其实从时间上可以看出来，这些字儿是在我搭建博客有一段时间之后才写的，主要是之前对这个搭建流程不是很熟悉，现在呢整体有了一个把握，将就着写写，大家也就将就着看看（不经常写博客，语言功底比较差），不懂的地方可以comment或者自行google / baidu。</p></blockquote><span id="more"></span><h2 id="基本流程"><a class="markdownIt-Anchor" href="#基本流程"></a> 基本流程</h2><ul><li>安装nodejs，自带npmb包管理工具</li><li>安装git并设置</li><li>安装hexo并做本地配置</li><li>部署到github page</li><li>设置主题（设置到自己喜欢的主题还是很费劲的）</li></ul><h2 id="搭建步骤"><a class="markdownIt-Anchor" href="#搭建步骤"></a> 搭建步骤</h2><h3 id="1-创建自己的github账号以及github-page"><a class="markdownIt-Anchor" href="#1-创建自己的github账号以及github-page"></a> 1. 创建自己的github账号以及github page</h3><p><a href="https://github.com/">注册或登录到github</a></p><p>登录成功后，创建专门放置博客的仓库，点击新建仓库</p><p><img data-src="http://ww1.sinaimg.cn/large/76eb1075ly1ftk1vzqv1dj20ug0dtta7.jpg" alt="点击新建仓库" /></p><p>仓库名称必须是<code>用户名.github.io</code>，因为我已经有了这个仓库，所以提示<code>The repository kimroniny.github.io already exists on this account</code>，确定名称无误后直接<code>create repository</code>即可</p><p><img data-src="http://ww1.sinaimg.cn/large/76eb1075ly1ftk1xlu70zj20kv0eigmn.jpg" alt="输入仓库名称" /></p><p>记录下该仓库ssh链接</p><p><img data-src="http://ww1.sinaimg.cn/large/76eb1075ly1ftk20a2m38j20t20di75s.jpg" alt="ssh链接" /></p><h3 id="2-安装nodejs"><a class="markdownIt-Anchor" href="#2-安装nodejs"></a> 2. 安装nodejs</h3><p><a href="http://nodejs.cn/download/">下载链接</a></p><p>下载下来之后，直接一路到底到底安装即可，安装完成之后命令行输入以下命令检测是否安装成功，出现版本号即可</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">node -v</span><br><span class="line">npm -v</span><br></pre></td></tr></table></figure><p><img data-src="http://ww1.sinaimg.cn/large/76eb1075ly1ftk00iqlg0j20ad02j0sj.jpg" alt="图片" /></p><h3 id="3-安装git并设置"><a class="markdownIt-Anchor" href="#3-安装git并设置"></a> 3. 安装git并设置</h3><h4 id="安装git"><a class="markdownIt-Anchor" href="#安装git"></a> 安装git</h4><p><a href="https://git-scm.com/downloads">下载链接</a></p><p>同理，一路安装即可</p><p>安装完成之后，在桌面或者文件夹右击鼠标，出现如图选项可认为</p><p><img data-src="http://ww1.sinaimg.cn/large/76eb1075ly1ftk06prcl1j205m0a0q3g.jpg" alt="git安装成功展示" /></p><p>或者命令行看是否可以检测到git版本</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git --version</span><br></pre></td></tr></table></figure><p><img data-src="http://ww1.sinaimg.cn/large/76eb1075ly1ftk0a1rs3wj20bi0140si.jpg" alt="git版本检测展示" /></p><h4 id="git基本设置"><a class="markdownIt-Anchor" href="#git基本设置"></a> git基本设置</h4><p>开始菜单打开<code>git bash</code>，输入以下命令配置邮箱和用户名</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">git config --global user.name &quot;your name&quot;</span><br><span class="line">git config --global user.email &quot;your email&quot;</span><br></pre></td></tr></table></figure><blockquote><p><em><strong>Hint:</strong></em><br />当安装完 Git 应该做的第一件事就是设置你的用户名称与邮件地址。 这样做很重要，因为每一个 Git 的提交都会使用这些信息，并且它会写入到你的每一次提交中，不可更改。<br />其实这个的用处我现在也不是很清楚，目前还没有涉及到很深入的地方</p></blockquote><p>生成秘钥</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ssh-keygen -t rsa -C &quot;1301862177@qq.com&quot;</span><br></pre></td></tr></table></figure><blockquote><p><em><strong>Hint:</strong></em><br />设置秘钥的目的是为了不用每次发布到github时都要输入一遍用户名和邮箱，功能类似于本地cookie</p></blockquote><p>windows用户直接打开文件夹<code>C:\Users\Administrator.PC-201807221731\.ssh</code>， 将<code>id_rsa.pub</code>文件中的内容copy到如图位置（前提得先创建自己的github账号，具体创建方法百度吧）：</p><p>github ssh_key 设置界面</p><p><img data-src="http://ww1.sinaimg.cn/large/76eb1075ly1ftk1gzpkhkj20t10hldh8.jpg" alt="github ssh_key 设置界面" /></p><p>github ssh_key 填写界面</p><p><img data-src="http://ww1.sinaimg.cn/large/76eb1075ly1ftk1ia1e5kj20ss0hmq3x.jpg" alt="github ssh_key 填写界面" /></p><p>以上设置完成之后，打开<code>git bash</code>，输入以下命令检测是否操作成功</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ssh -T git@github.com</span><br></pre></td></tr></table></figure><p>执行命令结果如下图，则成功</p><p><img data-src="http://ww1.sinaimg.cn/large/76eb1075ly1ftk2ir7g7uj20g004s0ss.jpg" alt="操作成功展示" /></p><h3 id="4-安装hexo"><a class="markdownIt-Anchor" href="#4-安装hexo"></a> 4. 安装hexo</h3><p>使用nodejs自带的包管理工具<code>npm</code>进行安装</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install -g hexo</span><br></pre></td></tr></table></figure><p>检测hexo是否安装成功</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hexo -v</span><br></pre></td></tr></table></figure><p>在想要放置博客的文件夹下打开cmd命令行窗口 <em><strong>（这里的位置很重要）</strong></em> ，初始化hexo，时间比较久</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hexo init</span><br></pre></td></tr></table></figure><p>安装必须的组件</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install</span><br></pre></td></tr></table></figure><p>生成必要的文件</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hexo g</span><br></pre></td></tr></table></figure><p>开启服务器，体验hexo</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hexo s</span><br></pre></td></tr></table></figure><p>显示如图，即在本地配置成功，万里长征刚不到一半，不要着急</p><p><img data-src="http://ww1.sinaimg.cn/large/76eb1075ly1ftk11nivd3j20bz06adi2.jpg" alt="本地配置成功展示" /></p><h3 id="5-发布到github-page"><a class="markdownIt-Anchor" href="#5-发布到github-page"></a> 5. 发布到github page</h3><p>在你的博客文件夹下，找到<code>_config.yml</code>文件，打开后做如下修改</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Deployment</span></span><br><span class="line"><span class="comment">## Docs: https://hexo.io/docs/deployment.html</span></span><br><span class="line"><span class="attr">deploy:</span></span><br><span class="line">  <span class="attr">type:</span> <span class="string">git</span></span><br><span class="line">  <span class="comment"># 这里是你自己的ssh地址</span></span><br><span class="line">  <span class="attr">repository:</span> <span class="string">git@github.com:kimroniny/kimroniny.github.io.git</span> </span><br><span class="line">  <span class="attr">branch:</span> <span class="string">master</span></span><br></pre></td></tr></table></figure><p>部署之前需要先安装一个东西，如下（打开cmd窗口即可，位置无所谓）</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install hexo-deployer-git --save</span><br></pre></td></tr></table></figure><p>在放置博客的文件夹下打开cmd命令行窗口，输入如下命令</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">hexo clean // 一般都先clean一下</span><br><span class="line">hexo g // 生成相关的文件，一般执行 hexo d 或者 hexo s 之前都要先 hexo g 一下</span><br><span class="line">hexo d // 部署到github，这句话是关键</span><br></pre></td></tr></table></figure><blockquote><p>注意: 此时 node 最好用 <code>v13.14.0</code> 版本, 高版本的 node 在执行 <code>hexo d</code> 时会报参数错误</p></blockquote><p>部署成功后，浏览器地址栏输入 <code>用户名.github.io</code> 即可看到自己的博客</p><blockquote><p><em><strong>Hint:</strong></em><br />一般部署到github之后需要反应一段时间才能生效，时间不定，我使用的这段时间最多不超过五分钟，所以立马打开网址时可能不会看到效果，不要着急，稍等一会儿就可以了。</p></blockquote><h3 id="6-仓库说明"><a class="markdownIt-Anchor" href="#6-仓库说明"></a> 6. 仓库说明</h3><p>一共有两个分支: <code>master</code> 和 <code>hexo</code>.</p><p><code>master</code> 分支是hexo的public内容, 不用编辑.</p><p><code>hexo</code> 分支是编辑博客的分支, 所有的操作都在 hexo 分支下进行/</p><hr /><h2 id="参考文档"><a class="markdownIt-Anchor" href="#参考文档"></a> 参考文档</h2><ul><li><a href="https://www.liaoxuefeng.com/wiki/0013739516305929606dd18361248578c67b8067c8c017b000">廖雪峰的官方网站 - Git教程</a></li><li><a href="https://zhuanlan.zhihu.com/p/34654952">Mac+Hexo+GitHub搭建博客教程</a></li><li><a href="https://blog.csdn.net/qq_33699981/article/details/72716951">hexo的next主题个性化教程：打造炫酷网站</a></li><li><a href="https://www.cnblogs.com/fengxiongZz/p/7707219.html">使用Hexo+Github一步步搭建属于自己的博客（基础）</a></li></ul><blockquote><p>这篇文章是我在部署好并且使用了几天之后写的，之中可能会有些细节遗漏，如有疑问，欢迎评论.</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> hexo </category>
          
      </categories>
      
      
        <tags>
            
            <tag> hexo </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>第一篇hexo博客</title>
      <link href="/2018/07/14/%E7%AC%AC%E4%B8%80%E7%AF%87hexo%E5%8D%9A%E5%AE%A2/"/>
      <url>/2018/07/14/%E7%AC%AC%E4%B8%80%E7%AF%87hexo%E5%8D%9A%E5%AE%A2/</url>
      
        <content type="html"><![CDATA[<p>写下自己的一点想法</p><span id="more"></span><h2 id="一点感想"><a class="markdownIt-Anchor" href="#一点感想"></a> 一点感想</h2><p>2018年7月14日22:42:49<br />在这个时间我写下这点小随笔，算是记录一下忙活了一个下午的成果吧。</p><p>主要的时间花费在了博客的样式上，很多配置文件，很多配置项，让我明白了参数配置文件化的优势，之前很low，直接写死在文件里面，现在也算张了张见识。</p><p>因为第一次发布blog，自己也不知道该写些什么，做这个blog参考内容最多的文章就是<a href="https://blog.csdn.net/qq_33699981/article/details/72716951">这篇博客</a>，在这里衷心的感谢这位朋友，没找到打赏的按钮，只能点个“赞”了。</p><p>其实呢，明天就要去参加某实验室的研究生夏令营了，今天胡乱写了点acm题目，当时还没有这个blog，心得就放在了<a href="https://www.facebook.com/profile.php?id=100021735524497">fb</a>上，也是因为这个，感觉fb很不正式，便打算配置个self-blog，折腾了半下午加一晚上吧，也算有了个基本样子。</p><p>因为刚刚有了另一个实验室的offer，所以对接下来的这个lab也不care了，再加上前两天刚被这个实验室的导师diss一番，有了很不好的印象，所以——呵呵，随缘咯。</p><p>对接下来的这个实验室抱着佛系心态，并不代表我要放弃其他的，比如清华深圳在九推的时候还是打算冲一波的。只是不知道我之前联系的老师还记不记得我（毕竟好久不搭理我了，惨兮兮）。</p><p>明天一早就要出发了，现在【2018年7月14日22:52:35】这个点，也该安心睡觉了，毕竟已经弄完了自己好久就想搞的一个小job，有了自己的博客，仿佛有了归宿…</p><p>最后，<strong>welcome to my Home!!!</strong></p>]]></content>
      
      
      <categories>
          
          <category> hexo </category>
          
      </categories>
      
      
        <tags>
            
            <tag> hexo </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
